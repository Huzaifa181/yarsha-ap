// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "price.proto" (package "yarsha.solana.price", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message yarsha.solana.price.PriceRequest
 */
export interface PriceRequest {
}
/**
 * @generated from protobuf message yarsha.solana.price.PriceUpdate
 */
export interface PriceUpdate {
    /**
     * @generated from protobuf field: string solToUsd = 1;
     */
    solToUsd: string;
    /**
     * @generated from protobuf field: string publishTime = 2;
     */
    publishTime: string;
    /**
     * @generated from protobuf field: string percentageChange = 3;
     */
    percentageChange: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class PriceRequest$Type extends MessageType<PriceRequest> {
    constructor() {
        super("yarsha.solana.price.PriceRequest", []);
    }
    create(value?: PartialMessage<PriceRequest>): PriceRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PriceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PriceRequest): PriceRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PriceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.solana.price.PriceRequest
 */
export const PriceRequest = new PriceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PriceUpdate$Type extends MessageType<PriceUpdate> {
    constructor() {
        super("yarsha.solana.price.PriceUpdate", [
            { no: 1, name: "solToUsd", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "publishTime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "percentageChange", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PriceUpdate>): PriceUpdate {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.solToUsd = "";
        message.publishTime = "";
        message.percentageChange = "";
        if (value !== undefined)
            reflectionMergePartial<PriceUpdate>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PriceUpdate): PriceUpdate {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string solToUsd */ 1:
                    message.solToUsd = reader.string();
                    break;
                case /* string publishTime */ 2:
                    message.publishTime = reader.string();
                    break;
                case /* string percentageChange */ 3:
                    message.percentageChange = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PriceUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string solToUsd = 1; */
        if (message.solToUsd !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.solToUsd);
        /* string publishTime = 2; */
        if (message.publishTime !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.publishTime);
        /* string percentageChange = 3; */
        if (message.percentageChange !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.percentageChange);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.solana.price.PriceUpdate
 */
export const PriceUpdate = new PriceUpdate$Type();
/**
 * @generated ServiceType for protobuf service yarsha.solana.price.PriceService
 */
export const PriceService = new ServiceType("yarsha.solana.price.PriceService", [
    { name: "PriceUpdates", serverStreaming: true, options: {}, I: PriceRequest, O: PriceUpdate }
]);
