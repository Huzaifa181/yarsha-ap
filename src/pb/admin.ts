// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "admin.proto" (package "yarsha.admin.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message yarsha.admin.v1.RequestHeader
 */
export interface RequestHeader {
    /**
     * @generated from protobuf field: string RequestId = 1 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string Timestamp = 2 [json_name = "Timestamp"];
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string Channel = 3 [json_name = "Channel"];
     */
    channel: string;
    /**
     * @generated from protobuf field: string DeviceType = 4 [json_name = "DeviceType"];
     */
    deviceType: string;
    /**
     * @generated from protobuf field: string DeviceId = 5 [json_name = "DeviceId"];
     */
    deviceId: string;
    /**
     * @generated from protobuf field: string ClientIp = 6 [json_name = "ClientIp"];
     */
    clientIp: string;
    /**
     * @generated from protobuf field: string Action = 7 [json_name = "Action"];
     */
    action: string;
    /**
     * @generated from protobuf field: string AppVersion = 8 [json_name = "AppVersion"];
     */
    appVersion: string;
    /**
     * @generated from protobuf field: string LanguageCode = 9 [json_name = "LanguageCode"];
     */
    languageCode: string;
    /**
     * @generated from protobuf field: string DeviceModel = 10 [json_name = "DeviceModel"];
     */
    deviceModel: string;
}
/**
 * @generated from protobuf message yarsha.admin.v1.ResponseHeader
 */
export interface ResponseHeader {
    /**
     * @generated from protobuf field: string Status = 1 [json_name = "Status"];
     */
    status: string;
    /**
     * @generated from protobuf field: string StatusCode = 2 [json_name = "StatusCode"];
     */
    statusCode: string;
    /**
     * @generated from protobuf field: string Timestamp = 3 [json_name = "Timestamp"];
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string RequestId = 4 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string ResponseTitle = 5 [json_name = "ResponseTitle"];
     */
    responseTitle: string;
    /**
     * @generated from protobuf field: string ResponseDescription = 6 [json_name = "ResponseDescription"];
     */
    responseDescription: string;
}
/**
 * @generated from protobuf message yarsha.admin.v1.AddAdminsRequestBody
 */
export interface AddAdminsRequestBody {
    /**
     * @generated from protobuf field: string GroupId = 1 [json_name = "GroupId"];
     */
    groupId: string;
    /**
     * @generated from protobuf field: repeated string ParticipantsId = 2 [json_name = "ParticipantsId"];
     */
    participantsId: string[];
}
/**
 * @generated from protobuf message yarsha.admin.v1.AddAdminsRequestWrapper
 */
export interface AddAdminsRequestWrapper {
    /**
     * @generated from protobuf field: yarsha.admin.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: yarsha.admin.v1.AddAdminsRequestBody Body = 2 [json_name = "Body"];
     */
    body?: AddAdminsRequestBody;
}
/**
 * @generated from protobuf message yarsha.admin.v1.AddAdminsResponseBody
 */
export interface AddAdminsResponseBody {
    /**
     * @generated from protobuf field: string GroupId = 1 [json_name = "GroupId"];
     */
    groupId: string;
    /**
     * @generated from protobuf field: repeated string AdminIds = 2 [json_name = "AdminIds"];
     */
    adminIds: string[];
}
/**
 * @generated from protobuf message yarsha.admin.v1.AddAdminsResponseWrapper
 */
export interface AddAdminsResponseWrapper {
    /**
     * @generated from protobuf field: yarsha.admin.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.admin.v1.ChatDetail Response = 2 [json_name = "Response"];
     */
    response?: ChatDetail;
}
/**
 * @generated from protobuf message yarsha.admin.v1.GetGroupChatDetailsResponse
 */
export interface GetGroupChatDetailsResponse {
    /**
     * @generated from protobuf field: yarsha.admin.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.admin.v1.ChatDetail Chat = 2 [json_name = "Chat"];
     */
    chat?: ChatDetail;
}
/**
 * @generated from protobuf message yarsha.admin.v1.ChatDetail
 */
export interface ChatDetail {
    /**
     * @generated from protobuf field: string ChatId = 1 [json_name = "ChatId"];
     */
    chatId: string;
    /**
     * @generated from protobuf field: string GroupName = 2 [json_name = "GroupName"];
     */
    groupName: string;
    /**
     * @generated from protobuf field: string GroupIcon = 3 [json_name = "GroupIcon"];
     */
    groupIcon: string;
    /**
     * @generated from protobuf field: string BackgroundColor = 4 [json_name = "BackgroundColor"];
     */
    backgroundColor: string;
    /**
     * @generated from protobuf field: repeated string ParticipantsId = 5 [json_name = "ParticipantsId"];
     */
    participantsId: string[];
    /**
     * @generated from protobuf field: repeated yarsha.admin.v1.ParticipantDetail ParticipantDetails = 6 [json_name = "ParticipantDetails"];
     */
    participantDetails: ParticipantDetail[];
    /**
     * @generated from protobuf field: string Type = 7 [json_name = "Type"];
     */
    type: string;
    /**
     * @generated from protobuf field: string GroupDescription = 8 [json_name = "GroupDescription"];
     */
    groupDescription: string;
}
/**
 * @generated from protobuf message yarsha.admin.v1.ParticipantDetail
 */
export interface ParticipantDetail {
    /**
     * @generated from protobuf field: string Id = 1 [json_name = "Id"];
     */
    id: string;
    /**
     * @generated from protobuf field: string Username = 2 [json_name = "Username"];
     */
    username: string;
    /**
     * @generated from protobuf field: string FullName = 3 [json_name = "FullName"];
     */
    fullName: string;
    /**
     * @generated from protobuf field: string ProfilePicture = 4 [json_name = "ProfilePicture"];
     */
    profilePicture: string;
    /**
     * @generated from protobuf field: string Address = 5 [json_name = "Address"];
     */
    address: string;
    /**
     * @generated from protobuf field: string UserBio = 6 [json_name = "UserBio"];
     */
    userBio: string;
    /**
     * @generated from protobuf field: string Role = 7 [json_name = "Role"];
     */
    role: string;
    /**
     * @generated from protobuf field: string BackgroundColor = 8 [json_name = "BackgroundColor"];
     */
    backgroundColor: string;
    /**
     * @generated from protobuf field: string LastActive = 9 [json_name = "LastActive"];
     */
    lastActive: string;
    /**
     * @generated from protobuf field: string Status = 10 [json_name = "Status"];
     */
    status: string;
}
/**
 * @generated from protobuf message yarsha.admin.v1.RemoveAdminsRequestBody
 */
export interface RemoveAdminsRequestBody {
    /**
     * @generated from protobuf field: string GroupId = 1 [json_name = "GroupId"];
     */
    groupId: string;
    /**
     * @generated from protobuf field: repeated string AdminIds = 2 [json_name = "AdminIds"];
     */
    adminIds: string[];
}
/**
 * @generated from protobuf message yarsha.admin.v1.RemoveAdminsRequestWrapper
 */
export interface RemoveAdminsRequestWrapper {
    /**
     * @generated from protobuf field: yarsha.admin.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: yarsha.admin.v1.RemoveAdminsRequestBody Body = 2 [json_name = "Body"];
     */
    body?: RemoveAdminsRequestBody;
}
/**
 * @generated from protobuf message yarsha.admin.v1.RemoveAdminsResponseWrapper
 */
export interface RemoveAdminsResponseWrapper {
    /**
     * @generated from protobuf field: yarsha.admin.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.admin.v1.ChatDetail Response = 2 [json_name = "Response"];
     */
    response?: ChatDetail;
}
/**
 * @generated from protobuf message yarsha.admin.v1.RemoveParticipantsRequestBody
 */
export interface RemoveParticipantsRequestBody {
    /**
     * @generated from protobuf field: string GroupId = 1 [json_name = "GroupId"];
     */
    groupId: string;
    /**
     * @generated from protobuf field: repeated string ParticipantsId = 2 [json_name = "ParticipantsId"];
     */
    participantsId: string[];
}
/**
 * @generated from protobuf message yarsha.admin.v1.RemoveParticipantsRequestWrapper
 */
export interface RemoveParticipantsRequestWrapper {
    /**
     * @generated from protobuf field: yarsha.admin.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: yarsha.admin.v1.RemoveParticipantsRequestBody Body = 2 [json_name = "Body"];
     */
    body?: RemoveParticipantsRequestBody;
}
/**
 * @generated from protobuf message yarsha.admin.v1.RemoveParticipantsResponseWrapper
 */
export interface RemoveParticipantsResponseWrapper {
    /**
     * @generated from protobuf field: yarsha.admin.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.admin.v1.ChatDetail Response = 2 [json_name = "Response"];
     */
    response?: ChatDetail;
}
// @generated message type with reflection information, may provide speed optimized methods
class RequestHeader$Type extends MessageType<RequestHeader> {
    constructor() {
        super("yarsha.admin.v1.RequestHeader", [
            { no: 1, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Channel", kind: "scalar", jsonName: "Channel", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "DeviceType", kind: "scalar", jsonName: "DeviceType", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "DeviceId", kind: "scalar", jsonName: "DeviceId", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ClientIp", kind: "scalar", jsonName: "ClientIp", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "Action", kind: "scalar", jsonName: "Action", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "AppVersion", kind: "scalar", jsonName: "AppVersion", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "LanguageCode", kind: "scalar", jsonName: "LanguageCode", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "DeviceModel", kind: "scalar", jsonName: "DeviceModel", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RequestHeader>): RequestHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = "";
        message.timestamp = "";
        message.channel = "";
        message.deviceType = "";
        message.deviceId = "";
        message.clientIp = "";
        message.action = "";
        message.appVersion = "";
        message.languageCode = "";
        message.deviceModel = "";
        if (value !== undefined)
            reflectionMergePartial<RequestHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestHeader): RequestHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string RequestId = 1 [json_name = "RequestId"];*/ 1:
                    message.requestId = reader.string();
                    break;
                case /* string Timestamp = 2 [json_name = "Timestamp"];*/ 2:
                    message.timestamp = reader.string();
                    break;
                case /* string Channel = 3 [json_name = "Channel"];*/ 3:
                    message.channel = reader.string();
                    break;
                case /* string DeviceType = 4 [json_name = "DeviceType"];*/ 4:
                    message.deviceType = reader.string();
                    break;
                case /* string DeviceId = 5 [json_name = "DeviceId"];*/ 5:
                    message.deviceId = reader.string();
                    break;
                case /* string ClientIp = 6 [json_name = "ClientIp"];*/ 6:
                    message.clientIp = reader.string();
                    break;
                case /* string Action = 7 [json_name = "Action"];*/ 7:
                    message.action = reader.string();
                    break;
                case /* string AppVersion = 8 [json_name = "AppVersion"];*/ 8:
                    message.appVersion = reader.string();
                    break;
                case /* string LanguageCode = 9 [json_name = "LanguageCode"];*/ 9:
                    message.languageCode = reader.string();
                    break;
                case /* string DeviceModel = 10 [json_name = "DeviceModel"];*/ 10:
                    message.deviceModel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string RequestId = 1 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.requestId);
        /* string Timestamp = 2 [json_name = "Timestamp"]; */
        if (message.timestamp !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.timestamp);
        /* string Channel = 3 [json_name = "Channel"]; */
        if (message.channel !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.channel);
        /* string DeviceType = 4 [json_name = "DeviceType"]; */
        if (message.deviceType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.deviceType);
        /* string DeviceId = 5 [json_name = "DeviceId"]; */
        if (message.deviceId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deviceId);
        /* string ClientIp = 6 [json_name = "ClientIp"]; */
        if (message.clientIp !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.clientIp);
        /* string Action = 7 [json_name = "Action"]; */
        if (message.action !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.action);
        /* string AppVersion = 8 [json_name = "AppVersion"]; */
        if (message.appVersion !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.appVersion);
        /* string LanguageCode = 9 [json_name = "LanguageCode"]; */
        if (message.languageCode !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.languageCode);
        /* string DeviceModel = 10 [json_name = "DeviceModel"]; */
        if (message.deviceModel !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.deviceModel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.admin.v1.RequestHeader
 */
export const RequestHeader = new RequestHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseHeader$Type extends MessageType<ResponseHeader> {
    constructor() {
        super("yarsha.admin.v1.ResponseHeader", [
            { no: 1, name: "Status", kind: "scalar", jsonName: "Status", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "StatusCode", kind: "scalar", jsonName: "StatusCode", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ResponseTitle", kind: "scalar", jsonName: "ResponseTitle", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ResponseDescription", kind: "scalar", jsonName: "ResponseDescription", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseHeader>): ResponseHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        message.statusCode = "";
        message.timestamp = "";
        message.requestId = "";
        message.responseTitle = "";
        message.responseDescription = "";
        if (value !== undefined)
            reflectionMergePartial<ResponseHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseHeader): ResponseHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Status = 1 [json_name = "Status"];*/ 1:
                    message.status = reader.string();
                    break;
                case /* string StatusCode = 2 [json_name = "StatusCode"];*/ 2:
                    message.statusCode = reader.string();
                    break;
                case /* string Timestamp = 3 [json_name = "Timestamp"];*/ 3:
                    message.timestamp = reader.string();
                    break;
                case /* string RequestId = 4 [json_name = "RequestId"];*/ 4:
                    message.requestId = reader.string();
                    break;
                case /* string ResponseTitle = 5 [json_name = "ResponseTitle"];*/ 5:
                    message.responseTitle = reader.string();
                    break;
                case /* string ResponseDescription = 6 [json_name = "ResponseDescription"];*/ 6:
                    message.responseDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Status = 1 [json_name = "Status"]; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        /* string StatusCode = 2 [json_name = "StatusCode"]; */
        if (message.statusCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.statusCode);
        /* string Timestamp = 3 [json_name = "Timestamp"]; */
        if (message.timestamp !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.timestamp);
        /* string RequestId = 4 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.requestId);
        /* string ResponseTitle = 5 [json_name = "ResponseTitle"]; */
        if (message.responseTitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.responseTitle);
        /* string ResponseDescription = 6 [json_name = "ResponseDescription"]; */
        if (message.responseDescription !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.responseDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.admin.v1.ResponseHeader
 */
export const ResponseHeader = new ResponseHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddAdminsRequestBody$Type extends MessageType<AddAdminsRequestBody> {
    constructor() {
        super("yarsha.admin.v1.AddAdminsRequestBody", [
            { no: 1, name: "GroupId", kind: "scalar", jsonName: "GroupId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ParticipantsId", kind: "scalar", jsonName: "ParticipantsId", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddAdminsRequestBody>): AddAdminsRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = "";
        message.participantsId = [];
        if (value !== undefined)
            reflectionMergePartial<AddAdminsRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddAdminsRequestBody): AddAdminsRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string GroupId = 1 [json_name = "GroupId"];*/ 1:
                    message.groupId = reader.string();
                    break;
                case /* repeated string ParticipantsId = 2 [json_name = "ParticipantsId"];*/ 2:
                    message.participantsId.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddAdminsRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string GroupId = 1 [json_name = "GroupId"]; */
        if (message.groupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupId);
        /* repeated string ParticipantsId = 2 [json_name = "ParticipantsId"]; */
        for (let i = 0; i < message.participantsId.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.participantsId[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.admin.v1.AddAdminsRequestBody
 */
export const AddAdminsRequestBody = new AddAdminsRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddAdminsRequestWrapper$Type extends MessageType<AddAdminsRequestWrapper> {
    constructor() {
        super("yarsha.admin.v1.AddAdminsRequestWrapper", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => AddAdminsRequestBody }
        ]);
    }
    create(value?: PartialMessage<AddAdminsRequestWrapper>): AddAdminsRequestWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AddAdminsRequestWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddAdminsRequestWrapper): AddAdminsRequestWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.admin.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.admin.v1.AddAdminsRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = AddAdminsRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddAdminsRequestWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.admin.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.admin.v1.AddAdminsRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            AddAdminsRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.admin.v1.AddAdminsRequestWrapper
 */
export const AddAdminsRequestWrapper = new AddAdminsRequestWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddAdminsResponseBody$Type extends MessageType<AddAdminsResponseBody> {
    constructor() {
        super("yarsha.admin.v1.AddAdminsResponseBody", [
            { no: 1, name: "GroupId", kind: "scalar", jsonName: "GroupId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "AdminIds", kind: "scalar", jsonName: "AdminIds", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddAdminsResponseBody>): AddAdminsResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = "";
        message.adminIds = [];
        if (value !== undefined)
            reflectionMergePartial<AddAdminsResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddAdminsResponseBody): AddAdminsResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string GroupId = 1 [json_name = "GroupId"];*/ 1:
                    message.groupId = reader.string();
                    break;
                case /* repeated string AdminIds = 2 [json_name = "AdminIds"];*/ 2:
                    message.adminIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddAdminsResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string GroupId = 1 [json_name = "GroupId"]; */
        if (message.groupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupId);
        /* repeated string AdminIds = 2 [json_name = "AdminIds"]; */
        for (let i = 0; i < message.adminIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.adminIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.admin.v1.AddAdminsResponseBody
 */
export const AddAdminsResponseBody = new AddAdminsResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddAdminsResponseWrapper$Type extends MessageType<AddAdminsResponseWrapper> {
    constructor() {
        super("yarsha.admin.v1.AddAdminsResponseWrapper", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => ChatDetail }
        ]);
    }
    create(value?: PartialMessage<AddAdminsResponseWrapper>): AddAdminsResponseWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AddAdminsResponseWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddAdminsResponseWrapper): AddAdminsResponseWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.admin.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.admin.v1.ChatDetail Response = 2 [json_name = "Response"];*/ 2:
                    message.response = ChatDetail.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddAdminsResponseWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.admin.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.admin.v1.ChatDetail Response = 2 [json_name = "Response"]; */
        if (message.response)
            ChatDetail.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.admin.v1.AddAdminsResponseWrapper
 */
export const AddAdminsResponseWrapper = new AddAdminsResponseWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupChatDetailsResponse$Type extends MessageType<GetGroupChatDetailsResponse> {
    constructor() {
        super("yarsha.admin.v1.GetGroupChatDetailsResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Chat", kind: "message", jsonName: "Chat", T: () => ChatDetail }
        ]);
    }
    create(value?: PartialMessage<GetGroupChatDetailsResponse>): GetGroupChatDetailsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetGroupChatDetailsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupChatDetailsResponse): GetGroupChatDetailsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.admin.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.admin.v1.ChatDetail Chat = 2 [json_name = "Chat"];*/ 2:
                    message.chat = ChatDetail.internalBinaryRead(reader, reader.uint32(), options, message.chat);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupChatDetailsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.admin.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.admin.v1.ChatDetail Chat = 2 [json_name = "Chat"]; */
        if (message.chat)
            ChatDetail.internalBinaryWrite(message.chat, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.admin.v1.GetGroupChatDetailsResponse
 */
export const GetGroupChatDetailsResponse = new GetGroupChatDetailsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatDetail$Type extends MessageType<ChatDetail> {
    constructor() {
        super("yarsha.admin.v1.ChatDetail", [
            { no: 1, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "GroupName", kind: "scalar", jsonName: "GroupName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "GroupIcon", kind: "scalar", jsonName: "GroupIcon", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "BackgroundColor", kind: "scalar", jsonName: "BackgroundColor", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ParticipantsId", kind: "scalar", jsonName: "ParticipantsId", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ParticipantDetails", kind: "message", jsonName: "ParticipantDetails", repeat: 1 /*RepeatType.PACKED*/, T: () => ParticipantDetail },
            { no: 7, name: "Type", kind: "scalar", jsonName: "Type", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "GroupDescription", kind: "scalar", jsonName: "GroupDescription", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChatDetail>): ChatDetail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        message.groupName = "";
        message.groupIcon = "";
        message.backgroundColor = "";
        message.participantsId = [];
        message.participantDetails = [];
        message.type = "";
        message.groupDescription = "";
        if (value !== undefined)
            reflectionMergePartial<ChatDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatDetail): ChatDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ChatId = 1 [json_name = "ChatId"];*/ 1:
                    message.chatId = reader.string();
                    break;
                case /* string GroupName = 2 [json_name = "GroupName"];*/ 2:
                    message.groupName = reader.string();
                    break;
                case /* string GroupIcon = 3 [json_name = "GroupIcon"];*/ 3:
                    message.groupIcon = reader.string();
                    break;
                case /* string BackgroundColor = 4 [json_name = "BackgroundColor"];*/ 4:
                    message.backgroundColor = reader.string();
                    break;
                case /* repeated string ParticipantsId = 5 [json_name = "ParticipantsId"];*/ 5:
                    message.participantsId.push(reader.string());
                    break;
                case /* repeated yarsha.admin.v1.ParticipantDetail ParticipantDetails = 6 [json_name = "ParticipantDetails"];*/ 6:
                    message.participantDetails.push(ParticipantDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string Type = 7 [json_name = "Type"];*/ 7:
                    message.type = reader.string();
                    break;
                case /* string GroupDescription = 8 [json_name = "GroupDescription"];*/ 8:
                    message.groupDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ChatId = 1 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* string GroupName = 2 [json_name = "GroupName"]; */
        if (message.groupName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupName);
        /* string GroupIcon = 3 [json_name = "GroupIcon"]; */
        if (message.groupIcon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.groupIcon);
        /* string BackgroundColor = 4 [json_name = "BackgroundColor"]; */
        if (message.backgroundColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.backgroundColor);
        /* repeated string ParticipantsId = 5 [json_name = "ParticipantsId"]; */
        for (let i = 0; i < message.participantsId.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.participantsId[i]);
        /* repeated yarsha.admin.v1.ParticipantDetail ParticipantDetails = 6 [json_name = "ParticipantDetails"]; */
        for (let i = 0; i < message.participantDetails.length; i++)
            ParticipantDetail.internalBinaryWrite(message.participantDetails[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string Type = 7 [json_name = "Type"]; */
        if (message.type !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.type);
        /* string GroupDescription = 8 [json_name = "GroupDescription"]; */
        if (message.groupDescription !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.groupDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.admin.v1.ChatDetail
 */
export const ChatDetail = new ChatDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantDetail$Type extends MessageType<ParticipantDetail> {
    constructor() {
        super("yarsha.admin.v1.ParticipantDetail", [
            { no: 1, name: "Id", kind: "scalar", jsonName: "Id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Username", kind: "scalar", jsonName: "Username", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "FullName", kind: "scalar", jsonName: "FullName", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ProfilePicture", kind: "scalar", jsonName: "ProfilePicture", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "Address", kind: "scalar", jsonName: "Address", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "UserBio", kind: "scalar", jsonName: "UserBio", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "Role", kind: "scalar", jsonName: "Role", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "BackgroundColor", kind: "scalar", jsonName: "BackgroundColor", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "LastActive", kind: "scalar", jsonName: "LastActive", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "Status", kind: "scalar", jsonName: "Status", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ParticipantDetail>): ParticipantDetail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.username = "";
        message.fullName = "";
        message.profilePicture = "";
        message.address = "";
        message.userBio = "";
        message.role = "";
        message.backgroundColor = "";
        message.lastActive = "";
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<ParticipantDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantDetail): ParticipantDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Id = 1 [json_name = "Id"];*/ 1:
                    message.id = reader.string();
                    break;
                case /* string Username = 2 [json_name = "Username"];*/ 2:
                    message.username = reader.string();
                    break;
                case /* string FullName = 3 [json_name = "FullName"];*/ 3:
                    message.fullName = reader.string();
                    break;
                case /* string ProfilePicture = 4 [json_name = "ProfilePicture"];*/ 4:
                    message.profilePicture = reader.string();
                    break;
                case /* string Address = 5 [json_name = "Address"];*/ 5:
                    message.address = reader.string();
                    break;
                case /* string UserBio = 6 [json_name = "UserBio"];*/ 6:
                    message.userBio = reader.string();
                    break;
                case /* string Role = 7 [json_name = "Role"];*/ 7:
                    message.role = reader.string();
                    break;
                case /* string BackgroundColor = 8 [json_name = "BackgroundColor"];*/ 8:
                    message.backgroundColor = reader.string();
                    break;
                case /* string LastActive = 9 [json_name = "LastActive"];*/ 9:
                    message.lastActive = reader.string();
                    break;
                case /* string Status = 10 [json_name = "Status"];*/ 10:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Id = 1 [json_name = "Id"]; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string Username = 2 [json_name = "Username"]; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* string FullName = 3 [json_name = "FullName"]; */
        if (message.fullName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fullName);
        /* string ProfilePicture = 4 [json_name = "ProfilePicture"]; */
        if (message.profilePicture !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.profilePicture);
        /* string Address = 5 [json_name = "Address"]; */
        if (message.address !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.address);
        /* string UserBio = 6 [json_name = "UserBio"]; */
        if (message.userBio !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.userBio);
        /* string Role = 7 [json_name = "Role"]; */
        if (message.role !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.role);
        /* string BackgroundColor = 8 [json_name = "BackgroundColor"]; */
        if (message.backgroundColor !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.backgroundColor);
        /* string LastActive = 9 [json_name = "LastActive"]; */
        if (message.lastActive !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.lastActive);
        /* string Status = 10 [json_name = "Status"]; */
        if (message.status !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.admin.v1.ParticipantDetail
 */
export const ParticipantDetail = new ParticipantDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveAdminsRequestBody$Type extends MessageType<RemoveAdminsRequestBody> {
    constructor() {
        super("yarsha.admin.v1.RemoveAdminsRequestBody", [
            { no: 1, name: "GroupId", kind: "scalar", jsonName: "GroupId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "AdminIds", kind: "scalar", jsonName: "AdminIds", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveAdminsRequestBody>): RemoveAdminsRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = "";
        message.adminIds = [];
        if (value !== undefined)
            reflectionMergePartial<RemoveAdminsRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveAdminsRequestBody): RemoveAdminsRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string GroupId = 1 [json_name = "GroupId"];*/ 1:
                    message.groupId = reader.string();
                    break;
                case /* repeated string AdminIds = 2 [json_name = "AdminIds"];*/ 2:
                    message.adminIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveAdminsRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string GroupId = 1 [json_name = "GroupId"]; */
        if (message.groupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupId);
        /* repeated string AdminIds = 2 [json_name = "AdminIds"]; */
        for (let i = 0; i < message.adminIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.adminIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.admin.v1.RemoveAdminsRequestBody
 */
export const RemoveAdminsRequestBody = new RemoveAdminsRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveAdminsRequestWrapper$Type extends MessageType<RemoveAdminsRequestWrapper> {
    constructor() {
        super("yarsha.admin.v1.RemoveAdminsRequestWrapper", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => RemoveAdminsRequestBody }
        ]);
    }
    create(value?: PartialMessage<RemoveAdminsRequestWrapper>): RemoveAdminsRequestWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RemoveAdminsRequestWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveAdminsRequestWrapper): RemoveAdminsRequestWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.admin.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.admin.v1.RemoveAdminsRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = RemoveAdminsRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveAdminsRequestWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.admin.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.admin.v1.RemoveAdminsRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            RemoveAdminsRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.admin.v1.RemoveAdminsRequestWrapper
 */
export const RemoveAdminsRequestWrapper = new RemoveAdminsRequestWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveAdminsResponseWrapper$Type extends MessageType<RemoveAdminsResponseWrapper> {
    constructor() {
        super("yarsha.admin.v1.RemoveAdminsResponseWrapper", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => ChatDetail }
        ]);
    }
    create(value?: PartialMessage<RemoveAdminsResponseWrapper>): RemoveAdminsResponseWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RemoveAdminsResponseWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveAdminsResponseWrapper): RemoveAdminsResponseWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.admin.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.admin.v1.ChatDetail Response = 2 [json_name = "Response"];*/ 2:
                    message.response = ChatDetail.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveAdminsResponseWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.admin.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.admin.v1.ChatDetail Response = 2 [json_name = "Response"]; */
        if (message.response)
            ChatDetail.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.admin.v1.RemoveAdminsResponseWrapper
 */
export const RemoveAdminsResponseWrapper = new RemoveAdminsResponseWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveParticipantsRequestBody$Type extends MessageType<RemoveParticipantsRequestBody> {
    constructor() {
        super("yarsha.admin.v1.RemoveParticipantsRequestBody", [
            { no: 1, name: "GroupId", kind: "scalar", jsonName: "GroupId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ParticipantsId", kind: "scalar", jsonName: "ParticipantsId", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveParticipantsRequestBody>): RemoveParticipantsRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = "";
        message.participantsId = [];
        if (value !== undefined)
            reflectionMergePartial<RemoveParticipantsRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveParticipantsRequestBody): RemoveParticipantsRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string GroupId = 1 [json_name = "GroupId"];*/ 1:
                    message.groupId = reader.string();
                    break;
                case /* repeated string ParticipantsId = 2 [json_name = "ParticipantsId"];*/ 2:
                    message.participantsId.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveParticipantsRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string GroupId = 1 [json_name = "GroupId"]; */
        if (message.groupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupId);
        /* repeated string ParticipantsId = 2 [json_name = "ParticipantsId"]; */
        for (let i = 0; i < message.participantsId.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.participantsId[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.admin.v1.RemoveParticipantsRequestBody
 */
export const RemoveParticipantsRequestBody = new RemoveParticipantsRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveParticipantsRequestWrapper$Type extends MessageType<RemoveParticipantsRequestWrapper> {
    constructor() {
        super("yarsha.admin.v1.RemoveParticipantsRequestWrapper", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => RemoveParticipantsRequestBody }
        ]);
    }
    create(value?: PartialMessage<RemoveParticipantsRequestWrapper>): RemoveParticipantsRequestWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RemoveParticipantsRequestWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveParticipantsRequestWrapper): RemoveParticipantsRequestWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.admin.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.admin.v1.RemoveParticipantsRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = RemoveParticipantsRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveParticipantsRequestWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.admin.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.admin.v1.RemoveParticipantsRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            RemoveParticipantsRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.admin.v1.RemoveParticipantsRequestWrapper
 */
export const RemoveParticipantsRequestWrapper = new RemoveParticipantsRequestWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveParticipantsResponseWrapper$Type extends MessageType<RemoveParticipantsResponseWrapper> {
    constructor() {
        super("yarsha.admin.v1.RemoveParticipantsResponseWrapper", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => ChatDetail }
        ]);
    }
    create(value?: PartialMessage<RemoveParticipantsResponseWrapper>): RemoveParticipantsResponseWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RemoveParticipantsResponseWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveParticipantsResponseWrapper): RemoveParticipantsResponseWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.admin.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.admin.v1.ChatDetail Response = 2 [json_name = "Response"];*/ 2:
                    message.response = ChatDetail.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveParticipantsResponseWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.admin.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.admin.v1.ChatDetail Response = 2 [json_name = "Response"]; */
        if (message.response)
            ChatDetail.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.admin.v1.RemoveParticipantsResponseWrapper
 */
export const RemoveParticipantsResponseWrapper = new RemoveParticipantsResponseWrapper$Type();
/**
 * @generated ServiceType for protobuf service yarsha.admin.v1.AdminService
 */
export const AdminService = new ServiceType("yarsha.admin.v1.AdminService", [
    { name: "AddAdmins", options: {}, I: AddAdminsRequestWrapper, O: AddAdminsResponseWrapper },
    { name: "RemoveAdmins", options: {}, I: RemoveAdminsRequestWrapper, O: RemoveAdminsResponseWrapper },
    { name: "RemoveParticipants", options: {}, I: RemoveParticipantsRequestWrapper, O: RemoveParticipantsResponseWrapper }
]);
