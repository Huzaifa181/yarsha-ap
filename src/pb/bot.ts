// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "bot.proto" (package "yarsha.bot.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message yarsha.bot.v1.requestHeader
 */
export interface requestHeader {
    /**
     * @generated from protobuf field: string RequestId = 1 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string DeviceId = 2 [json_name = "DeviceId"];
     */
    deviceId: string;
    /**
     * @generated from protobuf field: string DeviceModel = 3 [json_name = "DeviceModel"];
     */
    deviceModel: string;
    /**
     * @generated from protobuf field: string Timestamp = 4 [json_name = "Timestamp"];
     */
    timestamp: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.responseHeader
 */
export interface responseHeader {
    /**
     * @generated from protobuf field: string Status = 1 [json_name = "Status"];
     */
    status: string;
    /**
     * @generated from protobuf field: string StatusCode = 2 [json_name = "StatusCode"];
     */
    statusCode: string;
    /**
     * @generated from protobuf field: string Message = 3 [json_name = "Message"];
     */
    message: string;
    /**
     * @generated from protobuf field: string TimeStamp = 4 [json_name = "TimeStamp"];
     */
    timeStamp: string;
    /**
     * @generated from protobuf field: string RequestId = 5 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string ResponseTitle = 6 [json_name = "ResponseTitle"];
     */
    responseTitle: string;
    /**
     * @generated from protobuf field: string ResponseDescription = 7 [json_name = "ResponseDescription"];
     */
    responseDescription: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.createBotRequestBody
 */
export interface createBotRequestBody {
    /**
     * @generated from protobuf field: string Name = 1 [json_name = "Name"];
     */
    name: string;
    /**
     * @generated from protobuf field: optional string ProfilePicture = 2 [json_name = "ProfilePicture"];
     */
    profilePicture?: string;
    /**
     * @generated from protobuf field: optional string BotBio = 3 [json_name = "BotBio"];
     */
    botBio?: string;
    /**
     * @generated from protobuf field: optional string WebhookUrl = 4 [json_name = "WebhookUrl"];
     */
    webhookUrl?: string;
    /**
     * @generated from protobuf field: string Username = 5 [json_name = "Username"];
     */
    username: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.CreateBotRequest
 */
export interface CreateBotRequest {
    /**
     * @generated from protobuf field: yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: yarsha.bot.v1.createBotRequestBody Body = 2 [json_name = "Body"];
     */
    body?: createBotRequestBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.CreateBot
 */
export interface CreateBot {
    /**
     * @generated from protobuf field: string Id = 1 [json_name = "Id"];
     */
    id: string;
    /**
     * @generated from protobuf field: string Name = 2 [json_name = "Name"];
     */
    name: string;
    /**
     * @generated from protobuf field: optional string ProfilePicture = 3 [json_name = "ProfilePicture"];
     */
    profilePicture?: string;
    /**
     * @generated from protobuf field: optional string BotBio = 4 [json_name = "BotBio"];
     */
    botBio?: string;
    /**
     * @generated from protobuf field: optional string WebhookUrl = 5 [json_name = "WebhookUrl"];
     */
    webhookUrl?: string;
    /**
     * @generated from protobuf field: string AccessToken = 6 [json_name = "AccessToken"];
     */
    accessToken: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.CreateBotResponse
 */
export interface CreateBotResponse {
    /**
     * @generated from protobuf field: yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: yarsha.bot.v1.CreateBot Response = 2 [json_name = "Response"];
     */
    response?: CreateBot;
}
/**
 * @generated from protobuf message yarsha.bot.v1.isBotRequestBody
 */
export interface isBotRequestBody {
    /**
     * @generated from protobuf field: string Id = 1 [json_name = "Id"];
     */
    id: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.IsBotRequest
 */
export interface IsBotRequest {
    /**
     * @generated from protobuf field: yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: yarsha.bot.v1.isBotRequestBody Body = 2 [json_name = "Body"];
     */
    body?: isBotRequestBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.IsBot
 */
export interface IsBot {
    /**
     * @generated from protobuf field: bool IsBot = 1 [json_name = "IsBot"];
     */
    isBot: boolean;
}
/**
 * @generated from protobuf message yarsha.bot.v1.IsBotResponse
 */
export interface IsBotResponse {
    /**
     * @generated from protobuf field: yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: yarsha.bot.v1.IsBot Response = 2 [json_name = "Response"];
     */
    response?: IsBot;
}
/**
 * @generated from protobuf message yarsha.bot.v1.RegisterBotCommandRequestBody
 */
export interface RegisterBotCommandRequestBody {
    /**
     * @generated from protobuf field: string BotId = 1 [json_name = "BotId"];
     */
    botId: string;
    /**
     * @generated from protobuf field: string Command = 2 [json_name = "Command"];
     */
    command: string;
    /**
     * @generated from protobuf field: string Description = 3 [json_name = "Description"];
     */
    description: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.RegisterBotCommandRequest
 */
export interface RegisterBotCommandRequest {
    /**
     * @generated from protobuf field: yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: yarsha.bot.v1.RegisterBotCommandRequestBody Body = 2 [json_name = "Body"];
     */
    body?: RegisterBotCommandRequestBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.RegisterBotCommand
 */
export interface RegisterBotCommand {
    /**
     * @generated from protobuf field: string Id = 1 [json_name = "Id"];
     */
    id: string;
    /**
     * @generated from protobuf field: string Command = 2 [json_name = "Command"];
     */
    command: string;
    /**
     * @generated from protobuf field: string Description = 3 [json_name = "Description"];
     */
    description: string;
    /**
     * @generated from protobuf field: bool IsActive = 4 [json_name = "IsActive"];
     */
    isActive: boolean;
}
/**
 * @generated from protobuf message yarsha.bot.v1.RegisterBotCommandResponse
 */
export interface RegisterBotCommandResponse {
    /**
     * @generated from protobuf field: yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: yarsha.bot.v1.RegisterBotCommand Response = 2 [json_name = "Response"];
     */
    response?: RegisterBotCommand;
}
/**
 * @generated from protobuf message yarsha.bot.v1.Bot
 */
export interface Bot {
    /**
     * @generated from protobuf field: string Id = 1 [json_name = "Id"];
     */
    id: string;
    /**
     * @generated from protobuf field: string Name = 2 [json_name = "Name"];
     */
    name: string;
    /**
     * @generated from protobuf field: optional string ProfilePicture = 3 [json_name = "ProfilePicture"];
     */
    profilePicture?: string;
    /**
     * @generated from protobuf field: optional string BotBio = 4 [json_name = "BotBio"];
     */
    botBio?: string;
    /**
     * @generated from protobuf field: string Category = 5 [json_name = "Category"];
     */
    category: string;
    /**
     * @generated from protobuf field: string Username = 6 [json_name = "Username"];
     */
    username: string;
    /**
     * @generated from protobuf field: repeated string Descriptions = 7 [json_name = "Descriptions"];
     */
    descriptions: string[];
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetBotsRequestBody
 */
export interface GetBotsRequestBody {
    /**
     * @generated from protobuf field: optional string SearchQuery = 1 [json_name = "SearchQuery"];
     */
    searchQuery?: string;
    /**
     * @generated from protobuf field: optional int32 Page = 2 [json_name = "Page"];
     */
    page?: number;
    /**
     * @generated from protobuf field: optional int32 Limit = 3 [json_name = "Limit"];
     */
    limit?: number;
    /**
     * @generated from protobuf field: optional string Category = 4 [json_name = "Category"];
     */
    category?: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetBotsRequest
 */
export interface GetBotsRequest {
    /**
     * @generated from protobuf field: yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: yarsha.bot.v1.GetBotsRequestBody Body = 2 [json_name = "Body"];
     */
    body?: GetBotsRequestBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetBotsResponseBody
 */
export interface GetBotsResponseBody {
    /**
     * @generated from protobuf field: repeated yarsha.bot.v1.Bot Bots = 1 [json_name = "Bots"];
     */
    bots: Bot[];
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetBotsResponse
 */
export interface GetBotsResponse {
    /**
     * @generated from protobuf field: yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: yarsha.bot.v1.GetBotsResponseBody Response = 2 [json_name = "Response"];
     */
    response?: GetBotsResponseBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetBotRequestBody
 */
export interface GetBotRequestBody {
    /**
     * @generated from protobuf field: string BotId = 1 [json_name = "BotId"];
     */
    botId: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetBotRequest
 */
export interface GetBotRequest {
    /**
     * @generated from protobuf field: yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: yarsha.bot.v1.GetBotRequestBody Body = 2 [json_name = "Body"];
     */
    body?: GetBotRequestBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetBotResponseBody
 */
export interface GetBotResponseBody {
    /**
     * @generated from protobuf field: yarsha.bot.v1.Bot Bot = 1 [json_name = "Bot"];
     */
    bot?: Bot;
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetBotResponse
 */
export interface GetBotResponse {
    /**
     * @generated from protobuf field: yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: yarsha.bot.v1.GetBotResponseBody Response = 2 [json_name = "Response"];
     */
    response?: GetBotResponseBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.ReceiveMessageBody
 */
export interface ReceiveMessageBody {
    /**
     * @generated from protobuf field: string SenderId = 1 [json_name = "SenderId"];
     */
    senderId: string;
    /**
     * @generated from protobuf field: string ChatId = 2 [json_name = "ChatId"];
     */
    chatId: string;
    /**
     * @generated from protobuf field: string Message = 3 [json_name = "Message"];
     */
    message: string;
    /**
     * @generated from protobuf field: string BotId = 4 [json_name = "BotId"];
     */
    botId: string;
    /**
     * @generated from protobuf field: optional string PreparedTransaction = 5 [json_name = "PreparedTransaction"];
     */
    preparedTransaction?: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.ReceiveMessageRequest
 */
export interface ReceiveMessageRequest {
    /**
     * @generated from protobuf field: yarsha.bot.v1.ReceiveMessageBody Body = 1 [json_name = "Body"];
     */
    body?: ReceiveMessageBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.ReceiveMessageResponseBody
 */
export interface ReceiveMessageResponseBody {
    /**
     * @generated from protobuf field: string Message = 1 [json_name = "Message"];
     */
    message: string;
    /**
     * @generated from protobuf field: string Error = 2 [json_name = "Error"];
     */
    error: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.ReceiveMessageResponse
 */
export interface ReceiveMessageResponse {
    /**
     * @generated from protobuf field: yarsha.bot.v1.ReceiveMessageResponseBody Response = 1 [json_name = "Response"];
     */
    response?: ReceiveMessageResponseBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.SendMessageBody
 */
export interface SendMessageBody {
    /**
     * @generated from protobuf field: string AccessToken = 1 [json_name = "AccessToken"];
     */
    accessToken: string;
    /**
     * @generated from protobuf field: string BotId = 2 [json_name = "BotId"];
     */
    botId: string;
    /**
     * @generated from protobuf field: string ChatId = 3 [json_name = "ChatId"];
     */
    chatId: string;
    /**
     * @generated from protobuf field: string Message = 4 [json_name = "Message"];
     */
    message: string;
    /**
     * @generated from protobuf field: optional string PreparedTransaction = 5 [json_name = "PreparedTransaction"];
     */
    preparedTransaction?: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.SendMessageRequest
 */
export interface SendMessageRequest {
    /**
     * @generated from protobuf field: yarsha.bot.v1.SendMessageBody Body = 1 [json_name = "Body"];
     */
    body?: SendMessageBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.SendMessageResponseBody
 */
export interface SendMessageResponseBody {
    /**
     * @generated from protobuf field: string SenderId = 1 [json_name = "SenderId"];
     */
    senderId: string;
    /**
     * @generated from protobuf field: string ChatId = 2 [json_name = "ChatId"];
     */
    chatId: string;
    /**
     * @generated from protobuf field: string Message = 3 [json_name = "Message"];
     */
    message: string;
    /**
     * @generated from protobuf field: string Error = 4 [json_name = "Error"];
     */
    error: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.SendMessageResponse
 */
export interface SendMessageResponse {
    /**
     * @generated from protobuf field: yarsha.bot.v1.SendMessageResponseBody Response = 1 [json_name = "Response"];
     */
    response?: SendMessageResponseBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.VerifyAccessTokenRequestBody
 */
export interface VerifyAccessTokenRequestBody {
    /**
     * @generated from protobuf field: string AccessToken = 1 [json_name = "AccessToken"];
     */
    accessToken: string;
    /**
     * @generated from protobuf field: string BotId = 2 [json_name = "BotId"];
     */
    botId: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.VerifyAccessTokenRequest
 */
export interface VerifyAccessTokenRequest {
    /**
     * @generated from protobuf field: yarsha.bot.v1.VerifyAccessTokenRequestBody Body = 1 [json_name = "Body"];
     */
    body?: VerifyAccessTokenRequestBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.VerifyAccessTokenResponseBody
 */
export interface VerifyAccessTokenResponseBody {
    /**
     * @generated from protobuf field: bool IsVerified = 1 [json_name = "IsVerified"];
     */
    isVerified: boolean;
}
/**
 * @generated from protobuf message yarsha.bot.v1.VerifyAccessTokenResponse
 */
export interface VerifyAccessTokenResponse {
    /**
     * @generated from protobuf field: yarsha.bot.v1.VerifyAccessTokenResponseBody Response = 1 [json_name = "Response"];
     */
    response?: VerifyAccessTokenResponseBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetBotCommandsRequestBody
 */
export interface GetBotCommandsRequestBody {
    /**
     * @generated from protobuf field: string BotId = 1 [json_name = "BotId"];
     */
    botId: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetBotCommandsRequest
 */
export interface GetBotCommandsRequest {
    /**
     * @generated from protobuf field: yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: yarsha.bot.v1.GetBotCommandsRequestBody Body = 2 [json_name = "Body"];
     */
    body?: GetBotCommandsRequestBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.BotCommand
 */
export interface BotCommand {
    /**
     * @generated from protobuf field: string Id = 1 [json_name = "Id"];
     */
    id: string;
    /**
     * @generated from protobuf field: string Command = 2 [json_name = "Command"];
     */
    command: string;
    /**
     * @generated from protobuf field: string Description = 3 [json_name = "Description"];
     */
    description: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetBotCommandsResponseBody
 */
export interface GetBotCommandsResponseBody {
    /**
     * @generated from protobuf field: repeated yarsha.bot.v1.BotCommand BotCommands = 1 [json_name = "BotCommands"];
     */
    botCommands: BotCommand[];
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetBotCommandsResponse
 */
export interface GetBotCommandsResponse {
    /**
     * @generated from protobuf field: yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: yarsha.bot.v1.GetBotCommandsResponseBody Response = 2 [json_name = "Response"];
     */
    response?: GetBotCommandsResponseBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetUserPublicKeyRequestBody
 */
export interface GetUserPublicKeyRequestBody {
    /**
     * @generated from protobuf field: string UserId = 1 [json_name = "UserId"];
     */
    userId: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetUserPublicKeyRequest
 */
export interface GetUserPublicKeyRequest {
    /**
     * @generated from protobuf field: yarsha.bot.v1.GetUserPublicKeyRequestBody Body = 2 [json_name = "Body"];
     */
    body?: GetUserPublicKeyRequestBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetUserPublicKeyResponseBody
 */
export interface GetUserPublicKeyResponseBody {
    /**
     * @generated from protobuf field: string PublicKey = 1 [json_name = "PublicKey"];
     */
    publicKey: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.GetUserPublicKeyResponse
 */
export interface GetUserPublicKeyResponse {
    /**
     * @generated from protobuf field: yarsha.bot.v1.GetUserPublicKeyResponseBody Response = 2 [json_name = "Response"];
     */
    response?: GetUserPublicKeyResponseBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.SubmitCompletedTransactionRequestBody
 */
export interface SubmitCompletedTransactionRequestBody {
    /**
     * @generated from protobuf field: string UserId = 1 [json_name = "UserId"];
     */
    userId: string;
    /**
     * @generated from protobuf field: string ChatId = 2 [json_name = "ChatId"];
     */
    chatId: string;
    /**
     * @generated from protobuf field: string TransactionHash = 3 [json_name = "TransactionHash"];
     */
    transactionHash: string;
    /**
     * @generated from protobuf field: bool IsSuccess = 4 [json_name = "IsSuccess"];
     */
    isSuccess: boolean;
    /**
     * @generated from protobuf field: string BotId = 5 [json_name = "BotId"];
     */
    botId: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.SubmitCompletedTransactionRequest
 */
export interface SubmitCompletedTransactionRequest {
    /**
     * @generated from protobuf field: yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: yarsha.bot.v1.SubmitCompletedTransactionRequestBody Body = 2 [json_name = "Body"];
     */
    body?: SubmitCompletedTransactionRequestBody;
}
/**
 * @generated from protobuf message yarsha.bot.v1.SubmitCompletedTransactionResponseBody
 */
export interface SubmitCompletedTransactionResponseBody {
    /**
     * @generated from protobuf field: string Message = 1 [json_name = "Message"];
     */
    message: string;
}
/**
 * @generated from protobuf message yarsha.bot.v1.SubmitCompletedTransactionResponse
 */
export interface SubmitCompletedTransactionResponse {
    /**
     * @generated from protobuf field: yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: yarsha.bot.v1.SubmitCompletedTransactionResponseBody Response = 2 [json_name = "Response"];
     */
    response?: SubmitCompletedTransactionResponseBody;
}
// @generated message type with reflection information, may provide speed optimized methods
class requestHeader$Type extends MessageType<requestHeader> {
    constructor() {
        super("yarsha.bot.v1.requestHeader", [
            { no: 1, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "DeviceId", kind: "scalar", jsonName: "DeviceId", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "DeviceModel", kind: "scalar", jsonName: "DeviceModel", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<requestHeader>): requestHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = "";
        message.deviceId = "";
        message.deviceModel = "";
        message.timestamp = "";
        if (value !== undefined)
            reflectionMergePartial<requestHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: requestHeader): requestHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string RequestId = 1 [json_name = "RequestId"];*/ 1:
                    message.requestId = reader.string();
                    break;
                case /* string DeviceId = 2 [json_name = "DeviceId"];*/ 2:
                    message.deviceId = reader.string();
                    break;
                case /* string DeviceModel = 3 [json_name = "DeviceModel"];*/ 3:
                    message.deviceModel = reader.string();
                    break;
                case /* string Timestamp = 4 [json_name = "Timestamp"];*/ 4:
                    message.timestamp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: requestHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string RequestId = 1 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.requestId);
        /* string DeviceId = 2 [json_name = "DeviceId"]; */
        if (message.deviceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.deviceId);
        /* string DeviceModel = 3 [json_name = "DeviceModel"]; */
        if (message.deviceModel !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deviceModel);
        /* string Timestamp = 4 [json_name = "Timestamp"]; */
        if (message.timestamp !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.requestHeader
 */
export const requestHeader = new requestHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class responseHeader$Type extends MessageType<responseHeader> {
    constructor() {
        super("yarsha.bot.v1.responseHeader", [
            { no: 1, name: "Status", kind: "scalar", jsonName: "Status", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "StatusCode", kind: "scalar", jsonName: "StatusCode", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "TimeStamp", kind: "scalar", jsonName: "TimeStamp", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ResponseTitle", kind: "scalar", jsonName: "ResponseTitle", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "ResponseDescription", kind: "scalar", jsonName: "ResponseDescription", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<responseHeader>): responseHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        message.statusCode = "";
        message.message = "";
        message.timeStamp = "";
        message.requestId = "";
        message.responseTitle = "";
        message.responseDescription = "";
        if (value !== undefined)
            reflectionMergePartial<responseHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: responseHeader): responseHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Status = 1 [json_name = "Status"];*/ 1:
                    message.status = reader.string();
                    break;
                case /* string StatusCode = 2 [json_name = "StatusCode"];*/ 2:
                    message.statusCode = reader.string();
                    break;
                case /* string Message = 3 [json_name = "Message"];*/ 3:
                    message.message = reader.string();
                    break;
                case /* string TimeStamp = 4 [json_name = "TimeStamp"];*/ 4:
                    message.timeStamp = reader.string();
                    break;
                case /* string RequestId = 5 [json_name = "RequestId"];*/ 5:
                    message.requestId = reader.string();
                    break;
                case /* string ResponseTitle = 6 [json_name = "ResponseTitle"];*/ 6:
                    message.responseTitle = reader.string();
                    break;
                case /* string ResponseDescription = 7 [json_name = "ResponseDescription"];*/ 7:
                    message.responseDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: responseHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Status = 1 [json_name = "Status"]; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        /* string StatusCode = 2 [json_name = "StatusCode"]; */
        if (message.statusCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.statusCode);
        /* string Message = 3 [json_name = "Message"]; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        /* string TimeStamp = 4 [json_name = "TimeStamp"]; */
        if (message.timeStamp !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.timeStamp);
        /* string RequestId = 5 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.requestId);
        /* string ResponseTitle = 6 [json_name = "ResponseTitle"]; */
        if (message.responseTitle !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.responseTitle);
        /* string ResponseDescription = 7 [json_name = "ResponseDescription"]; */
        if (message.responseDescription !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.responseDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.responseHeader
 */
export const responseHeader = new responseHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class createBotRequestBody$Type extends MessageType<createBotRequestBody> {
    constructor() {
        super("yarsha.bot.v1.createBotRequestBody", [
            { no: 1, name: "Name", kind: "scalar", jsonName: "Name", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ProfilePicture", kind: "scalar", jsonName: "ProfilePicture", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "BotBio", kind: "scalar", jsonName: "BotBio", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "WebhookUrl", kind: "scalar", jsonName: "WebhookUrl", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "Username", kind: "scalar", jsonName: "Username", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<createBotRequestBody>): createBotRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.username = "";
        if (value !== undefined)
            reflectionMergePartial<createBotRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: createBotRequestBody): createBotRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Name = 1 [json_name = "Name"];*/ 1:
                    message.name = reader.string();
                    break;
                case /* optional string ProfilePicture = 2 [json_name = "ProfilePicture"];*/ 2:
                    message.profilePicture = reader.string();
                    break;
                case /* optional string BotBio = 3 [json_name = "BotBio"];*/ 3:
                    message.botBio = reader.string();
                    break;
                case /* optional string WebhookUrl = 4 [json_name = "WebhookUrl"];*/ 4:
                    message.webhookUrl = reader.string();
                    break;
                case /* string Username = 5 [json_name = "Username"];*/ 5:
                    message.username = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: createBotRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Name = 1 [json_name = "Name"]; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional string ProfilePicture = 2 [json_name = "ProfilePicture"]; */
        if (message.profilePicture !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.profilePicture);
        /* optional string BotBio = 3 [json_name = "BotBio"]; */
        if (message.botBio !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.botBio);
        /* optional string WebhookUrl = 4 [json_name = "WebhookUrl"]; */
        if (message.webhookUrl !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.webhookUrl);
        /* string Username = 5 [json_name = "Username"]; */
        if (message.username !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.username);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.createBotRequestBody
 */
export const createBotRequestBody = new createBotRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateBotRequest$Type extends MessageType<CreateBotRequest> {
    constructor() {
        super("yarsha.bot.v1.CreateBotRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => createBotRequestBody }
        ]);
    }
    create(value?: PartialMessage<CreateBotRequest>): CreateBotRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateBotRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateBotRequest): CreateBotRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.bot.v1.createBotRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = createBotRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateBotRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.bot.v1.createBotRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            createBotRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.CreateBotRequest
 */
export const CreateBotRequest = new CreateBotRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateBot$Type extends MessageType<CreateBot> {
    constructor() {
        super("yarsha.bot.v1.CreateBot", [
            { no: 1, name: "Id", kind: "scalar", jsonName: "Id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Name", kind: "scalar", jsonName: "Name", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ProfilePicture", kind: "scalar", jsonName: "ProfilePicture", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "BotBio", kind: "scalar", jsonName: "BotBio", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "WebhookUrl", kind: "scalar", jsonName: "WebhookUrl", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "AccessToken", kind: "scalar", jsonName: "AccessToken", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateBot>): CreateBot {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.accessToken = "";
        if (value !== undefined)
            reflectionMergePartial<CreateBot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateBot): CreateBot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Id = 1 [json_name = "Id"];*/ 1:
                    message.id = reader.string();
                    break;
                case /* string Name = 2 [json_name = "Name"];*/ 2:
                    message.name = reader.string();
                    break;
                case /* optional string ProfilePicture = 3 [json_name = "ProfilePicture"];*/ 3:
                    message.profilePicture = reader.string();
                    break;
                case /* optional string BotBio = 4 [json_name = "BotBio"];*/ 4:
                    message.botBio = reader.string();
                    break;
                case /* optional string WebhookUrl = 5 [json_name = "WebhookUrl"];*/ 5:
                    message.webhookUrl = reader.string();
                    break;
                case /* string AccessToken = 6 [json_name = "AccessToken"];*/ 6:
                    message.accessToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateBot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Id = 1 [json_name = "Id"]; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string Name = 2 [json_name = "Name"]; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional string ProfilePicture = 3 [json_name = "ProfilePicture"]; */
        if (message.profilePicture !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.profilePicture);
        /* optional string BotBio = 4 [json_name = "BotBio"]; */
        if (message.botBio !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.botBio);
        /* optional string WebhookUrl = 5 [json_name = "WebhookUrl"]; */
        if (message.webhookUrl !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.webhookUrl);
        /* string AccessToken = 6 [json_name = "AccessToken"]; */
        if (message.accessToken !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.accessToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.CreateBot
 */
export const CreateBot = new CreateBot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateBotResponse$Type extends MessageType<CreateBotResponse> {
    constructor() {
        super("yarsha.bot.v1.CreateBotResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => CreateBot }
        ]);
    }
    create(value?: PartialMessage<CreateBotResponse>): CreateBotResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateBotResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateBotResponse): CreateBotResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.bot.v1.CreateBot Response = 2 [json_name = "Response"];*/ 2:
                    message.response = CreateBot.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateBotResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.bot.v1.CreateBot Response = 2 [json_name = "Response"]; */
        if (message.response)
            CreateBot.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.CreateBotResponse
 */
export const CreateBotResponse = new CreateBotResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class isBotRequestBody$Type extends MessageType<isBotRequestBody> {
    constructor() {
        super("yarsha.bot.v1.isBotRequestBody", [
            { no: 1, name: "Id", kind: "scalar", jsonName: "Id", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<isBotRequestBody>): isBotRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<isBotRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: isBotRequestBody): isBotRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Id = 1 [json_name = "Id"];*/ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: isBotRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Id = 1 [json_name = "Id"]; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.isBotRequestBody
 */
export const isBotRequestBody = new isBotRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsBotRequest$Type extends MessageType<IsBotRequest> {
    constructor() {
        super("yarsha.bot.v1.IsBotRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => isBotRequestBody }
        ]);
    }
    create(value?: PartialMessage<IsBotRequest>): IsBotRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IsBotRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsBotRequest): IsBotRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.bot.v1.isBotRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = isBotRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsBotRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.bot.v1.isBotRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            isBotRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.IsBotRequest
 */
export const IsBotRequest = new IsBotRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsBot$Type extends MessageType<IsBot> {
    constructor() {
        super("yarsha.bot.v1.IsBot", [
            { no: 1, name: "IsBot", kind: "scalar", jsonName: "IsBot", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<IsBot>): IsBot {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isBot = false;
        if (value !== undefined)
            reflectionMergePartial<IsBot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsBot): IsBot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool IsBot = 1 [json_name = "IsBot"];*/ 1:
                    message.isBot = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsBot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool IsBot = 1 [json_name = "IsBot"]; */
        if (message.isBot !== false)
            writer.tag(1, WireType.Varint).bool(message.isBot);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.IsBot
 */
export const IsBot = new IsBot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IsBotResponse$Type extends MessageType<IsBotResponse> {
    constructor() {
        super("yarsha.bot.v1.IsBotResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => IsBot }
        ]);
    }
    create(value?: PartialMessage<IsBotResponse>): IsBotResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<IsBotResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IsBotResponse): IsBotResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.bot.v1.IsBot Response = 2 [json_name = "Response"];*/ 2:
                    message.response = IsBot.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IsBotResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.bot.v1.IsBot Response = 2 [json_name = "Response"]; */
        if (message.response)
            IsBot.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.IsBotResponse
 */
export const IsBotResponse = new IsBotResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterBotCommandRequestBody$Type extends MessageType<RegisterBotCommandRequestBody> {
    constructor() {
        super("yarsha.bot.v1.RegisterBotCommandRequestBody", [
            { no: 1, name: "BotId", kind: "scalar", jsonName: "BotId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Command", kind: "scalar", jsonName: "Command", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Description", kind: "scalar", jsonName: "Description", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterBotCommandRequestBody>): RegisterBotCommandRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.botId = "";
        message.command = "";
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<RegisterBotCommandRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterBotCommandRequestBody): RegisterBotCommandRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string BotId = 1 [json_name = "BotId"];*/ 1:
                    message.botId = reader.string();
                    break;
                case /* string Command = 2 [json_name = "Command"];*/ 2:
                    message.command = reader.string();
                    break;
                case /* string Description = 3 [json_name = "Description"];*/ 3:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterBotCommandRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string BotId = 1 [json_name = "BotId"]; */
        if (message.botId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.botId);
        /* string Command = 2 [json_name = "Command"]; */
        if (message.command !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.command);
        /* string Description = 3 [json_name = "Description"]; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.RegisterBotCommandRequestBody
 */
export const RegisterBotCommandRequestBody = new RegisterBotCommandRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterBotCommandRequest$Type extends MessageType<RegisterBotCommandRequest> {
    constructor() {
        super("yarsha.bot.v1.RegisterBotCommandRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => RegisterBotCommandRequestBody }
        ]);
    }
    create(value?: PartialMessage<RegisterBotCommandRequest>): RegisterBotCommandRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RegisterBotCommandRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterBotCommandRequest): RegisterBotCommandRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.bot.v1.RegisterBotCommandRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = RegisterBotCommandRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterBotCommandRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.bot.v1.RegisterBotCommandRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            RegisterBotCommandRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.RegisterBotCommandRequest
 */
export const RegisterBotCommandRequest = new RegisterBotCommandRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterBotCommand$Type extends MessageType<RegisterBotCommand> {
    constructor() {
        super("yarsha.bot.v1.RegisterBotCommand", [
            { no: 1, name: "Id", kind: "scalar", jsonName: "Id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Command", kind: "scalar", jsonName: "Command", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Description", kind: "scalar", jsonName: "Description", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "IsActive", kind: "scalar", jsonName: "IsActive", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterBotCommand>): RegisterBotCommand {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.command = "";
        message.description = "";
        message.isActive = false;
        if (value !== undefined)
            reflectionMergePartial<RegisterBotCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterBotCommand): RegisterBotCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Id = 1 [json_name = "Id"];*/ 1:
                    message.id = reader.string();
                    break;
                case /* string Command = 2 [json_name = "Command"];*/ 2:
                    message.command = reader.string();
                    break;
                case /* string Description = 3 [json_name = "Description"];*/ 3:
                    message.description = reader.string();
                    break;
                case /* bool IsActive = 4 [json_name = "IsActive"];*/ 4:
                    message.isActive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterBotCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Id = 1 [json_name = "Id"]; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string Command = 2 [json_name = "Command"]; */
        if (message.command !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.command);
        /* string Description = 3 [json_name = "Description"]; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        /* bool IsActive = 4 [json_name = "IsActive"]; */
        if (message.isActive !== false)
            writer.tag(4, WireType.Varint).bool(message.isActive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.RegisterBotCommand
 */
export const RegisterBotCommand = new RegisterBotCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterBotCommandResponse$Type extends MessageType<RegisterBotCommandResponse> {
    constructor() {
        super("yarsha.bot.v1.RegisterBotCommandResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => RegisterBotCommand }
        ]);
    }
    create(value?: PartialMessage<RegisterBotCommandResponse>): RegisterBotCommandResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RegisterBotCommandResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterBotCommandResponse): RegisterBotCommandResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.bot.v1.RegisterBotCommand Response = 2 [json_name = "Response"];*/ 2:
                    message.response = RegisterBotCommand.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterBotCommandResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.bot.v1.RegisterBotCommand Response = 2 [json_name = "Response"]; */
        if (message.response)
            RegisterBotCommand.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.RegisterBotCommandResponse
 */
export const RegisterBotCommandResponse = new RegisterBotCommandResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Bot$Type extends MessageType<Bot> {
    constructor() {
        super("yarsha.bot.v1.Bot", [
            { no: 1, name: "Id", kind: "scalar", jsonName: "Id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Name", kind: "scalar", jsonName: "Name", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ProfilePicture", kind: "scalar", jsonName: "ProfilePicture", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "BotBio", kind: "scalar", jsonName: "BotBio", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "Category", kind: "scalar", jsonName: "Category", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "Username", kind: "scalar", jsonName: "Username", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "Descriptions", kind: "scalar", jsonName: "Descriptions", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Bot>): Bot {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.category = "";
        message.username = "";
        message.descriptions = [];
        if (value !== undefined)
            reflectionMergePartial<Bot>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Bot): Bot {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Id = 1 [json_name = "Id"];*/ 1:
                    message.id = reader.string();
                    break;
                case /* string Name = 2 [json_name = "Name"];*/ 2:
                    message.name = reader.string();
                    break;
                case /* optional string ProfilePicture = 3 [json_name = "ProfilePicture"];*/ 3:
                    message.profilePicture = reader.string();
                    break;
                case /* optional string BotBio = 4 [json_name = "BotBio"];*/ 4:
                    message.botBio = reader.string();
                    break;
                case /* string Category = 5 [json_name = "Category"];*/ 5:
                    message.category = reader.string();
                    break;
                case /* string Username = 6 [json_name = "Username"];*/ 6:
                    message.username = reader.string();
                    break;
                case /* repeated string Descriptions = 7 [json_name = "Descriptions"];*/ 7:
                    message.descriptions.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Bot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Id = 1 [json_name = "Id"]; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string Name = 2 [json_name = "Name"]; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* optional string ProfilePicture = 3 [json_name = "ProfilePicture"]; */
        if (message.profilePicture !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.profilePicture);
        /* optional string BotBio = 4 [json_name = "BotBio"]; */
        if (message.botBio !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.botBio);
        /* string Category = 5 [json_name = "Category"]; */
        if (message.category !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.category);
        /* string Username = 6 [json_name = "Username"]; */
        if (message.username !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.username);
        /* repeated string Descriptions = 7 [json_name = "Descriptions"]; */
        for (let i = 0; i < message.descriptions.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.descriptions[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.Bot
 */
export const Bot = new Bot$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBotsRequestBody$Type extends MessageType<GetBotsRequestBody> {
    constructor() {
        super("yarsha.bot.v1.GetBotsRequestBody", [
            { no: 1, name: "SearchQuery", kind: "scalar", jsonName: "SearchQuery", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Page", kind: "scalar", jsonName: "Page", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "Limit", kind: "scalar", jsonName: "Limit", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "Category", kind: "scalar", jsonName: "Category", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetBotsRequestBody>): GetBotsRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBotsRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBotsRequestBody): GetBotsRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string SearchQuery = 1 [json_name = "SearchQuery"];*/ 1:
                    message.searchQuery = reader.string();
                    break;
                case /* optional int32 Page = 2 [json_name = "Page"];*/ 2:
                    message.page = reader.int32();
                    break;
                case /* optional int32 Limit = 3 [json_name = "Limit"];*/ 3:
                    message.limit = reader.int32();
                    break;
                case /* optional string Category = 4 [json_name = "Category"];*/ 4:
                    message.category = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBotsRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string SearchQuery = 1 [json_name = "SearchQuery"]; */
        if (message.searchQuery !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.searchQuery);
        /* optional int32 Page = 2 [json_name = "Page"]; */
        if (message.page !== undefined)
            writer.tag(2, WireType.Varint).int32(message.page);
        /* optional int32 Limit = 3 [json_name = "Limit"]; */
        if (message.limit !== undefined)
            writer.tag(3, WireType.Varint).int32(message.limit);
        /* optional string Category = 4 [json_name = "Category"]; */
        if (message.category !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.category);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetBotsRequestBody
 */
export const GetBotsRequestBody = new GetBotsRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBotsRequest$Type extends MessageType<GetBotsRequest> {
    constructor() {
        super("yarsha.bot.v1.GetBotsRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => GetBotsRequestBody }
        ]);
    }
    create(value?: PartialMessage<GetBotsRequest>): GetBotsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBotsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBotsRequest): GetBotsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.bot.v1.GetBotsRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = GetBotsRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBotsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.bot.v1.GetBotsRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            GetBotsRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetBotsRequest
 */
export const GetBotsRequest = new GetBotsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBotsResponseBody$Type extends MessageType<GetBotsResponseBody> {
    constructor() {
        super("yarsha.bot.v1.GetBotsResponseBody", [
            { no: 1, name: "Bots", kind: "message", jsonName: "Bots", repeat: 1 /*RepeatType.PACKED*/, T: () => Bot }
        ]);
    }
    create(value?: PartialMessage<GetBotsResponseBody>): GetBotsResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.bots = [];
        if (value !== undefined)
            reflectionMergePartial<GetBotsResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBotsResponseBody): GetBotsResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated yarsha.bot.v1.Bot Bots = 1 [json_name = "Bots"];*/ 1:
                    message.bots.push(Bot.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBotsResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated yarsha.bot.v1.Bot Bots = 1 [json_name = "Bots"]; */
        for (let i = 0; i < message.bots.length; i++)
            Bot.internalBinaryWrite(message.bots[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetBotsResponseBody
 */
export const GetBotsResponseBody = new GetBotsResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBotsResponse$Type extends MessageType<GetBotsResponse> {
    constructor() {
        super("yarsha.bot.v1.GetBotsResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => GetBotsResponseBody }
        ]);
    }
    create(value?: PartialMessage<GetBotsResponse>): GetBotsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBotsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBotsResponse): GetBotsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.bot.v1.GetBotsResponseBody Response = 2 [json_name = "Response"];*/ 2:
                    message.response = GetBotsResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBotsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.bot.v1.GetBotsResponseBody Response = 2 [json_name = "Response"]; */
        if (message.response)
            GetBotsResponseBody.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetBotsResponse
 */
export const GetBotsResponse = new GetBotsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBotRequestBody$Type extends MessageType<GetBotRequestBody> {
    constructor() {
        super("yarsha.bot.v1.GetBotRequestBody", [
            { no: 1, name: "BotId", kind: "scalar", jsonName: "BotId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetBotRequestBody>): GetBotRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.botId = "";
        if (value !== undefined)
            reflectionMergePartial<GetBotRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBotRequestBody): GetBotRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string BotId = 1 [json_name = "BotId"];*/ 1:
                    message.botId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBotRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string BotId = 1 [json_name = "BotId"]; */
        if (message.botId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.botId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetBotRequestBody
 */
export const GetBotRequestBody = new GetBotRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBotRequest$Type extends MessageType<GetBotRequest> {
    constructor() {
        super("yarsha.bot.v1.GetBotRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => GetBotRequestBody }
        ]);
    }
    create(value?: PartialMessage<GetBotRequest>): GetBotRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBotRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBotRequest): GetBotRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.bot.v1.GetBotRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = GetBotRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBotRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.bot.v1.GetBotRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            GetBotRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetBotRequest
 */
export const GetBotRequest = new GetBotRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBotResponseBody$Type extends MessageType<GetBotResponseBody> {
    constructor() {
        super("yarsha.bot.v1.GetBotResponseBody", [
            { no: 1, name: "Bot", kind: "message", jsonName: "Bot", T: () => Bot }
        ]);
    }
    create(value?: PartialMessage<GetBotResponseBody>): GetBotResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBotResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBotResponseBody): GetBotResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.Bot Bot = 1 [json_name = "Bot"];*/ 1:
                    message.bot = Bot.internalBinaryRead(reader, reader.uint32(), options, message.bot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBotResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.Bot Bot = 1 [json_name = "Bot"]; */
        if (message.bot)
            Bot.internalBinaryWrite(message.bot, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetBotResponseBody
 */
export const GetBotResponseBody = new GetBotResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBotResponse$Type extends MessageType<GetBotResponse> {
    constructor() {
        super("yarsha.bot.v1.GetBotResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => GetBotResponseBody }
        ]);
    }
    create(value?: PartialMessage<GetBotResponse>): GetBotResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBotResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBotResponse): GetBotResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.bot.v1.GetBotResponseBody Response = 2 [json_name = "Response"];*/ 2:
                    message.response = GetBotResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBotResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.bot.v1.GetBotResponseBody Response = 2 [json_name = "Response"]; */
        if (message.response)
            GetBotResponseBody.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetBotResponse
 */
export const GetBotResponse = new GetBotResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceiveMessageBody$Type extends MessageType<ReceiveMessageBody> {
    constructor() {
        super("yarsha.bot.v1.ReceiveMessageBody", [
            { no: 1, name: "SenderId", kind: "scalar", jsonName: "SenderId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "BotId", kind: "scalar", jsonName: "BotId", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "PreparedTransaction", kind: "scalar", jsonName: "PreparedTransaction", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReceiveMessageBody>): ReceiveMessageBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.senderId = "";
        message.chatId = "";
        message.message = "";
        message.botId = "";
        if (value !== undefined)
            reflectionMergePartial<ReceiveMessageBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReceiveMessageBody): ReceiveMessageBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string SenderId = 1 [json_name = "SenderId"];*/ 1:
                    message.senderId = reader.string();
                    break;
                case /* string ChatId = 2 [json_name = "ChatId"];*/ 2:
                    message.chatId = reader.string();
                    break;
                case /* string Message = 3 [json_name = "Message"];*/ 3:
                    message.message = reader.string();
                    break;
                case /* string BotId = 4 [json_name = "BotId"];*/ 4:
                    message.botId = reader.string();
                    break;
                case /* optional string PreparedTransaction = 5 [json_name = "PreparedTransaction"];*/ 5:
                    message.preparedTransaction = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReceiveMessageBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string SenderId = 1 [json_name = "SenderId"]; */
        if (message.senderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.senderId);
        /* string ChatId = 2 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chatId);
        /* string Message = 3 [json_name = "Message"]; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        /* string BotId = 4 [json_name = "BotId"]; */
        if (message.botId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.botId);
        /* optional string PreparedTransaction = 5 [json_name = "PreparedTransaction"]; */
        if (message.preparedTransaction !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.preparedTransaction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.ReceiveMessageBody
 */
export const ReceiveMessageBody = new ReceiveMessageBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceiveMessageRequest$Type extends MessageType<ReceiveMessageRequest> {
    constructor() {
        super("yarsha.bot.v1.ReceiveMessageRequest", [
            { no: 1, name: "Body", kind: "message", jsonName: "Body", T: () => ReceiveMessageBody }
        ]);
    }
    create(value?: PartialMessage<ReceiveMessageRequest>): ReceiveMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReceiveMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReceiveMessageRequest): ReceiveMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.ReceiveMessageBody Body = 1 [json_name = "Body"];*/ 1:
                    message.body = ReceiveMessageBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReceiveMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.ReceiveMessageBody Body = 1 [json_name = "Body"]; */
        if (message.body)
            ReceiveMessageBody.internalBinaryWrite(message.body, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.ReceiveMessageRequest
 */
export const ReceiveMessageRequest = new ReceiveMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceiveMessageResponseBody$Type extends MessageType<ReceiveMessageResponseBody> {
    constructor() {
        super("yarsha.bot.v1.ReceiveMessageResponseBody", [
            { no: 1, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Error", kind: "scalar", jsonName: "Error", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReceiveMessageResponseBody>): ReceiveMessageResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        message.error = "";
        if (value !== undefined)
            reflectionMergePartial<ReceiveMessageResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReceiveMessageResponseBody): ReceiveMessageResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Message = 1 [json_name = "Message"];*/ 1:
                    message.message = reader.string();
                    break;
                case /* string Error = 2 [json_name = "Error"];*/ 2:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReceiveMessageResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Message = 1 [json_name = "Message"]; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        /* string Error = 2 [json_name = "Error"]; */
        if (message.error !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.ReceiveMessageResponseBody
 */
export const ReceiveMessageResponseBody = new ReceiveMessageResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceiveMessageResponse$Type extends MessageType<ReceiveMessageResponse> {
    constructor() {
        super("yarsha.bot.v1.ReceiveMessageResponse", [
            { no: 1, name: "Response", kind: "message", jsonName: "Response", T: () => ReceiveMessageResponseBody }
        ]);
    }
    create(value?: PartialMessage<ReceiveMessageResponse>): ReceiveMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReceiveMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReceiveMessageResponse): ReceiveMessageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.ReceiveMessageResponseBody Response = 1 [json_name = "Response"];*/ 1:
                    message.response = ReceiveMessageResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReceiveMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.ReceiveMessageResponseBody Response = 1 [json_name = "Response"]; */
        if (message.response)
            ReceiveMessageResponseBody.internalBinaryWrite(message.response, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.ReceiveMessageResponse
 */
export const ReceiveMessageResponse = new ReceiveMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessageBody$Type extends MessageType<SendMessageBody> {
    constructor() {
        super("yarsha.bot.v1.SendMessageBody", [
            { no: 1, name: "AccessToken", kind: "scalar", jsonName: "AccessToken", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "BotId", kind: "scalar", jsonName: "BotId", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "PreparedTransaction", kind: "scalar", jsonName: "PreparedTransaction", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendMessageBody>): SendMessageBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accessToken = "";
        message.botId = "";
        message.chatId = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<SendMessageBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessageBody): SendMessageBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string AccessToken = 1 [json_name = "AccessToken"];*/ 1:
                    message.accessToken = reader.string();
                    break;
                case /* string BotId = 2 [json_name = "BotId"];*/ 2:
                    message.botId = reader.string();
                    break;
                case /* string ChatId = 3 [json_name = "ChatId"];*/ 3:
                    message.chatId = reader.string();
                    break;
                case /* string Message = 4 [json_name = "Message"];*/ 4:
                    message.message = reader.string();
                    break;
                case /* optional string PreparedTransaction = 5 [json_name = "PreparedTransaction"];*/ 5:
                    message.preparedTransaction = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessageBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string AccessToken = 1 [json_name = "AccessToken"]; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        /* string BotId = 2 [json_name = "BotId"]; */
        if (message.botId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.botId);
        /* string ChatId = 3 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.chatId);
        /* string Message = 4 [json_name = "Message"]; */
        if (message.message !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.message);
        /* optional string PreparedTransaction = 5 [json_name = "PreparedTransaction"]; */
        if (message.preparedTransaction !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.preparedTransaction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.SendMessageBody
 */
export const SendMessageBody = new SendMessageBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessageRequest$Type extends MessageType<SendMessageRequest> {
    constructor() {
        super("yarsha.bot.v1.SendMessageRequest", [
            { no: 1, name: "Body", kind: "message", jsonName: "Body", T: () => SendMessageBody }
        ]);
    }
    create(value?: PartialMessage<SendMessageRequest>): SendMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessageRequest): SendMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.SendMessageBody Body = 1 [json_name = "Body"];*/ 1:
                    message.body = SendMessageBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.SendMessageBody Body = 1 [json_name = "Body"]; */
        if (message.body)
            SendMessageBody.internalBinaryWrite(message.body, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.SendMessageRequest
 */
export const SendMessageRequest = new SendMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessageResponseBody$Type extends MessageType<SendMessageResponseBody> {
    constructor() {
        super("yarsha.bot.v1.SendMessageResponseBody", [
            { no: 1, name: "SenderId", kind: "scalar", jsonName: "SenderId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Error", kind: "scalar", jsonName: "Error", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendMessageResponseBody>): SendMessageResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.senderId = "";
        message.chatId = "";
        message.message = "";
        message.error = "";
        if (value !== undefined)
            reflectionMergePartial<SendMessageResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessageResponseBody): SendMessageResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string SenderId = 1 [json_name = "SenderId"];*/ 1:
                    message.senderId = reader.string();
                    break;
                case /* string ChatId = 2 [json_name = "ChatId"];*/ 2:
                    message.chatId = reader.string();
                    break;
                case /* string Message = 3 [json_name = "Message"];*/ 3:
                    message.message = reader.string();
                    break;
                case /* string Error = 4 [json_name = "Error"];*/ 4:
                    message.error = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessageResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string SenderId = 1 [json_name = "SenderId"]; */
        if (message.senderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.senderId);
        /* string ChatId = 2 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chatId);
        /* string Message = 3 [json_name = "Message"]; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        /* string Error = 4 [json_name = "Error"]; */
        if (message.error !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.error);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.SendMessageResponseBody
 */
export const SendMessageResponseBody = new SendMessageResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessageResponse$Type extends MessageType<SendMessageResponse> {
    constructor() {
        super("yarsha.bot.v1.SendMessageResponse", [
            { no: 1, name: "Response", kind: "message", jsonName: "Response", T: () => SendMessageResponseBody }
        ]);
    }
    create(value?: PartialMessage<SendMessageResponse>): SendMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessageResponse): SendMessageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.SendMessageResponseBody Response = 1 [json_name = "Response"];*/ 1:
                    message.response = SendMessageResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.SendMessageResponseBody Response = 1 [json_name = "Response"]; */
        if (message.response)
            SendMessageResponseBody.internalBinaryWrite(message.response, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.SendMessageResponse
 */
export const SendMessageResponse = new SendMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyAccessTokenRequestBody$Type extends MessageType<VerifyAccessTokenRequestBody> {
    constructor() {
        super("yarsha.bot.v1.VerifyAccessTokenRequestBody", [
            { no: 1, name: "AccessToken", kind: "scalar", jsonName: "AccessToken", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "BotId", kind: "scalar", jsonName: "BotId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VerifyAccessTokenRequestBody>): VerifyAccessTokenRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accessToken = "";
        message.botId = "";
        if (value !== undefined)
            reflectionMergePartial<VerifyAccessTokenRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyAccessTokenRequestBody): VerifyAccessTokenRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string AccessToken = 1 [json_name = "AccessToken"];*/ 1:
                    message.accessToken = reader.string();
                    break;
                case /* string BotId = 2 [json_name = "BotId"];*/ 2:
                    message.botId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyAccessTokenRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string AccessToken = 1 [json_name = "AccessToken"]; */
        if (message.accessToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accessToken);
        /* string BotId = 2 [json_name = "BotId"]; */
        if (message.botId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.botId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.VerifyAccessTokenRequestBody
 */
export const VerifyAccessTokenRequestBody = new VerifyAccessTokenRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyAccessTokenRequest$Type extends MessageType<VerifyAccessTokenRequest> {
    constructor() {
        super("yarsha.bot.v1.VerifyAccessTokenRequest", [
            { no: 1, name: "Body", kind: "message", jsonName: "Body", T: () => VerifyAccessTokenRequestBody }
        ]);
    }
    create(value?: PartialMessage<VerifyAccessTokenRequest>): VerifyAccessTokenRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<VerifyAccessTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyAccessTokenRequest): VerifyAccessTokenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.VerifyAccessTokenRequestBody Body = 1 [json_name = "Body"];*/ 1:
                    message.body = VerifyAccessTokenRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyAccessTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.VerifyAccessTokenRequestBody Body = 1 [json_name = "Body"]; */
        if (message.body)
            VerifyAccessTokenRequestBody.internalBinaryWrite(message.body, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.VerifyAccessTokenRequest
 */
export const VerifyAccessTokenRequest = new VerifyAccessTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyAccessTokenResponseBody$Type extends MessageType<VerifyAccessTokenResponseBody> {
    constructor() {
        super("yarsha.bot.v1.VerifyAccessTokenResponseBody", [
            { no: 1, name: "IsVerified", kind: "scalar", jsonName: "IsVerified", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<VerifyAccessTokenResponseBody>): VerifyAccessTokenResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.isVerified = false;
        if (value !== undefined)
            reflectionMergePartial<VerifyAccessTokenResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyAccessTokenResponseBody): VerifyAccessTokenResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool IsVerified = 1 [json_name = "IsVerified"];*/ 1:
                    message.isVerified = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyAccessTokenResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool IsVerified = 1 [json_name = "IsVerified"]; */
        if (message.isVerified !== false)
            writer.tag(1, WireType.Varint).bool(message.isVerified);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.VerifyAccessTokenResponseBody
 */
export const VerifyAccessTokenResponseBody = new VerifyAccessTokenResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyAccessTokenResponse$Type extends MessageType<VerifyAccessTokenResponse> {
    constructor() {
        super("yarsha.bot.v1.VerifyAccessTokenResponse", [
            { no: 1, name: "Response", kind: "message", jsonName: "Response", T: () => VerifyAccessTokenResponseBody }
        ]);
    }
    create(value?: PartialMessage<VerifyAccessTokenResponse>): VerifyAccessTokenResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<VerifyAccessTokenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyAccessTokenResponse): VerifyAccessTokenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.VerifyAccessTokenResponseBody Response = 1 [json_name = "Response"];*/ 1:
                    message.response = VerifyAccessTokenResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyAccessTokenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.VerifyAccessTokenResponseBody Response = 1 [json_name = "Response"]; */
        if (message.response)
            VerifyAccessTokenResponseBody.internalBinaryWrite(message.response, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.VerifyAccessTokenResponse
 */
export const VerifyAccessTokenResponse = new VerifyAccessTokenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBotCommandsRequestBody$Type extends MessageType<GetBotCommandsRequestBody> {
    constructor() {
        super("yarsha.bot.v1.GetBotCommandsRequestBody", [
            { no: 1, name: "BotId", kind: "scalar", jsonName: "BotId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetBotCommandsRequestBody>): GetBotCommandsRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.botId = "";
        if (value !== undefined)
            reflectionMergePartial<GetBotCommandsRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBotCommandsRequestBody): GetBotCommandsRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string BotId = 1 [json_name = "BotId"];*/ 1:
                    message.botId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBotCommandsRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string BotId = 1 [json_name = "BotId"]; */
        if (message.botId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.botId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetBotCommandsRequestBody
 */
export const GetBotCommandsRequestBody = new GetBotCommandsRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBotCommandsRequest$Type extends MessageType<GetBotCommandsRequest> {
    constructor() {
        super("yarsha.bot.v1.GetBotCommandsRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => GetBotCommandsRequestBody }
        ]);
    }
    create(value?: PartialMessage<GetBotCommandsRequest>): GetBotCommandsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBotCommandsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBotCommandsRequest): GetBotCommandsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.bot.v1.GetBotCommandsRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = GetBotCommandsRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBotCommandsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.bot.v1.GetBotCommandsRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            GetBotCommandsRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetBotCommandsRequest
 */
export const GetBotCommandsRequest = new GetBotCommandsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BotCommand$Type extends MessageType<BotCommand> {
    constructor() {
        super("yarsha.bot.v1.BotCommand", [
            { no: 1, name: "Id", kind: "scalar", jsonName: "Id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Command", kind: "scalar", jsonName: "Command", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Description", kind: "scalar", jsonName: "Description", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<BotCommand>): BotCommand {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.command = "";
        message.description = "";
        if (value !== undefined)
            reflectionMergePartial<BotCommand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BotCommand): BotCommand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Id = 1 [json_name = "Id"];*/ 1:
                    message.id = reader.string();
                    break;
                case /* string Command = 2 [json_name = "Command"];*/ 2:
                    message.command = reader.string();
                    break;
                case /* string Description = 3 [json_name = "Description"];*/ 3:
                    message.description = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BotCommand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Id = 1 [json_name = "Id"]; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string Command = 2 [json_name = "Command"]; */
        if (message.command !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.command);
        /* string Description = 3 [json_name = "Description"]; */
        if (message.description !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.description);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.BotCommand
 */
export const BotCommand = new BotCommand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBotCommandsResponseBody$Type extends MessageType<GetBotCommandsResponseBody> {
    constructor() {
        super("yarsha.bot.v1.GetBotCommandsResponseBody", [
            { no: 1, name: "BotCommands", kind: "message", jsonName: "BotCommands", repeat: 1 /*RepeatType.PACKED*/, T: () => BotCommand }
        ]);
    }
    create(value?: PartialMessage<GetBotCommandsResponseBody>): GetBotCommandsResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.botCommands = [];
        if (value !== undefined)
            reflectionMergePartial<GetBotCommandsResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBotCommandsResponseBody): GetBotCommandsResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated yarsha.bot.v1.BotCommand BotCommands = 1 [json_name = "BotCommands"];*/ 1:
                    message.botCommands.push(BotCommand.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBotCommandsResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated yarsha.bot.v1.BotCommand BotCommands = 1 [json_name = "BotCommands"]; */
        for (let i = 0; i < message.botCommands.length; i++)
            BotCommand.internalBinaryWrite(message.botCommands[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetBotCommandsResponseBody
 */
export const GetBotCommandsResponseBody = new GetBotCommandsResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetBotCommandsResponse$Type extends MessageType<GetBotCommandsResponse> {
    constructor() {
        super("yarsha.bot.v1.GetBotCommandsResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => GetBotCommandsResponseBody }
        ]);
    }
    create(value?: PartialMessage<GetBotCommandsResponse>): GetBotCommandsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetBotCommandsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetBotCommandsResponse): GetBotCommandsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.bot.v1.GetBotCommandsResponseBody Response = 2 [json_name = "Response"];*/ 2:
                    message.response = GetBotCommandsResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetBotCommandsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.bot.v1.GetBotCommandsResponseBody Response = 2 [json_name = "Response"]; */
        if (message.response)
            GetBotCommandsResponseBody.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetBotCommandsResponse
 */
export const GetBotCommandsResponse = new GetBotCommandsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserPublicKeyRequestBody$Type extends MessageType<GetUserPublicKeyRequestBody> {
    constructor() {
        super("yarsha.bot.v1.GetUserPublicKeyRequestBody", [
            { no: 1, name: "UserId", kind: "scalar", jsonName: "UserId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserPublicKeyRequestBody>): GetUserPublicKeyRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<GetUserPublicKeyRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserPublicKeyRequestBody): GetUserPublicKeyRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string UserId = 1 [json_name = "UserId"];*/ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserPublicKeyRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string UserId = 1 [json_name = "UserId"]; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetUserPublicKeyRequestBody
 */
export const GetUserPublicKeyRequestBody = new GetUserPublicKeyRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserPublicKeyRequest$Type extends MessageType<GetUserPublicKeyRequest> {
    constructor() {
        super("yarsha.bot.v1.GetUserPublicKeyRequest", [
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => GetUserPublicKeyRequestBody }
        ]);
    }
    create(value?: PartialMessage<GetUserPublicKeyRequest>): GetUserPublicKeyRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetUserPublicKeyRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserPublicKeyRequest): GetUserPublicKeyRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.GetUserPublicKeyRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = GetUserPublicKeyRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserPublicKeyRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.GetUserPublicKeyRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            GetUserPublicKeyRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetUserPublicKeyRequest
 */
export const GetUserPublicKeyRequest = new GetUserPublicKeyRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserPublicKeyResponseBody$Type extends MessageType<GetUserPublicKeyResponseBody> {
    constructor() {
        super("yarsha.bot.v1.GetUserPublicKeyResponseBody", [
            { no: 1, name: "PublicKey", kind: "scalar", jsonName: "PublicKey", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserPublicKeyResponseBody>): GetUserPublicKeyResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.publicKey = "";
        if (value !== undefined)
            reflectionMergePartial<GetUserPublicKeyResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserPublicKeyResponseBody): GetUserPublicKeyResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string PublicKey = 1 [json_name = "PublicKey"];*/ 1:
                    message.publicKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserPublicKeyResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string PublicKey = 1 [json_name = "PublicKey"]; */
        if (message.publicKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.publicKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetUserPublicKeyResponseBody
 */
export const GetUserPublicKeyResponseBody = new GetUserPublicKeyResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserPublicKeyResponse$Type extends MessageType<GetUserPublicKeyResponse> {
    constructor() {
        super("yarsha.bot.v1.GetUserPublicKeyResponse", [
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => GetUserPublicKeyResponseBody }
        ]);
    }
    create(value?: PartialMessage<GetUserPublicKeyResponse>): GetUserPublicKeyResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetUserPublicKeyResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserPublicKeyResponse): GetUserPublicKeyResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.GetUserPublicKeyResponseBody Response = 2 [json_name = "Response"];*/ 2:
                    message.response = GetUserPublicKeyResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserPublicKeyResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.GetUserPublicKeyResponseBody Response = 2 [json_name = "Response"]; */
        if (message.response)
            GetUserPublicKeyResponseBody.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.GetUserPublicKeyResponse
 */
export const GetUserPublicKeyResponse = new GetUserPublicKeyResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitCompletedTransactionRequestBody$Type extends MessageType<SubmitCompletedTransactionRequestBody> {
    constructor() {
        super("yarsha.bot.v1.SubmitCompletedTransactionRequestBody", [
            { no: 1, name: "UserId", kind: "scalar", jsonName: "UserId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "TransactionHash", kind: "scalar", jsonName: "TransactionHash", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "IsSuccess", kind: "scalar", jsonName: "IsSuccess", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "BotId", kind: "scalar", jsonName: "BotId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubmitCompletedTransactionRequestBody>): SubmitCompletedTransactionRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.chatId = "";
        message.transactionHash = "";
        message.isSuccess = false;
        message.botId = "";
        if (value !== undefined)
            reflectionMergePartial<SubmitCompletedTransactionRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitCompletedTransactionRequestBody): SubmitCompletedTransactionRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string UserId = 1 [json_name = "UserId"];*/ 1:
                    message.userId = reader.string();
                    break;
                case /* string ChatId = 2 [json_name = "ChatId"];*/ 2:
                    message.chatId = reader.string();
                    break;
                case /* string TransactionHash = 3 [json_name = "TransactionHash"];*/ 3:
                    message.transactionHash = reader.string();
                    break;
                case /* bool IsSuccess = 4 [json_name = "IsSuccess"];*/ 4:
                    message.isSuccess = reader.bool();
                    break;
                case /* string BotId = 5 [json_name = "BotId"];*/ 5:
                    message.botId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitCompletedTransactionRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string UserId = 1 [json_name = "UserId"]; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string ChatId = 2 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chatId);
        /* string TransactionHash = 3 [json_name = "TransactionHash"]; */
        if (message.transactionHash !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.transactionHash);
        /* bool IsSuccess = 4 [json_name = "IsSuccess"]; */
        if (message.isSuccess !== false)
            writer.tag(4, WireType.Varint).bool(message.isSuccess);
        /* string BotId = 5 [json_name = "BotId"]; */
        if (message.botId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.botId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.SubmitCompletedTransactionRequestBody
 */
export const SubmitCompletedTransactionRequestBody = new SubmitCompletedTransactionRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitCompletedTransactionRequest$Type extends MessageType<SubmitCompletedTransactionRequest> {
    constructor() {
        super("yarsha.bot.v1.SubmitCompletedTransactionRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => SubmitCompletedTransactionRequestBody }
        ]);
    }
    create(value?: PartialMessage<SubmitCompletedTransactionRequest>): SubmitCompletedTransactionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubmitCompletedTransactionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitCompletedTransactionRequest): SubmitCompletedTransactionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.bot.v1.SubmitCompletedTransactionRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = SubmitCompletedTransactionRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitCompletedTransactionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.bot.v1.SubmitCompletedTransactionRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            SubmitCompletedTransactionRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.SubmitCompletedTransactionRequest
 */
export const SubmitCompletedTransactionRequest = new SubmitCompletedTransactionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitCompletedTransactionResponseBody$Type extends MessageType<SubmitCompletedTransactionResponseBody> {
    constructor() {
        super("yarsha.bot.v1.SubmitCompletedTransactionResponseBody", [
            { no: 1, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubmitCompletedTransactionResponseBody>): SubmitCompletedTransactionResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<SubmitCompletedTransactionResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitCompletedTransactionResponseBody): SubmitCompletedTransactionResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Message = 1 [json_name = "Message"];*/ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitCompletedTransactionResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Message = 1 [json_name = "Message"]; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.SubmitCompletedTransactionResponseBody
 */
export const SubmitCompletedTransactionResponseBody = new SubmitCompletedTransactionResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubmitCompletedTransactionResponse$Type extends MessageType<SubmitCompletedTransactionResponse> {
    constructor() {
        super("yarsha.bot.v1.SubmitCompletedTransactionResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => SubmitCompletedTransactionResponseBody }
        ]);
    }
    create(value?: PartialMessage<SubmitCompletedTransactionResponse>): SubmitCompletedTransactionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubmitCompletedTransactionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubmitCompletedTransactionResponse): SubmitCompletedTransactionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.bot.v1.SubmitCompletedTransactionResponseBody Response = 2 [json_name = "Response"];*/ 2:
                    message.response = SubmitCompletedTransactionResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubmitCompletedTransactionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.bot.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.bot.v1.SubmitCompletedTransactionResponseBody Response = 2 [json_name = "Response"]; */
        if (message.response)
            SubmitCompletedTransactionResponseBody.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.bot.v1.SubmitCompletedTransactionResponse
 */
export const SubmitCompletedTransactionResponse = new SubmitCompletedTransactionResponse$Type();
/**
 * @generated ServiceType for protobuf service yarsha.bot.v1.BotService
 */
export const BotService = new ServiceType("yarsha.bot.v1.BotService", [
    { name: "CreateBot", options: {}, I: CreateBotRequest, O: CreateBotResponse },
    { name: "IsBot", options: {}, I: IsBotRequest, O: IsBotResponse },
    { name: "RegisterBotCommand", options: {}, I: RegisterBotCommandRequest, O: RegisterBotCommandResponse },
    { name: "GetBots", options: {}, I: GetBotsRequest, O: GetBotsResponse },
    { name: "ReceiveMessage", options: {}, I: ReceiveMessageRequest, O: ReceiveMessageResponse },
    { name: "SendMessage", options: {}, I: SendMessageRequest, O: SendMessageResponse },
    { name: "VerifyAccessToken", options: {}, I: VerifyAccessTokenRequest, O: VerifyAccessTokenResponse },
    { name: "GetBotCommands", options: {}, I: GetBotCommandsRequest, O: GetBotCommandsResponse },
    { name: "GetBot", options: {}, I: GetBotRequest, O: GetBotResponse },
    { name: "GetUserPublicKey", options: {}, I: GetUserPublicKeyRequest, O: GetUserPublicKeyResponse },
    { name: "SubmitCompletedTransaction", options: {}, I: SubmitCompletedTransactionRequest, O: SubmitCompletedTransactionResponse }
]);
