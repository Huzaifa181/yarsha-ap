// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "transaction.proto" (package "solana.transaction.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { TransactionService } from "./transaction";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateTransactionResponseWrapper } from "./transaction";
import type { CreateTransactionRequestWrapper } from "./transaction";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service solana.transaction.v1.TransactionService
 */
export interface ITransactionServiceClient {
    /**
     * @generated from protobuf rpc: CreateTransaction(solana.transaction.v1.CreateTransactionRequestWrapper) returns (solana.transaction.v1.CreateTransactionResponseWrapper);
     */
    createTransaction(input: CreateTransactionRequestWrapper, options?: RpcOptions): UnaryCall<CreateTransactionRequestWrapper, CreateTransactionResponseWrapper>;
}
/**
 * @generated from protobuf service solana.transaction.v1.TransactionService
 */
export class TransactionServiceClient implements ITransactionServiceClient, ServiceInfo {
    typeName = TransactionService.typeName;
    methods = TransactionService.methods;
    options = TransactionService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateTransaction(solana.transaction.v1.CreateTransactionRequestWrapper) returns (solana.transaction.v1.CreateTransactionResponseWrapper);
     */
    createTransaction(input: CreateTransactionRequestWrapper, options?: RpcOptions): UnaryCall<CreateTransactionRequestWrapper, CreateTransactionResponseWrapper> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateTransactionRequestWrapper, CreateTransactionResponseWrapper>("unary", this._transport, method, opt, input);
    }
}
