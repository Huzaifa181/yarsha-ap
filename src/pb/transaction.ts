// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "transaction.proto" (package "solana.transaction.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message solana.transaction.v1.RequestHeader
 */
export interface RequestHeader {
    /**
     * @generated from protobuf field: string RequestId = 1 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string Timestamp = 2 [json_name = "Timestamp"];
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string Channel = 3 [json_name = "Channel"];
     */
    channel: string;
    /**
     * @generated from protobuf field: string DeviceType = 4 [json_name = "DeviceType"];
     */
    deviceType: string;
    /**
     * @generated from protobuf field: string DeviceId = 5 [json_name = "DeviceId"];
     */
    deviceId: string;
    /**
     * @generated from protobuf field: string ClientIp = 6 [json_name = "ClientIp"];
     */
    clientIp: string;
    /**
     * @generated from protobuf field: string Action = 7 [json_name = "Action"];
     */
    action: string;
    /**
     * @generated from protobuf field: string AppVersion = 8 [json_name = "AppVersion"];
     */
    appVersion: string;
    /**
     * @generated from protobuf field: string LanguageCode = 9 [json_name = "LanguageCode"];
     */
    languageCode: string;
    /**
     * @generated from protobuf field: string DeviceModel = 10 [json_name = "DeviceModel"];
     */
    deviceModel: string;
}
/**
 * @generated from protobuf message solana.transaction.v1.ResponseHeader
 */
export interface ResponseHeader {
    /**
     * @generated from protobuf field: int32 Status = 1 [json_name = "Status"];
     */
    status: number;
    /**
     * @generated from protobuf field: string StatusCode = 2 [json_name = "StatusCode"];
     */
    statusCode: string;
    /**
     * @generated from protobuf field: string Timestamp = 3 [json_name = "Timestamp"];
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string RequestId = 4 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string ResponseTitle = 5 [json_name = "ResponseTitle"];
     */
    responseTitle: string;
    /**
     * @generated from protobuf field: string ResponseDescription = 6 [json_name = "ResponseDescription"];
     */
    responseDescription: string;
}
/**
 * @generated from protobuf message solana.transaction.v1.ReceiverInfo
 */
export interface ReceiverInfo {
    /**
     * @generated from protobuf field: string ToWallet = 1 [json_name = "ToWallet"];
     */
    toWallet: string;
    /**
     * @generated from protobuf field: string Cluster = 2 [json_name = "Cluster"];
     */
    cluster: string;
    /**
     * @generated from protobuf field: string Signature = 3 [json_name = "Signature"];
     */
    signature: string;
}
/**
 * @generated from protobuf message solana.transaction.v1.CreateTransactionSuccessResponse
 */
export interface CreateTransactionSuccessResponse {
    /**
     * @generated from protobuf field: string Amount = 1 [json_name = "Amount"];
     */
    amount: string;
    /**
     * @generated from protobuf field: string ToWallet = 2 [json_name = "ToWallet"];
     */
    toWallet: string;
    /**
     * @generated from protobuf field: string FromWallet = 3 [json_name = "FromWallet"];
     */
    fromWallet: string;
    /**
     * @generated from protobuf field: string Signature = 4 [json_name = "Signature"];
     */
    signature: string;
    /**
     * @generated from protobuf field: string TransactionId = 5 [json_name = "TransactionId"];
     */
    transactionId: string;
}
/**
 * @generated from protobuf message solana.transaction.v1.CreateTransactionRequestWrapper
 */
export interface CreateTransactionRequestWrapper {
    /**
     * @generated from protobuf field: solana.transaction.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: solana.transaction.v1.ReceiverInfo Body = 2 [json_name = "Body"];
     */
    body?: ReceiverInfo;
}
/**
 * @generated from protobuf message solana.transaction.v1.CreateTransactionResponseWrapper
 */
export interface CreateTransactionResponseWrapper {
    /**
     * @generated from protobuf field: solana.transaction.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: solana.transaction.v1.CreateTransactionSuccessResponse Response = 2 [json_name = "Response"];
     */
    response?: CreateTransactionSuccessResponse;
}
// @generated message type with reflection information, may provide speed optimized methods
class RequestHeader$Type extends MessageType<RequestHeader> {
    constructor() {
        super("solana.transaction.v1.RequestHeader", [
            { no: 1, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Channel", kind: "scalar", jsonName: "Channel", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "DeviceType", kind: "scalar", jsonName: "DeviceType", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "DeviceId", kind: "scalar", jsonName: "DeviceId", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ClientIp", kind: "scalar", jsonName: "ClientIp", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "Action", kind: "scalar", jsonName: "Action", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "AppVersion", kind: "scalar", jsonName: "AppVersion", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "LanguageCode", kind: "scalar", jsonName: "LanguageCode", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "DeviceModel", kind: "scalar", jsonName: "DeviceModel", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RequestHeader>): RequestHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = "";
        message.timestamp = "";
        message.channel = "";
        message.deviceType = "";
        message.deviceId = "";
        message.clientIp = "";
        message.action = "";
        message.appVersion = "";
        message.languageCode = "";
        message.deviceModel = "";
        if (value !== undefined)
            reflectionMergePartial<RequestHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestHeader): RequestHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string RequestId = 1 [json_name = "RequestId"];*/ 1:
                    message.requestId = reader.string();
                    break;
                case /* string Timestamp = 2 [json_name = "Timestamp"];*/ 2:
                    message.timestamp = reader.string();
                    break;
                case /* string Channel = 3 [json_name = "Channel"];*/ 3:
                    message.channel = reader.string();
                    break;
                case /* string DeviceType = 4 [json_name = "DeviceType"];*/ 4:
                    message.deviceType = reader.string();
                    break;
                case /* string DeviceId = 5 [json_name = "DeviceId"];*/ 5:
                    message.deviceId = reader.string();
                    break;
                case /* string ClientIp = 6 [json_name = "ClientIp"];*/ 6:
                    message.clientIp = reader.string();
                    break;
                case /* string Action = 7 [json_name = "Action"];*/ 7:
                    message.action = reader.string();
                    break;
                case /* string AppVersion = 8 [json_name = "AppVersion"];*/ 8:
                    message.appVersion = reader.string();
                    break;
                case /* string LanguageCode = 9 [json_name = "LanguageCode"];*/ 9:
                    message.languageCode = reader.string();
                    break;
                case /* string DeviceModel = 10 [json_name = "DeviceModel"];*/ 10:
                    message.deviceModel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string RequestId = 1 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.requestId);
        /* string Timestamp = 2 [json_name = "Timestamp"]; */
        if (message.timestamp !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.timestamp);
        /* string Channel = 3 [json_name = "Channel"]; */
        if (message.channel !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.channel);
        /* string DeviceType = 4 [json_name = "DeviceType"]; */
        if (message.deviceType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.deviceType);
        /* string DeviceId = 5 [json_name = "DeviceId"]; */
        if (message.deviceId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deviceId);
        /* string ClientIp = 6 [json_name = "ClientIp"]; */
        if (message.clientIp !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.clientIp);
        /* string Action = 7 [json_name = "Action"]; */
        if (message.action !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.action);
        /* string AppVersion = 8 [json_name = "AppVersion"]; */
        if (message.appVersion !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.appVersion);
        /* string LanguageCode = 9 [json_name = "LanguageCode"]; */
        if (message.languageCode !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.languageCode);
        /* string DeviceModel = 10 [json_name = "DeviceModel"]; */
        if (message.deviceModel !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.deviceModel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message solana.transaction.v1.RequestHeader
 */
export const RequestHeader = new RequestHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseHeader$Type extends MessageType<ResponseHeader> {
    constructor() {
        super("solana.transaction.v1.ResponseHeader", [
            { no: 1, name: "Status", kind: "scalar", jsonName: "Status", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "StatusCode", kind: "scalar", jsonName: "StatusCode", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ResponseTitle", kind: "scalar", jsonName: "ResponseTitle", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ResponseDescription", kind: "scalar", jsonName: "ResponseDescription", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseHeader>): ResponseHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        message.statusCode = "";
        message.timestamp = "";
        message.requestId = "";
        message.responseTitle = "";
        message.responseDescription = "";
        if (value !== undefined)
            reflectionMergePartial<ResponseHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseHeader): ResponseHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 Status = 1 [json_name = "Status"];*/ 1:
                    message.status = reader.int32();
                    break;
                case /* string StatusCode = 2 [json_name = "StatusCode"];*/ 2:
                    message.statusCode = reader.string();
                    break;
                case /* string Timestamp = 3 [json_name = "Timestamp"];*/ 3:
                    message.timestamp = reader.string();
                    break;
                case /* string RequestId = 4 [json_name = "RequestId"];*/ 4:
                    message.requestId = reader.string();
                    break;
                case /* string ResponseTitle = 5 [json_name = "ResponseTitle"];*/ 5:
                    message.responseTitle = reader.string();
                    break;
                case /* string ResponseDescription = 6 [json_name = "ResponseDescription"];*/ 6:
                    message.responseDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 Status = 1 [json_name = "Status"]; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* string StatusCode = 2 [json_name = "StatusCode"]; */
        if (message.statusCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.statusCode);
        /* string Timestamp = 3 [json_name = "Timestamp"]; */
        if (message.timestamp !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.timestamp);
        /* string RequestId = 4 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.requestId);
        /* string ResponseTitle = 5 [json_name = "ResponseTitle"]; */
        if (message.responseTitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.responseTitle);
        /* string ResponseDescription = 6 [json_name = "ResponseDescription"]; */
        if (message.responseDescription !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.responseDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message solana.transaction.v1.ResponseHeader
 */
export const ResponseHeader = new ResponseHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceiverInfo$Type extends MessageType<ReceiverInfo> {
    constructor() {
        super("solana.transaction.v1.ReceiverInfo", [
            { no: 1, name: "ToWallet", kind: "scalar", jsonName: "ToWallet", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Cluster", kind: "scalar", jsonName: "Cluster", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Signature", kind: "scalar", jsonName: "Signature", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReceiverInfo>): ReceiverInfo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.toWallet = "";
        message.cluster = "";
        message.signature = "";
        if (value !== undefined)
            reflectionMergePartial<ReceiverInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReceiverInfo): ReceiverInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ToWallet = 1 [json_name = "ToWallet"];*/ 1:
                    message.toWallet = reader.string();
                    break;
                case /* string Cluster = 2 [json_name = "Cluster"];*/ 2:
                    message.cluster = reader.string();
                    break;
                case /* string Signature = 3 [json_name = "Signature"];*/ 3:
                    message.signature = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReceiverInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ToWallet = 1 [json_name = "ToWallet"]; */
        if (message.toWallet !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.toWallet);
        /* string Cluster = 2 [json_name = "Cluster"]; */
        if (message.cluster !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.cluster);
        /* string Signature = 3 [json_name = "Signature"]; */
        if (message.signature !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message solana.transaction.v1.ReceiverInfo
 */
export const ReceiverInfo = new ReceiverInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTransactionSuccessResponse$Type extends MessageType<CreateTransactionSuccessResponse> {
    constructor() {
        super("solana.transaction.v1.CreateTransactionSuccessResponse", [
            { no: 1, name: "Amount", kind: "scalar", jsonName: "Amount", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ToWallet", kind: "scalar", jsonName: "ToWallet", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "FromWallet", kind: "scalar", jsonName: "FromWallet", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Signature", kind: "scalar", jsonName: "Signature", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "TransactionId", kind: "scalar", jsonName: "TransactionId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTransactionSuccessResponse>): CreateTransactionSuccessResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.amount = "";
        message.toWallet = "";
        message.fromWallet = "";
        message.signature = "";
        message.transactionId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateTransactionSuccessResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTransactionSuccessResponse): CreateTransactionSuccessResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Amount = 1 [json_name = "Amount"];*/ 1:
                    message.amount = reader.string();
                    break;
                case /* string ToWallet = 2 [json_name = "ToWallet"];*/ 2:
                    message.toWallet = reader.string();
                    break;
                case /* string FromWallet = 3 [json_name = "FromWallet"];*/ 3:
                    message.fromWallet = reader.string();
                    break;
                case /* string Signature = 4 [json_name = "Signature"];*/ 4:
                    message.signature = reader.string();
                    break;
                case /* string TransactionId = 5 [json_name = "TransactionId"];*/ 5:
                    message.transactionId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTransactionSuccessResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Amount = 1 [json_name = "Amount"]; */
        if (message.amount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.amount);
        /* string ToWallet = 2 [json_name = "ToWallet"]; */
        if (message.toWallet !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toWallet);
        /* string FromWallet = 3 [json_name = "FromWallet"]; */
        if (message.fromWallet !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fromWallet);
        /* string Signature = 4 [json_name = "Signature"]; */
        if (message.signature !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.signature);
        /* string TransactionId = 5 [json_name = "TransactionId"]; */
        if (message.transactionId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.transactionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message solana.transaction.v1.CreateTransactionSuccessResponse
 */
export const CreateTransactionSuccessResponse = new CreateTransactionSuccessResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTransactionRequestWrapper$Type extends MessageType<CreateTransactionRequestWrapper> {
    constructor() {
        super("solana.transaction.v1.CreateTransactionRequestWrapper", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => ReceiverInfo }
        ]);
    }
    create(value?: PartialMessage<CreateTransactionRequestWrapper>): CreateTransactionRequestWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateTransactionRequestWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTransactionRequestWrapper): CreateTransactionRequestWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* solana.transaction.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* solana.transaction.v1.ReceiverInfo Body = 2 [json_name = "Body"];*/ 2:
                    message.body = ReceiverInfo.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTransactionRequestWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* solana.transaction.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* solana.transaction.v1.ReceiverInfo Body = 2 [json_name = "Body"]; */
        if (message.body)
            ReceiverInfo.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message solana.transaction.v1.CreateTransactionRequestWrapper
 */
export const CreateTransactionRequestWrapper = new CreateTransactionRequestWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTransactionResponseWrapper$Type extends MessageType<CreateTransactionResponseWrapper> {
    constructor() {
        super("solana.transaction.v1.CreateTransactionResponseWrapper", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => CreateTransactionSuccessResponse }
        ]);
    }
    create(value?: PartialMessage<CreateTransactionResponseWrapper>): CreateTransactionResponseWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateTransactionResponseWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTransactionResponseWrapper): CreateTransactionResponseWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* solana.transaction.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* solana.transaction.v1.CreateTransactionSuccessResponse Response = 2 [json_name = "Response"];*/ 2:
                    message.response = CreateTransactionSuccessResponse.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTransactionResponseWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* solana.transaction.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* solana.transaction.v1.CreateTransactionSuccessResponse Response = 2 [json_name = "Response"]; */
        if (message.response)
            CreateTransactionSuccessResponse.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message solana.transaction.v1.CreateTransactionResponseWrapper
 */
export const CreateTransactionResponseWrapper = new CreateTransactionResponseWrapper$Type();
/**
 * @generated ServiceType for protobuf service solana.transaction.v1.TransactionService
 */
export const TransactionService = new ServiceType("solana.transaction.v1.TransactionService", [
    { name: "CreateTransaction", options: {}, I: CreateTransactionRequestWrapper, O: CreateTransactionResponseWrapper }
]);
