// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "message.proto" (package "yarsha.message.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message yarsha.message.v1.requestHeader
 */
export interface requestHeader {
    /**
     * @generated from protobuf field: string RequestId = 1 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string DeviceId = 2 [json_name = "DeviceId"];
     */
    deviceId: string;
    /**
     * @generated from protobuf field: string DeviceModel = 3 [json_name = "DeviceModel"];
     */
    deviceModel: string;
    /**
     * @generated from protobuf field: string Timestamp = 4 [json_name = "Timestamp"];
     */
    timestamp: string;
}
/**
 * @generated from protobuf message yarsha.message.v1.responseHeader
 */
export interface responseHeader {
    /**
     * @generated from protobuf field: string Status = 1 [json_name = "Status"];
     */
    status: string;
    /**
     * @generated from protobuf field: string StatusCode = 2 [json_name = "StatusCode"];
     */
    statusCode: string;
    /**
     * @generated from protobuf field: string Message = 3 [json_name = "Message"];
     */
    message: string;
    /**
     * @generated from protobuf field: string TimeStamp = 4 [json_name = "TimeStamp"];
     */
    timeStamp: string;
    /**
     * @generated from protobuf field: string RequestId = 5 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string ResponseTitle = 6 [json_name = "ResponseTitle"];
     */
    responseTitle: string;
    /**
     * @generated from protobuf field: string ResponseDescription = 7 [json_name = "ResponseDescription"];
     */
    responseDescription: string;
}
/**
 * @generated from protobuf message yarsha.message.v1.multimediaPayload
 */
export interface multimediaPayload {
    /**
     * @generated from protobuf field: string filePath = 1;
     */
    filePath: string;
    /**
     * @generated from protobuf field: string signedUrl = 2;
     */
    signedUrl: string;
    /**
     * @generated from protobuf field: string expirationTime = 3;
     */
    expirationTime: string;
    /**
     * @generated from protobuf field: string mimeType = 4;
     */
    mimeType: string;
}
/**
 * @generated from protobuf message yarsha.message.v1.transactionPayload
 */
export interface transactionPayload {
    /**
     * @generated from protobuf field: string amount = 1;
     */
    amount: string;
    /**
     * @generated from protobuf field: string toWallet = 2;
     */
    toWallet: string;
    /**
     * @generated from protobuf field: string fromWallet = 3;
     */
    fromWallet: string;
    /**
     * @generated from protobuf field: string signature = 4;
     */
    signature: string;
    /**
     * @generated from protobuf field: string transactionId = 5;
     */
    transactionId: string;
    /**
     * @generated from protobuf field: string senderId = 6;
     */
    senderId: string;
    /**
     * @generated from protobuf field: string timestamp = 7;
     */
    timestamp: string;
}
/**
 * @generated from protobuf message yarsha.message.v1.replyTo
 */
export interface replyTo {
    /**
     * @generated from protobuf field: string replyToId = 1;
     */
    replyToId: string;
    /**
     * @generated from protobuf field: string replyToContent = 2;
     */
    replyToContent: string;
    /**
     * @generated from protobuf field: string replyToSenderName = 3;
     */
    replyToSenderName: string;
}
/**
 * @generated from protobuf message yarsha.message.v1.SendMessageRequest
 */
export interface SendMessageRequest {
    /**
     * @generated from protobuf field: string senderId = 1;
     */
    senderId: string;
    /**
     * @generated from protobuf field: string senderName = 2;
     */
    senderName: string;
    /**
     * @generated from protobuf field: string chatId = 3;
     */
    chatId: string;
    /**
     * @generated from protobuf field: optional string content = 4;
     */
    content?: string;
    /**
     * @generated from protobuf field: string messageId = 5;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string timestamp = 6;
     */
    timestamp: string;
    /**
     * @generated from protobuf field: bool automated = 7;
     */
    automated: boolean;
    /**
     * @generated from protobuf field: repeated yarsha.message.v1.multimediaPayload multimedia = 8;
     */
    multimedia: multimediaPayload[];
    /**
     * @generated from protobuf field: optional yarsha.message.v1.transactionPayload transaction = 9;
     */
    transaction?: transactionPayload;
    /**
     * @generated from protobuf field: optional string replyToMessageId = 10;
     */
    replyToMessageId?: string;
    /**
     * @generated from protobuf field: optional string preparedTransaction = 11;
     */
    preparedTransaction?: string;
}
// string senderId = 1;
// string senderName = 2;
// string chatId = 3;
// string content = 4;
// string messageId = 5;
// string timestamp = 6;
// bool automated = 7;

/**
 * @generated from protobuf message yarsha.message.v1.SendMessageResponse
 */
export interface SendMessageResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: optional string message = 2;
     */
    message?: string;
}
/**
 * @generated from protobuf message yarsha.message.v1.success
 */
export interface success {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message yarsha.message.v1.GetChatMessagesResponse
 */
export interface GetChatMessagesResponse {
    /**
     * @generated from protobuf field: yarsha.message.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: repeated yarsha.message.v1.GroupMessages GroupMessages = 2 [json_name = "GroupMessages"];
     */
    groupMessages: GroupMessages[];
    /**
     * @generated from protobuf field: repeated yarsha.message.v1.PinnedMessage PinnedMessages = 3 [json_name = "PinnedMessages"];
     */
    pinnedMessages: PinnedMessage[];
}
/**
 * @generated from protobuf message yarsha.message.v1.GetChatMessagesRequest
 */
export interface GetChatMessagesRequest {
    /**
     * @generated from protobuf field: yarsha.message.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: yarsha.message.v1.GetChatMessagesRequestBody Body = 2 [json_name = "Body"];
     */
    body?: GetChatMessagesRequestBody;
}
/**
 * @generated from protobuf message yarsha.message.v1.GetChatMessagesRequestBody
 */
export interface GetChatMessagesRequestBody {
    /**
     * @generated from protobuf field: string chatId = 1;
     */
    chatId: string;
    /**
     * @generated from protobuf field: string timestamp = 2;
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string direction = 3;
     */
    direction: string;
    /**
     * @generated from protobuf field: int32 page = 4;
     */
    page: number;
    /**
     * @generated from protobuf field: int32 limit = 5;
     */
    limit: number;
}
/**
 * @generated from protobuf message yarsha.message.v1.Reaction
 */
export interface Reaction {
    /**
     * @generated from protobuf field: string reactorId = 1;
     */
    reactorId: string;
    /**
     * @generated from protobuf field: string reactorName = 2;
     */
    reactorName: string;
    /**
     * @generated from protobuf field: string reactorProfilePicture = 3;
     */
    reactorProfilePicture: string;
    /**
     * @generated from protobuf field: string reactorBackgroundColor = 4;
     */
    reactorBackgroundColor: string;
    /**
     * @generated from protobuf field: string timestamp = 5;
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string reaction = 6;
     */
    reaction: string;
}
/**
 * @generated from protobuf message yarsha.message.v1.GroupMessages
 */
export interface GroupMessages {
    /**
     * @generated from protobuf field: string _id = 1;
     */
    Id: string;
    /**
     * @generated from protobuf field: string chatId = 2;
     */
    chatId: string;
    /**
     * @generated from protobuf field: string senderId = 3;
     */
    senderId: string;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * @generated from protobuf field: string messageId = 5;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string createdAt = 6;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updatedAt = 7;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: bool automated = 8;
     */
    automated: boolean;
    /**
     * @generated from protobuf field: repeated yarsha.message.v1.multimediaPayload multimedia = 9;
     */
    multimedia: multimediaPayload[];
    /**
     * @generated from protobuf field: optional yarsha.message.v1.transactionPayload transaction = 10;
     */
    transaction?: transactionPayload;
    /**
     * @generated from protobuf field: optional yarsha.message.v1.replyTo replyTo = 11;
     */
    replyTo?: replyTo;
    /**
     * @generated from protobuf field: repeated yarsha.message.v1.Reaction reactions = 12;
     */
    reactions: Reaction[];
    /**
     * @generated from protobuf field: bool isPinned = 13;
     */
    isPinned: boolean;
}
/**
 * @generated from protobuf message yarsha.message.v1.ReactToMessageRequest
 */
export interface ReactToMessageRequest {
    /**
     * @generated from protobuf field: string messageId = 1;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string chatId = 2;
     */
    chatId: string;
    /**
     * @generated from protobuf field: string reaction = 3;
     */
    reaction: string;
}
/**
 * @generated from protobuf message yarsha.message.v1.ReactToMessageResponseBody
 */
export interface ReactToMessageResponseBody {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: optional string SuccessMessage = 2 [json_name = "SuccessMessage"];
     */
    successMessage?: string;
}
/**
 * @generated from protobuf message yarsha.message.v1.ReactToMessageResponse
 */
export interface ReactToMessageResponse {
    /**
     * @generated from protobuf field: yarsha.message.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: yarsha.message.v1.ReactToMessageResponseBody Response = 2 [json_name = "Response"];
     */
    response?: ReactToMessageResponseBody;
}
/**
 * @generated from protobuf message yarsha.message.v1.PinMessageRequest
 */
export interface PinMessageRequest {
    /**
     * @generated from protobuf field: string chatId = 1;
     */
    chatId: string;
    /**
     * @generated from protobuf field: string messageId = 2;
     */
    messageId: string;
}
/**
 * @generated from protobuf message yarsha.message.v1.PinMessageResponse
 */
export interface PinMessageResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message yarsha.message.v1.UnpinMessageRequest
 */
export interface UnpinMessageRequest {
    /**
     * @generated from protobuf field: string chatId = 1;
     */
    chatId: string;
    /**
     * @generated from protobuf field: string messageId = 2;
     */
    messageId: string;
}
/**
 * @generated from protobuf message yarsha.message.v1.UnpinMessageResponse
 */
export interface UnpinMessageResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
    /**
     * @generated from protobuf field: string message = 2;
     */
    message: string;
}
/**
 * @generated from protobuf message yarsha.message.v1.PinnedMessage
 */
export interface PinnedMessage {
    /**
     * @generated from protobuf field: string _id = 1;
     */
    Id: string;
    /**
     * @generated from protobuf field: string chatId = 2;
     */
    chatId: string;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: string messageId = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: repeated yarsha.message.v1.multimediaPayload multimedia = 5;
     */
    multimedia: multimediaPayload[];
    /**
     * @generated from protobuf field: optional yarsha.message.v1.transactionPayload transaction = 6;
     */
    transaction?: transactionPayload;
    /**
     * @generated from protobuf field: string pinnedBy = 7;
     */
    pinnedBy: string;
    /**
     * @generated from protobuf field: string pinnedAt = 8;
     */
    pinnedAt: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class requestHeader$Type extends MessageType<requestHeader> {
    constructor() {
        super("yarsha.message.v1.requestHeader", [
            { no: 1, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "DeviceId", kind: "scalar", jsonName: "DeviceId", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "DeviceModel", kind: "scalar", jsonName: "DeviceModel", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<requestHeader>): requestHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = "";
        message.deviceId = "";
        message.deviceModel = "";
        message.timestamp = "";
        if (value !== undefined)
            reflectionMergePartial<requestHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: requestHeader): requestHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string RequestId = 1 [json_name = "RequestId"];*/ 1:
                    message.requestId = reader.string();
                    break;
                case /* string DeviceId = 2 [json_name = "DeviceId"];*/ 2:
                    message.deviceId = reader.string();
                    break;
                case /* string DeviceModel = 3 [json_name = "DeviceModel"];*/ 3:
                    message.deviceModel = reader.string();
                    break;
                case /* string Timestamp = 4 [json_name = "Timestamp"];*/ 4:
                    message.timestamp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: requestHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string RequestId = 1 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.requestId);
        /* string DeviceId = 2 [json_name = "DeviceId"]; */
        if (message.deviceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.deviceId);
        /* string DeviceModel = 3 [json_name = "DeviceModel"]; */
        if (message.deviceModel !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deviceModel);
        /* string Timestamp = 4 [json_name = "Timestamp"]; */
        if (message.timestamp !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.requestHeader
 */
export const requestHeader = new requestHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class responseHeader$Type extends MessageType<responseHeader> {
    constructor() {
        super("yarsha.message.v1.responseHeader", [
            { no: 1, name: "Status", kind: "scalar", jsonName: "Status", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "StatusCode", kind: "scalar", jsonName: "StatusCode", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "TimeStamp", kind: "scalar", jsonName: "TimeStamp", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ResponseTitle", kind: "scalar", jsonName: "ResponseTitle", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "ResponseDescription", kind: "scalar", jsonName: "ResponseDescription", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<responseHeader>): responseHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        message.statusCode = "";
        message.message = "";
        message.timeStamp = "";
        message.requestId = "";
        message.responseTitle = "";
        message.responseDescription = "";
        if (value !== undefined)
            reflectionMergePartial<responseHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: responseHeader): responseHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Status = 1 [json_name = "Status"];*/ 1:
                    message.status = reader.string();
                    break;
                case /* string StatusCode = 2 [json_name = "StatusCode"];*/ 2:
                    message.statusCode = reader.string();
                    break;
                case /* string Message = 3 [json_name = "Message"];*/ 3:
                    message.message = reader.string();
                    break;
                case /* string TimeStamp = 4 [json_name = "TimeStamp"];*/ 4:
                    message.timeStamp = reader.string();
                    break;
                case /* string RequestId = 5 [json_name = "RequestId"];*/ 5:
                    message.requestId = reader.string();
                    break;
                case /* string ResponseTitle = 6 [json_name = "ResponseTitle"];*/ 6:
                    message.responseTitle = reader.string();
                    break;
                case /* string ResponseDescription = 7 [json_name = "ResponseDescription"];*/ 7:
                    message.responseDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: responseHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Status = 1 [json_name = "Status"]; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        /* string StatusCode = 2 [json_name = "StatusCode"]; */
        if (message.statusCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.statusCode);
        /* string Message = 3 [json_name = "Message"]; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        /* string TimeStamp = 4 [json_name = "TimeStamp"]; */
        if (message.timeStamp !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.timeStamp);
        /* string RequestId = 5 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.requestId);
        /* string ResponseTitle = 6 [json_name = "ResponseTitle"]; */
        if (message.responseTitle !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.responseTitle);
        /* string ResponseDescription = 7 [json_name = "ResponseDescription"]; */
        if (message.responseDescription !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.responseDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.responseHeader
 */
export const responseHeader = new responseHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class multimediaPayload$Type extends MessageType<multimediaPayload> {
    constructor() {
        super("yarsha.message.v1.multimediaPayload", [
            { no: 1, name: "filePath", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "signedUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expirationTime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "mimeType", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<multimediaPayload>): multimediaPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filePath = "";
        message.signedUrl = "";
        message.expirationTime = "";
        message.mimeType = "";
        if (value !== undefined)
            reflectionMergePartial<multimediaPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: multimediaPayload): multimediaPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filePath */ 1:
                    message.filePath = reader.string();
                    break;
                case /* string signedUrl */ 2:
                    message.signedUrl = reader.string();
                    break;
                case /* string expirationTime */ 3:
                    message.expirationTime = reader.string();
                    break;
                case /* string mimeType */ 4:
                    message.mimeType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: multimediaPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filePath = 1; */
        if (message.filePath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filePath);
        /* string signedUrl = 2; */
        if (message.signedUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.signedUrl);
        /* string expirationTime = 3; */
        if (message.expirationTime !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.expirationTime);
        /* string mimeType = 4; */
        if (message.mimeType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.mimeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.multimediaPayload
 */
export const multimediaPayload = new multimediaPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class transactionPayload$Type extends MessageType<transactionPayload> {
    constructor() {
        super("yarsha.message.v1.transactionPayload", [
            { no: 1, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "toWallet", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fromWallet", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "transactionId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "senderId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<transactionPayload>): transactionPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.amount = "";
        message.toWallet = "";
        message.fromWallet = "";
        message.signature = "";
        message.transactionId = "";
        message.senderId = "";
        message.timestamp = "";
        if (value !== undefined)
            reflectionMergePartial<transactionPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: transactionPayload): transactionPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string amount */ 1:
                    message.amount = reader.string();
                    break;
                case /* string toWallet */ 2:
                    message.toWallet = reader.string();
                    break;
                case /* string fromWallet */ 3:
                    message.fromWallet = reader.string();
                    break;
                case /* string signature */ 4:
                    message.signature = reader.string();
                    break;
                case /* string transactionId */ 5:
                    message.transactionId = reader.string();
                    break;
                case /* string senderId */ 6:
                    message.senderId = reader.string();
                    break;
                case /* string timestamp */ 7:
                    message.timestamp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: transactionPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string amount = 1; */
        if (message.amount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.amount);
        /* string toWallet = 2; */
        if (message.toWallet !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toWallet);
        /* string fromWallet = 3; */
        if (message.fromWallet !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fromWallet);
        /* string signature = 4; */
        if (message.signature !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.signature);
        /* string transactionId = 5; */
        if (message.transactionId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.transactionId);
        /* string senderId = 6; */
        if (message.senderId !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.senderId);
        /* string timestamp = 7; */
        if (message.timestamp !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.transactionPayload
 */
export const transactionPayload = new transactionPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class replyTo$Type extends MessageType<replyTo> {
    constructor() {
        super("yarsha.message.v1.replyTo", [
            { no: 1, name: "replyToId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "replyToContent", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "replyToSenderName", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<replyTo>): replyTo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.replyToId = "";
        message.replyToContent = "";
        message.replyToSenderName = "";
        if (value !== undefined)
            reflectionMergePartial<replyTo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: replyTo): replyTo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string replyToId */ 1:
                    message.replyToId = reader.string();
                    break;
                case /* string replyToContent */ 2:
                    message.replyToContent = reader.string();
                    break;
                case /* string replyToSenderName */ 3:
                    message.replyToSenderName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: replyTo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string replyToId = 1; */
        if (message.replyToId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.replyToId);
        /* string replyToContent = 2; */
        if (message.replyToContent !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.replyToContent);
        /* string replyToSenderName = 3; */
        if (message.replyToSenderName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.replyToSenderName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.replyTo
 */
export const replyTo = new replyTo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessageRequest$Type extends MessageType<SendMessageRequest> {
    constructor() {
        super("yarsha.message.v1.SendMessageRequest", [
            { no: 1, name: "senderId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "senderName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "automated", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "multimedia", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => multimediaPayload },
            { no: 9, name: "transaction", kind: "message", T: () => transactionPayload },
            { no: 10, name: "replyToMessageId", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "preparedTransaction", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendMessageRequest>): SendMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.senderId = "";
        message.senderName = "";
        message.chatId = "";
        message.messageId = "";
        message.timestamp = "";
        message.automated = false;
        message.multimedia = [];
        if (value !== undefined)
            reflectionMergePartial<SendMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessageRequest): SendMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string senderId */ 1:
                    message.senderId = reader.string();
                    break;
                case /* string senderName */ 2:
                    message.senderName = reader.string();
                    break;
                case /* string chatId */ 3:
                    message.chatId = reader.string();
                    break;
                case /* optional string content */ 4:
                    message.content = reader.string();
                    break;
                case /* string messageId */ 5:
                    message.messageId = reader.string();
                    break;
                case /* string timestamp */ 6:
                    message.timestamp = reader.string();
                    break;
                case /* bool automated */ 7:
                    message.automated = reader.bool();
                    break;
                case /* repeated yarsha.message.v1.multimediaPayload multimedia */ 8:
                    message.multimedia.push(multimediaPayload.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional yarsha.message.v1.transactionPayload transaction */ 9:
                    message.transaction = transactionPayload.internalBinaryRead(reader, reader.uint32(), options, message.transaction);
                    break;
                case /* optional string replyToMessageId */ 10:
                    message.replyToMessageId = reader.string();
                    break;
                case /* optional string preparedTransaction */ 11:
                    message.preparedTransaction = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string senderId = 1; */
        if (message.senderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.senderId);
        /* string senderName = 2; */
        if (message.senderName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.senderName);
        /* string chatId = 3; */
        if (message.chatId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.chatId);
        /* optional string content = 4; */
        if (message.content !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* string messageId = 5; */
        if (message.messageId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.messageId);
        /* string timestamp = 6; */
        if (message.timestamp !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.timestamp);
        /* bool automated = 7; */
        if (message.automated !== false)
            writer.tag(7, WireType.Varint).bool(message.automated);
        /* repeated yarsha.message.v1.multimediaPayload multimedia = 8; */
        for (let i = 0; i < message.multimedia.length; i++)
            multimediaPayload.internalBinaryWrite(message.multimedia[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional yarsha.message.v1.transactionPayload transaction = 9; */
        if (message.transaction)
            transactionPayload.internalBinaryWrite(message.transaction, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional string replyToMessageId = 10; */
        if (message.replyToMessageId !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.replyToMessageId);
        /* optional string preparedTransaction = 11; */
        if (message.preparedTransaction !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.preparedTransaction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.SendMessageRequest
 */
export const SendMessageRequest = new SendMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessageResponse$Type extends MessageType<SendMessageResponse> {
    constructor() {
        super("yarsha.message.v1.SendMessageResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendMessageResponse>): SendMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<SendMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessageResponse): SendMessageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* optional string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* optional string message = 2; */
        if (message.message !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.SendMessageResponse
 */
export const SendMessageResponse = new SendMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class success$Type extends MessageType<success> {
    constructor() {
        super("yarsha.message.v1.success", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<success>): success {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<success>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: success): success {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: success, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.success
 */
export const success = new success$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatMessagesResponse$Type extends MessageType<GetChatMessagesResponse> {
    constructor() {
        super("yarsha.message.v1.GetChatMessagesResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "GroupMessages", kind: "message", jsonName: "GroupMessages", repeat: 1 /*RepeatType.PACKED*/, T: () => GroupMessages },
            { no: 3, name: "PinnedMessages", kind: "message", jsonName: "PinnedMessages", repeat: 1 /*RepeatType.PACKED*/, T: () => PinnedMessage }
        ]);
    }
    create(value?: PartialMessage<GetChatMessagesResponse>): GetChatMessagesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupMessages = [];
        message.pinnedMessages = [];
        if (value !== undefined)
            reflectionMergePartial<GetChatMessagesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatMessagesResponse): GetChatMessagesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.message.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* repeated yarsha.message.v1.GroupMessages GroupMessages = 2 [json_name = "GroupMessages"];*/ 2:
                    message.groupMessages.push(GroupMessages.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated yarsha.message.v1.PinnedMessage PinnedMessages = 3 [json_name = "PinnedMessages"];*/ 3:
                    message.pinnedMessages.push(PinnedMessage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatMessagesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.message.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated yarsha.message.v1.GroupMessages GroupMessages = 2 [json_name = "GroupMessages"]; */
        for (let i = 0; i < message.groupMessages.length; i++)
            GroupMessages.internalBinaryWrite(message.groupMessages[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated yarsha.message.v1.PinnedMessage PinnedMessages = 3 [json_name = "PinnedMessages"]; */
        for (let i = 0; i < message.pinnedMessages.length; i++)
            PinnedMessage.internalBinaryWrite(message.pinnedMessages[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.GetChatMessagesResponse
 */
export const GetChatMessagesResponse = new GetChatMessagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatMessagesRequest$Type extends MessageType<GetChatMessagesRequest> {
    constructor() {
        super("yarsha.message.v1.GetChatMessagesRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => GetChatMessagesRequestBody }
        ]);
    }
    create(value?: PartialMessage<GetChatMessagesRequest>): GetChatMessagesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetChatMessagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatMessagesRequest): GetChatMessagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.message.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.message.v1.GetChatMessagesRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = GetChatMessagesRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatMessagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.message.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.message.v1.GetChatMessagesRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            GetChatMessagesRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.GetChatMessagesRequest
 */
export const GetChatMessagesRequest = new GetChatMessagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetChatMessagesRequestBody$Type extends MessageType<GetChatMessagesRequestBody> {
    constructor() {
        super("yarsha.message.v1.GetChatMessagesRequestBody", [
            { no: 1, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "direction", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "page", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetChatMessagesRequestBody>): GetChatMessagesRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        message.timestamp = "";
        message.direction = "";
        message.page = 0;
        message.limit = 0;
        if (value !== undefined)
            reflectionMergePartial<GetChatMessagesRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetChatMessagesRequestBody): GetChatMessagesRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chatId */ 1:
                    message.chatId = reader.string();
                    break;
                case /* string timestamp */ 2:
                    message.timestamp = reader.string();
                    break;
                case /* string direction */ 3:
                    message.direction = reader.string();
                    break;
                case /* int32 page */ 4:
                    message.page = reader.int32();
                    break;
                case /* int32 limit */ 5:
                    message.limit = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetChatMessagesRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chatId = 1; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* string timestamp = 2; */
        if (message.timestamp !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.timestamp);
        /* string direction = 3; */
        if (message.direction !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.direction);
        /* int32 page = 4; */
        if (message.page !== 0)
            writer.tag(4, WireType.Varint).int32(message.page);
        /* int32 limit = 5; */
        if (message.limit !== 0)
            writer.tag(5, WireType.Varint).int32(message.limit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.GetChatMessagesRequestBody
 */
export const GetChatMessagesRequestBody = new GetChatMessagesRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Reaction$Type extends MessageType<Reaction> {
    constructor() {
        super("yarsha.message.v1.Reaction", [
            { no: 1, name: "reactorId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reactorName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reactorProfilePicture", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "reactorBackgroundColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "reaction", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Reaction>): Reaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.reactorId = "";
        message.reactorName = "";
        message.reactorProfilePicture = "";
        message.reactorBackgroundColor = "";
        message.timestamp = "";
        message.reaction = "";
        if (value !== undefined)
            reflectionMergePartial<Reaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Reaction): Reaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string reactorId */ 1:
                    message.reactorId = reader.string();
                    break;
                case /* string reactorName */ 2:
                    message.reactorName = reader.string();
                    break;
                case /* string reactorProfilePicture */ 3:
                    message.reactorProfilePicture = reader.string();
                    break;
                case /* string reactorBackgroundColor */ 4:
                    message.reactorBackgroundColor = reader.string();
                    break;
                case /* string timestamp */ 5:
                    message.timestamp = reader.string();
                    break;
                case /* string reaction */ 6:
                    message.reaction = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Reaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string reactorId = 1; */
        if (message.reactorId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.reactorId);
        /* string reactorName = 2; */
        if (message.reactorName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reactorName);
        /* string reactorProfilePicture = 3; */
        if (message.reactorProfilePicture !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.reactorProfilePicture);
        /* string reactorBackgroundColor = 4; */
        if (message.reactorBackgroundColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.reactorBackgroundColor);
        /* string timestamp = 5; */
        if (message.timestamp !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.timestamp);
        /* string reaction = 6; */
        if (message.reaction !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.reaction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.Reaction
 */
export const Reaction = new Reaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupMessages$Type extends MessageType<GroupMessages> {
    constructor() {
        super("yarsha.message.v1.GroupMessages", [
            { no: 1, name: "_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "senderId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "createdAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "updatedAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "automated", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "multimedia", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => multimediaPayload },
            { no: 10, name: "transaction", kind: "message", T: () => transactionPayload },
            { no: 11, name: "replyTo", kind: "message", T: () => replyTo },
            { no: 12, name: "reactions", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Reaction },
            { no: 13, name: "isPinned", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GroupMessages>): GroupMessages {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.Id = "";
        message.chatId = "";
        message.senderId = "";
        message.content = "";
        message.messageId = "";
        message.createdAt = "";
        message.updatedAt = "";
        message.automated = false;
        message.multimedia = [];
        message.reactions = [];
        message.isPinned = false;
        if (value !== undefined)
            reflectionMergePartial<GroupMessages>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupMessages): GroupMessages {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string _id */ 1:
                    message.Id = reader.string();
                    break;
                case /* string chatId */ 2:
                    message.chatId = reader.string();
                    break;
                case /* string senderId */ 3:
                    message.senderId = reader.string();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* string messageId */ 5:
                    message.messageId = reader.string();
                    break;
                case /* string createdAt */ 6:
                    message.createdAt = reader.string();
                    break;
                case /* string updatedAt */ 7:
                    message.updatedAt = reader.string();
                    break;
                case /* bool automated */ 8:
                    message.automated = reader.bool();
                    break;
                case /* repeated yarsha.message.v1.multimediaPayload multimedia */ 9:
                    message.multimedia.push(multimediaPayload.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional yarsha.message.v1.transactionPayload transaction */ 10:
                    message.transaction = transactionPayload.internalBinaryRead(reader, reader.uint32(), options, message.transaction);
                    break;
                case /* optional yarsha.message.v1.replyTo replyTo */ 11:
                    message.replyTo = replyTo.internalBinaryRead(reader, reader.uint32(), options, message.replyTo);
                    break;
                case /* repeated yarsha.message.v1.Reaction reactions */ 12:
                    message.reactions.push(Reaction.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool isPinned */ 13:
                    message.isPinned = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupMessages, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string _id = 1; */
        if (message.Id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.Id);
        /* string chatId = 2; */
        if (message.chatId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chatId);
        /* string senderId = 3; */
        if (message.senderId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.senderId);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* string messageId = 5; */
        if (message.messageId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.messageId);
        /* string createdAt = 6; */
        if (message.createdAt !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.createdAt);
        /* string updatedAt = 7; */
        if (message.updatedAt !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.updatedAt);
        /* bool automated = 8; */
        if (message.automated !== false)
            writer.tag(8, WireType.Varint).bool(message.automated);
        /* repeated yarsha.message.v1.multimediaPayload multimedia = 9; */
        for (let i = 0; i < message.multimedia.length; i++)
            multimediaPayload.internalBinaryWrite(message.multimedia[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional yarsha.message.v1.transactionPayload transaction = 10; */
        if (message.transaction)
            transactionPayload.internalBinaryWrite(message.transaction, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional yarsha.message.v1.replyTo replyTo = 11; */
        if (message.replyTo)
            replyTo.internalBinaryWrite(message.replyTo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* repeated yarsha.message.v1.Reaction reactions = 12; */
        for (let i = 0; i < message.reactions.length; i++)
            Reaction.internalBinaryWrite(message.reactions[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bool isPinned = 13; */
        if (message.isPinned !== false)
            writer.tag(13, WireType.Varint).bool(message.isPinned);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.GroupMessages
 */
export const GroupMessages = new GroupMessages$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactToMessageRequest$Type extends MessageType<ReactToMessageRequest> {
    constructor() {
        super("yarsha.message.v1.ReactToMessageRequest", [
            { no: 1, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reaction", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReactToMessageRequest>): ReactToMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageId = "";
        message.chatId = "";
        message.reaction = "";
        if (value !== undefined)
            reflectionMergePartial<ReactToMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactToMessageRequest): ReactToMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string messageId */ 1:
                    message.messageId = reader.string();
                    break;
                case /* string chatId */ 2:
                    message.chatId = reader.string();
                    break;
                case /* string reaction */ 3:
                    message.reaction = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactToMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string messageId = 1; */
        if (message.messageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.messageId);
        /* string chatId = 2; */
        if (message.chatId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chatId);
        /* string reaction = 3; */
        if (message.reaction !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.reaction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.ReactToMessageRequest
 */
export const ReactToMessageRequest = new ReactToMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactToMessageResponseBody$Type extends MessageType<ReactToMessageResponseBody> {
    constructor() {
        super("yarsha.message.v1.ReactToMessageResponseBody", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "SuccessMessage", kind: "scalar", jsonName: "SuccessMessage", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReactToMessageResponseBody>): ReactToMessageResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<ReactToMessageResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactToMessageResponseBody): ReactToMessageResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* optional string SuccessMessage = 2 [json_name = "SuccessMessage"];*/ 2:
                    message.successMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactToMessageResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* optional string SuccessMessage = 2 [json_name = "SuccessMessage"]; */
        if (message.successMessage !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.successMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.ReactToMessageResponseBody
 */
export const ReactToMessageResponseBody = new ReactToMessageResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactToMessageResponse$Type extends MessageType<ReactToMessageResponse> {
    constructor() {
        super("yarsha.message.v1.ReactToMessageResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => ReactToMessageResponseBody }
        ]);
    }
    create(value?: PartialMessage<ReactToMessageResponse>): ReactToMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ReactToMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactToMessageResponse): ReactToMessageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.message.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.message.v1.ReactToMessageResponseBody Response = 2 [json_name = "Response"];*/ 2:
                    message.response = ReactToMessageResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactToMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.message.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.message.v1.ReactToMessageResponseBody Response = 2 [json_name = "Response"]; */
        if (message.response)
            ReactToMessageResponseBody.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.ReactToMessageResponse
 */
export const ReactToMessageResponse = new ReactToMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PinMessageRequest$Type extends MessageType<PinMessageRequest> {
    constructor() {
        super("yarsha.message.v1.PinMessageRequest", [
            { no: 1, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PinMessageRequest>): PinMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        message.messageId = "";
        if (value !== undefined)
            reflectionMergePartial<PinMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PinMessageRequest): PinMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chatId */ 1:
                    message.chatId = reader.string();
                    break;
                case /* string messageId */ 2:
                    message.messageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PinMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chatId = 1; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* string messageId = 2; */
        if (message.messageId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.messageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.PinMessageRequest
 */
export const PinMessageRequest = new PinMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PinMessageResponse$Type extends MessageType<PinMessageResponse> {
    constructor() {
        super("yarsha.message.v1.PinMessageResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PinMessageResponse>): PinMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<PinMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PinMessageResponse): PinMessageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PinMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.PinMessageResponse
 */
export const PinMessageResponse = new PinMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnpinMessageRequest$Type extends MessageType<UnpinMessageRequest> {
    constructor() {
        super("yarsha.message.v1.UnpinMessageRequest", [
            { no: 1, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UnpinMessageRequest>): UnpinMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        message.messageId = "";
        if (value !== undefined)
            reflectionMergePartial<UnpinMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnpinMessageRequest): UnpinMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chatId */ 1:
                    message.chatId = reader.string();
                    break;
                case /* string messageId */ 2:
                    message.messageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnpinMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chatId = 1; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* string messageId = 2; */
        if (message.messageId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.messageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.UnpinMessageRequest
 */
export const UnpinMessageRequest = new UnpinMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnpinMessageResponse$Type extends MessageType<UnpinMessageResponse> {
    constructor() {
        super("yarsha.message.v1.UnpinMessageResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UnpinMessageResponse>): UnpinMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<UnpinMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnpinMessageResponse): UnpinMessageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                case /* string message */ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnpinMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        /* string message = 2; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.UnpinMessageResponse
 */
export const UnpinMessageResponse = new UnpinMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PinnedMessage$Type extends MessageType<PinnedMessage> {
    constructor() {
        super("yarsha.message.v1.PinnedMessage", [
            { no: 1, name: "_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "multimedia", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => multimediaPayload },
            { no: 6, name: "transaction", kind: "message", T: () => transactionPayload },
            { no: 7, name: "pinnedBy", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "pinnedAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PinnedMessage>): PinnedMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.Id = "";
        message.chatId = "";
        message.content = "";
        message.messageId = "";
        message.multimedia = [];
        message.pinnedBy = "";
        message.pinnedAt = "";
        if (value !== undefined)
            reflectionMergePartial<PinnedMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PinnedMessage): PinnedMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string _id */ 1:
                    message.Id = reader.string();
                    break;
                case /* string chatId */ 2:
                    message.chatId = reader.string();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* string messageId */ 4:
                    message.messageId = reader.string();
                    break;
                case /* repeated yarsha.message.v1.multimediaPayload multimedia */ 5:
                    message.multimedia.push(multimediaPayload.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional yarsha.message.v1.transactionPayload transaction */ 6:
                    message.transaction = transactionPayload.internalBinaryRead(reader, reader.uint32(), options, message.transaction);
                    break;
                case /* string pinnedBy */ 7:
                    message.pinnedBy = reader.string();
                    break;
                case /* string pinnedAt */ 8:
                    message.pinnedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PinnedMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string _id = 1; */
        if (message.Id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.Id);
        /* string chatId = 2; */
        if (message.chatId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chatId);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* string messageId = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* repeated yarsha.message.v1.multimediaPayload multimedia = 5; */
        for (let i = 0; i < message.multimedia.length; i++)
            multimediaPayload.internalBinaryWrite(message.multimedia[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional yarsha.message.v1.transactionPayload transaction = 6; */
        if (message.transaction)
            transactionPayload.internalBinaryWrite(message.transaction, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string pinnedBy = 7; */
        if (message.pinnedBy !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.pinnedBy);
        /* string pinnedAt = 8; */
        if (message.pinnedAt !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.pinnedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.message.v1.PinnedMessage
 */
export const PinnedMessage = new PinnedMessage$Type();
/**
 * @generated ServiceType for protobuf service yarsha.message.v1.MessageService
 */
export const MessageService = new ServiceType("yarsha.message.v1.MessageService", [
    { name: "SendMessage", options: {}, I: SendMessageRequest, O: SendMessageResponse },
    { name: "GetChatMessages", options: {}, I: GetChatMessagesRequest, O: GetChatMessagesResponse },
    { name: "ReactToMessage", options: {}, I: ReactToMessageRequest, O: ReactToMessageResponse },
    { name: "PinMessage", options: {}, I: PinMessageRequest, O: PinMessageResponse },
    { name: "UnpinMessage", options: {}, I: UnpinMessageRequest, O: UnpinMessageResponse }
]);
