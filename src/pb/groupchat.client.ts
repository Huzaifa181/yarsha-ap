// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "groupchat.proto" (package "yarsha.groupchat.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { GroupChatService } from "./groupchat";
import type { MarkAsSeenResponseWrapper } from "./groupchat";
import type { MarkAsSeenRequestWrapper } from "./groupchat";
import type { DeleteGroupChatResponseWrapper } from "./groupchat";
import type { DeleteGroupChatRequestWrapper } from "./groupchat";
import type { TogglePinGroupChatResponseWrapper } from "./groupchat";
import type { TogglePinGroupChatRequestWrapper } from "./groupchat";
import type { ToggleMuteGroupChatResponseWrapper } from "./groupchat";
import type { ToggleMuteGroupChatRequestWrapper } from "./groupchat";
import type { GetFriendListResponse } from "./groupchat";
import type { GetUserChatsResponse } from "./groupchat";
import type { UpdateGroupChatResponse } from "./groupchat";
import type { UpdateGroupChatRequest } from "./groupchat";
import type { TriggerGroupChatUpdateResponse } from "./groupchat";
import type { TriggerGroupChatUpdateRequest } from "./groupchat";
import type { GroupChatsStreamRequest } from "./groupchat";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { AddParticipantsResponseWrapper } from "./groupchat";
import type { AddParticipantsRequestWrapper } from "./groupchat";
import type { GetFriendsChatIdsResponse } from "./groupchat";
import type { GetFriendsChatIdsRequest } from "./groupchat";
import type { CheckIndividualChatResponseWrapper } from "./groupchat";
import type { CheckIndividualChatRequestWrapper } from "./groupchat";
import type { GetUserChatIdsResponse } from "./groupchat";
import type { GetGroupChatDetailsResponse } from "./groupchat";
import type { GetGroupChatDetailsRequest } from "./groupchat";
import type { GroupChatsResponse } from "./groupchat";
import type { GroupChatsRequest } from "./groupchat";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GroupChatResponseWrapper } from "./groupchat";
import type { GroupChatRequestWrapper } from "./groupchat";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service yarsha.groupchat.v1.GroupChatService
 */
export interface IGroupChatServiceClient {
    /**
     * @generated from protobuf rpc: CreateGroup(yarsha.groupchat.v1.GroupChatRequestWrapper) returns (yarsha.groupchat.v1.GroupChatResponseWrapper);
     */
    createGroup(input: GroupChatRequestWrapper, options?: RpcOptions): UnaryCall<GroupChatRequestWrapper, GroupChatResponseWrapper>;
    /**
     * @generated from protobuf rpc: GroupChats(yarsha.groupchat.v1.GroupChatsRequest) returns (yarsha.groupchat.v1.GroupChatsResponse);
     */
    groupChats(input: GroupChatsRequest, options?: RpcOptions): UnaryCall<GroupChatsRequest, GroupChatsResponse>;
    /**
     * @generated from protobuf rpc: GetGroupChatDetails(yarsha.groupchat.v1.GetGroupChatDetailsRequest) returns (yarsha.groupchat.v1.GetGroupChatDetailsResponse);
     */
    getGroupChatDetails(input: GetGroupChatDetailsRequest, options?: RpcOptions): UnaryCall<GetGroupChatDetailsRequest, GetGroupChatDetailsResponse>;
    /**
     * @generated from protobuf rpc: GetUserChatIds(yarsha.groupchat.v1.GroupChatsRequest) returns (yarsha.groupchat.v1.GetUserChatIdsResponse);
     */
    getUserChatIds(input: GroupChatsRequest, options?: RpcOptions): UnaryCall<GroupChatsRequest, GetUserChatIdsResponse>;
    /**
     * @generated from protobuf rpc: CheckIndividualChat(yarsha.groupchat.v1.CheckIndividualChatRequestWrapper) returns (yarsha.groupchat.v1.CheckIndividualChatResponseWrapper);
     */
    checkIndividualChat(input: CheckIndividualChatRequestWrapper, options?: RpcOptions): UnaryCall<CheckIndividualChatRequestWrapper, CheckIndividualChatResponseWrapper>;
    /**
     * @generated from protobuf rpc: GetFriendsChatIds(yarsha.groupchat.v1.GetFriendsChatIdsRequest) returns (yarsha.groupchat.v1.GetFriendsChatIdsResponse);
     */
    getFriendsChatIds(input: GetFriendsChatIdsRequest, options?: RpcOptions): UnaryCall<GetFriendsChatIdsRequest, GetFriendsChatIdsResponse>;
    /**
     * @generated from protobuf rpc: AddParticipants(yarsha.groupchat.v1.AddParticipantsRequestWrapper) returns (yarsha.groupchat.v1.AddParticipantsResponseWrapper);
     */
    addParticipants(input: AddParticipantsRequestWrapper, options?: RpcOptions): UnaryCall<AddParticipantsRequestWrapper, AddParticipantsResponseWrapper>;
    /**
     * @generated from protobuf rpc: StreamGroupChats(yarsha.groupchat.v1.GroupChatsStreamRequest) returns (stream yarsha.groupchat.v1.GroupChatsResponse);
     */
    streamGroupChats(input: GroupChatsStreamRequest, options?: RpcOptions): ServerStreamingCall<GroupChatsStreamRequest, GroupChatsResponse>;
    /**
     * @generated from protobuf rpc: TriggerGroupChatUpdate(yarsha.groupchat.v1.TriggerGroupChatUpdateRequest) returns (yarsha.groupchat.v1.TriggerGroupChatUpdateResponse);
     */
    triggerGroupChatUpdate(input: TriggerGroupChatUpdateRequest, options?: RpcOptions): UnaryCall<TriggerGroupChatUpdateRequest, TriggerGroupChatUpdateResponse>;
    /**
     * @generated from protobuf rpc: UpdateGroupChat(yarsha.groupchat.v1.UpdateGroupChatRequest) returns (yarsha.groupchat.v1.UpdateGroupChatResponse);
     */
    updateGroupChat(input: UpdateGroupChatRequest, options?: RpcOptions): UnaryCall<UpdateGroupChatRequest, UpdateGroupChatResponse>;
    /**
     * @generated from protobuf rpc: GetUserChats(yarsha.groupchat.v1.GroupChatsRequest) returns (yarsha.groupchat.v1.GetUserChatsResponse);
     */
    getUserChats(input: GroupChatsRequest, options?: RpcOptions): UnaryCall<GroupChatsRequest, GetUserChatsResponse>;
    /**
     * @generated from protobuf rpc: GetFriendList(yarsha.groupchat.v1.GroupChatsRequest) returns (yarsha.groupchat.v1.GetFriendListResponse);
     */
    getFriendList(input: GroupChatsRequest, options?: RpcOptions): UnaryCall<GroupChatsRequest, GetFriendListResponse>;
    /**
     * @generated from protobuf rpc: ToggleMuteGroupChat(yarsha.groupchat.v1.ToggleMuteGroupChatRequestWrapper) returns (yarsha.groupchat.v1.ToggleMuteGroupChatResponseWrapper);
     */
    toggleMuteGroupChat(input: ToggleMuteGroupChatRequestWrapper, options?: RpcOptions): UnaryCall<ToggleMuteGroupChatRequestWrapper, ToggleMuteGroupChatResponseWrapper>;
    /**
     * @generated from protobuf rpc: TogglePinGroupChat(yarsha.groupchat.v1.TogglePinGroupChatRequestWrapper) returns (yarsha.groupchat.v1.TogglePinGroupChatResponseWrapper);
     */
    togglePinGroupChat(input: TogglePinGroupChatRequestWrapper, options?: RpcOptions): UnaryCall<TogglePinGroupChatRequestWrapper, TogglePinGroupChatResponseWrapper>;
    /**
     * @generated from protobuf rpc: DeleteGroupChat(yarsha.groupchat.v1.DeleteGroupChatRequestWrapper) returns (yarsha.groupchat.v1.DeleteGroupChatResponseWrapper);
     */
    deleteGroupChat(input: DeleteGroupChatRequestWrapper, options?: RpcOptions): UnaryCall<DeleteGroupChatRequestWrapper, DeleteGroupChatResponseWrapper>;
    /**
     * @generated from protobuf rpc: MarkAsSeen(yarsha.groupchat.v1.MarkAsSeenRequestWrapper) returns (yarsha.groupchat.v1.MarkAsSeenResponseWrapper);
     */
    markAsSeen(input: MarkAsSeenRequestWrapper, options?: RpcOptions): UnaryCall<MarkAsSeenRequestWrapper, MarkAsSeenResponseWrapper>;
}
/**
 * @generated from protobuf service yarsha.groupchat.v1.GroupChatService
 */
export class GroupChatServiceClient implements IGroupChatServiceClient, ServiceInfo {
    typeName = GroupChatService.typeName;
    methods = GroupChatService.methods;
    options = GroupChatService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateGroup(yarsha.groupchat.v1.GroupChatRequestWrapper) returns (yarsha.groupchat.v1.GroupChatResponseWrapper);
     */
    createGroup(input: GroupChatRequestWrapper, options?: RpcOptions): UnaryCall<GroupChatRequestWrapper, GroupChatResponseWrapper> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GroupChatRequestWrapper, GroupChatResponseWrapper>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GroupChats(yarsha.groupchat.v1.GroupChatsRequest) returns (yarsha.groupchat.v1.GroupChatsResponse);
     */
    groupChats(input: GroupChatsRequest, options?: RpcOptions): UnaryCall<GroupChatsRequest, GroupChatsResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GroupChatsRequest, GroupChatsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetGroupChatDetails(yarsha.groupchat.v1.GetGroupChatDetailsRequest) returns (yarsha.groupchat.v1.GetGroupChatDetailsResponse);
     */
    getGroupChatDetails(input: GetGroupChatDetailsRequest, options?: RpcOptions): UnaryCall<GetGroupChatDetailsRequest, GetGroupChatDetailsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetGroupChatDetailsRequest, GetGroupChatDetailsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUserChatIds(yarsha.groupchat.v1.GroupChatsRequest) returns (yarsha.groupchat.v1.GetUserChatIdsResponse);
     */
    getUserChatIds(input: GroupChatsRequest, options?: RpcOptions): UnaryCall<GroupChatsRequest, GetUserChatIdsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GroupChatsRequest, GetUserChatIdsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CheckIndividualChat(yarsha.groupchat.v1.CheckIndividualChatRequestWrapper) returns (yarsha.groupchat.v1.CheckIndividualChatResponseWrapper);
     */
    checkIndividualChat(input: CheckIndividualChatRequestWrapper, options?: RpcOptions): UnaryCall<CheckIndividualChatRequestWrapper, CheckIndividualChatResponseWrapper> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<CheckIndividualChatRequestWrapper, CheckIndividualChatResponseWrapper>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetFriendsChatIds(yarsha.groupchat.v1.GetFriendsChatIdsRequest) returns (yarsha.groupchat.v1.GetFriendsChatIdsResponse);
     */
    getFriendsChatIds(input: GetFriendsChatIdsRequest, options?: RpcOptions): UnaryCall<GetFriendsChatIdsRequest, GetFriendsChatIdsResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetFriendsChatIdsRequest, GetFriendsChatIdsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddParticipants(yarsha.groupchat.v1.AddParticipantsRequestWrapper) returns (yarsha.groupchat.v1.AddParticipantsResponseWrapper);
     */
    addParticipants(input: AddParticipantsRequestWrapper, options?: RpcOptions): UnaryCall<AddParticipantsRequestWrapper, AddParticipantsResponseWrapper> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddParticipantsRequestWrapper, AddParticipantsResponseWrapper>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StreamGroupChats(yarsha.groupchat.v1.GroupChatsStreamRequest) returns (stream yarsha.groupchat.v1.GroupChatsResponse);
     */
    streamGroupChats(input: GroupChatsStreamRequest, options?: RpcOptions): ServerStreamingCall<GroupChatsStreamRequest, GroupChatsResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<GroupChatsStreamRequest, GroupChatsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TriggerGroupChatUpdate(yarsha.groupchat.v1.TriggerGroupChatUpdateRequest) returns (yarsha.groupchat.v1.TriggerGroupChatUpdateResponse);
     */
    triggerGroupChatUpdate(input: TriggerGroupChatUpdateRequest, options?: RpcOptions): UnaryCall<TriggerGroupChatUpdateRequest, TriggerGroupChatUpdateResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<TriggerGroupChatUpdateRequest, TriggerGroupChatUpdateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateGroupChat(yarsha.groupchat.v1.UpdateGroupChatRequest) returns (yarsha.groupchat.v1.UpdateGroupChatResponse);
     */
    updateGroupChat(input: UpdateGroupChatRequest, options?: RpcOptions): UnaryCall<UpdateGroupChatRequest, UpdateGroupChatResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateGroupChatRequest, UpdateGroupChatResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUserChats(yarsha.groupchat.v1.GroupChatsRequest) returns (yarsha.groupchat.v1.GetUserChatsResponse);
     */
    getUserChats(input: GroupChatsRequest, options?: RpcOptions): UnaryCall<GroupChatsRequest, GetUserChatsResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<GroupChatsRequest, GetUserChatsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetFriendList(yarsha.groupchat.v1.GroupChatsRequest) returns (yarsha.groupchat.v1.GetFriendListResponse);
     */
    getFriendList(input: GroupChatsRequest, options?: RpcOptions): UnaryCall<GroupChatsRequest, GetFriendListResponse> {
        const method = this.methods[11], opt = this._transport.mergeOptions(options);
        return stackIntercept<GroupChatsRequest, GetFriendListResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ToggleMuteGroupChat(yarsha.groupchat.v1.ToggleMuteGroupChatRequestWrapper) returns (yarsha.groupchat.v1.ToggleMuteGroupChatResponseWrapper);
     */
    toggleMuteGroupChat(input: ToggleMuteGroupChatRequestWrapper, options?: RpcOptions): UnaryCall<ToggleMuteGroupChatRequestWrapper, ToggleMuteGroupChatResponseWrapper> {
        const method = this.methods[12], opt = this._transport.mergeOptions(options);
        return stackIntercept<ToggleMuteGroupChatRequestWrapper, ToggleMuteGroupChatResponseWrapper>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TogglePinGroupChat(yarsha.groupchat.v1.TogglePinGroupChatRequestWrapper) returns (yarsha.groupchat.v1.TogglePinGroupChatResponseWrapper);
     */
    togglePinGroupChat(input: TogglePinGroupChatRequestWrapper, options?: RpcOptions): UnaryCall<TogglePinGroupChatRequestWrapper, TogglePinGroupChatResponseWrapper> {
        const method = this.methods[13], opt = this._transport.mergeOptions(options);
        return stackIntercept<TogglePinGroupChatRequestWrapper, TogglePinGroupChatResponseWrapper>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteGroupChat(yarsha.groupchat.v1.DeleteGroupChatRequestWrapper) returns (yarsha.groupchat.v1.DeleteGroupChatResponseWrapper);
     */
    deleteGroupChat(input: DeleteGroupChatRequestWrapper, options?: RpcOptions): UnaryCall<DeleteGroupChatRequestWrapper, DeleteGroupChatResponseWrapper> {
        const method = this.methods[14], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteGroupChatRequestWrapper, DeleteGroupChatResponseWrapper>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: MarkAsSeen(yarsha.groupchat.v1.MarkAsSeenRequestWrapper) returns (yarsha.groupchat.v1.MarkAsSeenResponseWrapper);
     */
    markAsSeen(input: MarkAsSeenRequestWrapper, options?: RpcOptions): UnaryCall<MarkAsSeenRequestWrapper, MarkAsSeenResponseWrapper> {
        const method = this.methods[15], opt = this._transport.mergeOptions(options);
        return stackIntercept<MarkAsSeenRequestWrapper, MarkAsSeenResponseWrapper>("unary", this._transport, method, opt, input);
    }
}
