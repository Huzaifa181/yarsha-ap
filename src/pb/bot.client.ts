// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "bot.proto" (package "yarsha.bot.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { BotService } from "./bot";
import type { SubmitCompletedTransactionResponse } from "./bot";
import type { SubmitCompletedTransactionRequest } from "./bot";
import type { GetUserPublicKeyResponse } from "./bot";
import type { GetUserPublicKeyRequest } from "./bot";
import type { GetBotResponse } from "./bot";
import type { GetBotRequest } from "./bot";
import type { GetBotCommandsResponse } from "./bot";
import type { GetBotCommandsRequest } from "./bot";
import type { VerifyAccessTokenResponse } from "./bot";
import type { VerifyAccessTokenRequest } from "./bot";
import type { SendMessageResponse } from "./bot";
import type { SendMessageRequest } from "./bot";
import type { ReceiveMessageResponse } from "./bot";
import type { ReceiveMessageRequest } from "./bot";
import type { GetBotsResponse } from "./bot";
import type { GetBotsRequest } from "./bot";
import type { RegisterBotCommandResponse } from "./bot";
import type { RegisterBotCommandRequest } from "./bot";
import type { IsBotResponse } from "./bot";
import type { IsBotRequest } from "./bot";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { CreateBotResponse } from "./bot";
import type { CreateBotRequest } from "./bot";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service yarsha.bot.v1.BotService
 */
export interface IBotServiceClient {
    /**
     * @generated from protobuf rpc: CreateBot(yarsha.bot.v1.CreateBotRequest) returns (yarsha.bot.v1.CreateBotResponse);
     */
    createBot(input: CreateBotRequest, options?: RpcOptions): UnaryCall<CreateBotRequest, CreateBotResponse>;
    /**
     * @generated from protobuf rpc: IsBot(yarsha.bot.v1.IsBotRequest) returns (yarsha.bot.v1.IsBotResponse);
     */
    isBot(input: IsBotRequest, options?: RpcOptions): UnaryCall<IsBotRequest, IsBotResponse>;
    /**
     * @generated from protobuf rpc: RegisterBotCommand(yarsha.bot.v1.RegisterBotCommandRequest) returns (yarsha.bot.v1.RegisterBotCommandResponse);
     */
    registerBotCommand(input: RegisterBotCommandRequest, options?: RpcOptions): UnaryCall<RegisterBotCommandRequest, RegisterBotCommandResponse>;
    /**
     * @generated from protobuf rpc: GetBots(yarsha.bot.v1.GetBotsRequest) returns (yarsha.bot.v1.GetBotsResponse);
     */
    getBots(input: GetBotsRequest, options?: RpcOptions): UnaryCall<GetBotsRequest, GetBotsResponse>;
    /**
     * @generated from protobuf rpc: ReceiveMessage(yarsha.bot.v1.ReceiveMessageRequest) returns (yarsha.bot.v1.ReceiveMessageResponse);
     */
    receiveMessage(input: ReceiveMessageRequest, options?: RpcOptions): UnaryCall<ReceiveMessageRequest, ReceiveMessageResponse>;
    /**
     * @generated from protobuf rpc: SendMessage(yarsha.bot.v1.SendMessageRequest) returns (yarsha.bot.v1.SendMessageResponse);
     */
    sendMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, SendMessageResponse>;
    /**
     * @generated from protobuf rpc: VerifyAccessToken(yarsha.bot.v1.VerifyAccessTokenRequest) returns (yarsha.bot.v1.VerifyAccessTokenResponse);
     */
    verifyAccessToken(input: VerifyAccessTokenRequest, options?: RpcOptions): UnaryCall<VerifyAccessTokenRequest, VerifyAccessTokenResponse>;
    /**
     * @generated from protobuf rpc: GetBotCommands(yarsha.bot.v1.GetBotCommandsRequest) returns (yarsha.bot.v1.GetBotCommandsResponse);
     */
    getBotCommands(input: GetBotCommandsRequest, options?: RpcOptions): UnaryCall<GetBotCommandsRequest, GetBotCommandsResponse>;
    /**
     * @generated from protobuf rpc: GetBot(yarsha.bot.v1.GetBotRequest) returns (yarsha.bot.v1.GetBotResponse);
     */
    getBot(input: GetBotRequest, options?: RpcOptions): UnaryCall<GetBotRequest, GetBotResponse>;
    /**
     * @generated from protobuf rpc: GetUserPublicKey(yarsha.bot.v1.GetUserPublicKeyRequest) returns (yarsha.bot.v1.GetUserPublicKeyResponse);
     */
    getUserPublicKey(input: GetUserPublicKeyRequest, options?: RpcOptions): UnaryCall<GetUserPublicKeyRequest, GetUserPublicKeyResponse>;
    /**
     * @generated from protobuf rpc: SubmitCompletedTransaction(yarsha.bot.v1.SubmitCompletedTransactionRequest) returns (yarsha.bot.v1.SubmitCompletedTransactionResponse);
     */
    submitCompletedTransaction(input: SubmitCompletedTransactionRequest, options?: RpcOptions): UnaryCall<SubmitCompletedTransactionRequest, SubmitCompletedTransactionResponse>;
}
/**
 * @generated from protobuf service yarsha.bot.v1.BotService
 */
export class BotServiceClient implements IBotServiceClient, ServiceInfo {
    typeName = BotService.typeName;
    methods = BotService.methods;
    options = BotService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: CreateBot(yarsha.bot.v1.CreateBotRequest) returns (yarsha.bot.v1.CreateBotResponse);
     */
    createBot(input: CreateBotRequest, options?: RpcOptions): UnaryCall<CreateBotRequest, CreateBotResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateBotRequest, CreateBotResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: IsBot(yarsha.bot.v1.IsBotRequest) returns (yarsha.bot.v1.IsBotResponse);
     */
    isBot(input: IsBotRequest, options?: RpcOptions): UnaryCall<IsBotRequest, IsBotResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<IsBotRequest, IsBotResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RegisterBotCommand(yarsha.bot.v1.RegisterBotCommandRequest) returns (yarsha.bot.v1.RegisterBotCommandResponse);
     */
    registerBotCommand(input: RegisterBotCommandRequest, options?: RpcOptions): UnaryCall<RegisterBotCommandRequest, RegisterBotCommandResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterBotCommandRequest, RegisterBotCommandResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBots(yarsha.bot.v1.GetBotsRequest) returns (yarsha.bot.v1.GetBotsResponse);
     */
    getBots(input: GetBotsRequest, options?: RpcOptions): UnaryCall<GetBotsRequest, GetBotsResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBotsRequest, GetBotsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReceiveMessage(yarsha.bot.v1.ReceiveMessageRequest) returns (yarsha.bot.v1.ReceiveMessageResponse);
     */
    receiveMessage(input: ReceiveMessageRequest, options?: RpcOptions): UnaryCall<ReceiveMessageRequest, ReceiveMessageResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReceiveMessageRequest, ReceiveMessageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendMessage(yarsha.bot.v1.SendMessageRequest) returns (yarsha.bot.v1.SendMessageResponse);
     */
    sendMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, SendMessageResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendMessageRequest, SendMessageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: VerifyAccessToken(yarsha.bot.v1.VerifyAccessTokenRequest) returns (yarsha.bot.v1.VerifyAccessTokenResponse);
     */
    verifyAccessToken(input: VerifyAccessTokenRequest, options?: RpcOptions): UnaryCall<VerifyAccessTokenRequest, VerifyAccessTokenResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<VerifyAccessTokenRequest, VerifyAccessTokenResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBotCommands(yarsha.bot.v1.GetBotCommandsRequest) returns (yarsha.bot.v1.GetBotCommandsResponse);
     */
    getBotCommands(input: GetBotCommandsRequest, options?: RpcOptions): UnaryCall<GetBotCommandsRequest, GetBotCommandsResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBotCommandsRequest, GetBotCommandsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetBot(yarsha.bot.v1.GetBotRequest) returns (yarsha.bot.v1.GetBotResponse);
     */
    getBot(input: GetBotRequest, options?: RpcOptions): UnaryCall<GetBotRequest, GetBotResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetBotRequest, GetBotResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetUserPublicKey(yarsha.bot.v1.GetUserPublicKeyRequest) returns (yarsha.bot.v1.GetUserPublicKeyResponse);
     */
    getUserPublicKey(input: GetUserPublicKeyRequest, options?: RpcOptions): UnaryCall<GetUserPublicKeyRequest, GetUserPublicKeyResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetUserPublicKeyRequest, GetUserPublicKeyResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SubmitCompletedTransaction(yarsha.bot.v1.SubmitCompletedTransactionRequest) returns (yarsha.bot.v1.SubmitCompletedTransactionResponse);
     */
    submitCompletedTransaction(input: SubmitCompletedTransactionRequest, options?: RpcOptions): UnaryCall<SubmitCompletedTransactionRequest, SubmitCompletedTransactionResponse> {
        const method = this.methods[10], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubmitCompletedTransactionRequest, SubmitCompletedTransactionResponse>("unary", this._transport, method, opt, input);
    }
}
