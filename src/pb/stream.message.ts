// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "stream.proto" (package "socketmanager", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message socketmanager.SubscribeRequest
 */
export interface SubscribeRequest {
    /**
     * @generated from protobuf field: string uniqueDeviceId = 1;
     */
    uniqueDeviceId: string;
}
/**
 * @generated from protobuf message socketmanager.SubscribeChatRequest
 */
export interface SubscribeChatRequest {
    /**
     * @generated from protobuf field: string chatId = 1;
     */
    chatId: string;
}
/**
 * @generated from protobuf message socketmanager.ChatEvent
 */
export interface ChatEvent {
    /**
     * @generated from protobuf field: socketmanager.MessagePayload message = 1;
     */
    message?: MessagePayload;
    /**
     * @generated from protobuf field: optional socketmanager.ReactionPayload reaction = 2;
     */
    reaction?: ReactionPayload;
    /**
     * @generated from protobuf field: optional socketmanager.pinnedPayload pinnedMessage = 3;
     */
    pinnedMessage?: pinnedPayload;
    /**
     * @generated from protobuf field: optional socketmanager.pinnedPayload unpinnedMessage = 4;
     */
    unpinnedMessage?: pinnedPayload;
}
/**
 * @generated from protobuf message socketmanager.StreamEvent
 */
export interface StreamEvent {
    /**
     * @generated from protobuf field: string type = 1;
     */
    type: string;
    /**
     * @generated from protobuf oneof: payload
     */
    payload: {
        oneofKind: "message";
        /**
         * @generated from protobuf field: socketmanager.MessagePayload message = 2;
         */
        message: MessagePayload;
    } | {
        oneofKind: "groupCreated";
        /**
         * @generated from protobuf field: socketmanager.GroupChatCreatedPayload groupCreated = 3;
         */
        groupCreated: GroupChatCreatedPayload;
    } | {
        oneofKind: "participantJoined";
        /**
         * @generated from protobuf field: socketmanager.ParticipantJoinedPayload participantJoined = 4;
         */
        participantJoined: ParticipantJoinedPayload;
    } | {
        oneofKind: "status";
        /**
         * @generated from protobuf field: socketmanager.StatusPayload status = 5;
         */
        status: StatusPayload;
    } | {
        oneofKind: "reaction";
        /**
         * @generated from protobuf field: socketmanager.ReactionPayload reaction = 6;
         */
        reaction: ReactionPayload;
    } | {
        oneofKind: "pinnedMessage";
        /**
         * @generated from protobuf field: socketmanager.pinnedPayload pinnedMessage = 7;
         */
        pinnedMessage: pinnedPayload;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message socketmanager.MessagePayload
 */
export interface MessagePayload {
    /**
     * @generated from protobuf field: string senderId = 1;
     */
    senderId: string;
    /**
     * @generated from protobuf field: string chatId = 2;
     */
    chatId: string;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: string messageId = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string senderName = 5;
     */
    senderName: string;
    /**
     * @generated from protobuf field: string timestamp = 6;
     */
    timestamp: string;
    /**
     * @generated from protobuf field: bool automated = 7;
     */
    automated: boolean;
    /**
     * @generated from protobuf field: string createdAt = 8;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updatedAt = 9;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string _id = 10;
     */
    Id: string;
    /**
     * @generated from protobuf field: int32 _v = 11;
     */
    V: number;
    /**
     * @generated from protobuf field: repeated socketmanager.multimediaPayload multimedia = 12;
     */
    multimedia: multimediaPayload[];
    /**
     * @generated from protobuf field: optional socketmanager.transactionPayload transaction = 13;
     */
    transaction?: transactionPayload;
    /**
     * @generated from protobuf field: optional socketmanager.replyTo replyTo = 14;
     */
    replyTo?: replyTo;
    /**
     * @generated from protobuf field: optional string preparedTransaction = 15;
     */
    preparedTransaction?: string;
}
/**
 * @generated from protobuf message socketmanager.GroupChatCreatedPayload
 */
export interface GroupChatCreatedPayload {
    /**
     * @generated from protobuf field: string GroupId = 1 [json_name = "GroupId"];
     */
    groupId: string;
    /**
     * @generated from protobuf field: string GroupName = 2 [json_name = "GroupName"];
     */
    groupName: string;
    /**
     * @generated from protobuf field: repeated string ParticipantsId = 3 [json_name = "ParticipantsId"];
     */
    participantsId: string[];
    /**
     * @generated from protobuf field: string GroupIcon = 4 [json_name = "GroupIcon"];
     */
    groupIcon: string;
    /**
     * @generated from protobuf field: string CreatorId = 5 [json_name = "CreatorId"];
     */
    creatorId: string;
}
/**
 * @generated from protobuf message socketmanager.ParticipantJoinedPayload
 */
export interface ParticipantJoinedPayload {
    /**
     * @generated from protobuf field: string GroupId = 1 [json_name = "GroupId"];
     */
    groupId: string;
    /**
     * @generated from protobuf field: repeated string AddedParticipants = 2 [json_name = "AddedParticipants"];
     */
    addedParticipants: string[];
    /**
     * @generated from protobuf field: socketmanager.AutomatedMessage automatedMessage = 3;
     */
    automatedMessage?: AutomatedMessage;
}
/**
 * @generated from protobuf message socketmanager.StatusPayload
 */
export interface StatusPayload {
    /**
     * @generated from protobuf field: string userId = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string status = 2;
     */
    status: string;
    /**
     * @generated from protobuf field: string lastActive = 3;
     */
    lastActive: string;
}
/**
 * @generated from protobuf message socketmanager.ReactionPayload
 */
export interface ReactionPayload {
    /**
     * @generated from protobuf field: string chatId = 1;
     */
    chatId: string;
    /**
     * @generated from protobuf field: string reactorId = 2;
     */
    reactorId: string;
    /**
     * @generated from protobuf field: string reactorName = 3;
     */
    reactorName: string;
    /**
     * @generated from protobuf field: string reactorProfilePicture = 4;
     */
    reactorProfilePicture: string;
    /**
     * @generated from protobuf field: string reactorBackgroundColor = 5;
     */
    reactorBackgroundColor: string;
    /**
     * @generated from protobuf field: string timestamp = 6;
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string reaction = 7;
     */
    reaction: string;
    /**
     * @generated from protobuf field: string messageId = 8;
     */
    messageId: string;
}
/**
 * @generated from protobuf message socketmanager.SendMessageRequest
 */
export interface SendMessageRequest {
    /**
     * @generated from protobuf field: string senderId = 1;
     */
    senderId: string;
    /**
     * @generated from protobuf field: string chatId = 2;
     */
    chatId: string;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: string messageId = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: string senderName = 5;
     */
    senderName: string;
    /**
     * @generated from protobuf field: string timestamp = 6;
     */
    timestamp: string;
    /**
     * @generated from protobuf field: bool automated = 7;
     */
    automated: boolean;
    /**
     * @generated from protobuf field: string createdAt = 8;
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updatedAt = 9;
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string _id = 10;
     */
    Id: string;
    /**
     * @generated from protobuf field: int32 _v = 11;
     */
    V: number;
    /**
     * @generated from protobuf field: repeated socketmanager.multimediaPayload multimedia = 12;
     */
    multimedia: multimediaPayload[];
    /**
     * @generated from protobuf field: optional socketmanager.transactionPayload transaction = 13;
     */
    transaction?: transactionPayload;
    /**
     * @generated from protobuf field: optional socketmanager.replyTo replyTo = 14;
     */
    replyTo?: replyTo;
    /**
     * @generated from protobuf field: optional string preparedTransaction = 15;
     */
    preparedTransaction?: string;
}
/**
 * @generated from protobuf message socketmanager.replyTo
 */
export interface replyTo {
    /**
     * @generated from protobuf field: string replyToId = 1;
     */
    replyToId: string;
    /**
     * @generated from protobuf field: string replyToSenderName = 2;
     */
    replyToSenderName: string;
    /**
     * @generated from protobuf field: string replyTocontent = 3;
     */
    replyTocontent: string;
}
/**
 * @generated from protobuf message socketmanager.multimediaPayload
 */
export interface multimediaPayload {
    /**
     * @generated from protobuf field: string filePath = 1;
     */
    filePath: string;
    /**
     * @generated from protobuf field: string signedUrl = 2;
     */
    signedUrl: string;
    /**
     * @generated from protobuf field: string expirationTime = 3;
     */
    expirationTime: string;
    /**
     * @generated from protobuf field: string mimeType = 4;
     */
    mimeType: string;
}
/**
 * @generated from protobuf message socketmanager.transactionPayload
 */
export interface transactionPayload {
    /**
     * @generated from protobuf field: string amount = 1;
     */
    amount: string;
    /**
     * @generated from protobuf field: string toWallet = 2;
     */
    toWallet: string;
    /**
     * @generated from protobuf field: string fromWallet = 3;
     */
    fromWallet: string;
    /**
     * @generated from protobuf field: string signature = 4;
     */
    signature: string;
    /**
     * @generated from protobuf field: string senderId = 5;
     */
    senderId: string;
    /**
     * @generated from protobuf field: string timestamp = 6;
     */
    timestamp: string;
}
/**
 * @generated from protobuf message socketmanager.SendMessageResponse
 */
export interface SendMessageResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message socketmanager.GroupChatCreatedRequest
 */
export interface GroupChatCreatedRequest {
    /**
     * @generated from protobuf field: string GroupId = 1 [json_name = "GroupId"];
     */
    groupId: string;
    /**
     * @generated from protobuf field: string GroupName = 2 [json_name = "GroupName"];
     */
    groupName: string;
    /**
     * @generated from protobuf field: repeated string ParticipantsId = 3 [json_name = "ParticipantsId"];
     */
    participantsId: string[];
    /**
     * @generated from protobuf field: string GroupIcon = 4 [json_name = "GroupIcon"];
     */
    groupIcon: string;
    /**
     * @generated from protobuf field: string CreatorId = 5 [json_name = "CreatorId"];
     */
    creatorId: string;
}
/**
 * @generated from protobuf message socketmanager.GroupChatCreatedResponse
 */
export interface GroupChatCreatedResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message socketmanager.AutomatedMessage
 */
export interface AutomatedMessage {
    /**
     * @generated from protobuf field: string chatId = 1;
     */
    chatId: string;
    /**
     * @generated from protobuf field: string senderId = 2;
     */
    senderId: string;
    /**
     * @generated from protobuf field: string senderName = 3;
     */
    senderName: string;
    /**
     * @generated from protobuf field: string content = 4;
     */
    content: string;
    /**
     * @generated from protobuf field: bool automated = 5;
     */
    automated: boolean;
}
/**
 * @generated from protobuf message socketmanager.ParticipantJoinedRequest
 */
export interface ParticipantJoinedRequest {
    /**
     * @generated from protobuf field: string GroupId = 1 [json_name = "GroupId"];
     */
    groupId: string;
    /**
     * @generated from protobuf field: repeated string AddedParticipants = 2 [json_name = "AddedParticipants"];
     */
    addedParticipants: string[];
    /**
     * @generated from protobuf field: socketmanager.AutomatedMessage AutomatedMessage = 3 [json_name = "AutomatedMessage"];
     */
    automatedMessage?: AutomatedMessage;
}
/**
 * @generated from protobuf message socketmanager.ParticipantJoinedResponse
 */
export interface ParticipantJoinedResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message socketmanager.ReactionRequest
 */
export interface ReactionRequest {
    /**
     * @generated from protobuf field: repeated string participantsId = 1;
     */
    participantsId: string[];
    /**
     * @generated from protobuf field: socketmanager.data payload = 2;
     */
    payload?: data;
}
/**
 * @generated from protobuf message socketmanager.data
 */
export interface data {
    /**
     * @generated from protobuf field: string chatId = 1;
     */
    chatId: string;
    /**
     * @generated from protobuf field: string reactorId = 2;
     */
    reactorId: string;
    /**
     * @generated from protobuf field: string reactorName = 3;
     */
    reactorName: string;
    /**
     * @generated from protobuf field: string reactorProfilePicture = 4;
     */
    reactorProfilePicture: string;
    /**
     * @generated from protobuf field: string reactorBackgroundColor = 5;
     */
    reactorBackgroundColor: string;
    /**
     * @generated from protobuf field: string timestamp = 6;
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string reaction = 7;
     */
    reaction: string;
    /**
     * @generated from protobuf field: string messageId = 8;
     */
    messageId: string;
}
/**
 * @generated from protobuf message socketmanager.ReactionResponse
 */
export interface ReactionResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message socketmanager.pinnedPayload
 */
export interface pinnedPayload {
    /**
     * @generated from protobuf field: string _id = 1;
     */
    Id: string;
    /**
     * @generated from protobuf field: string chatId = 2;
     */
    chatId: string;
    /**
     * @generated from protobuf field: string content = 3;
     */
    content: string;
    /**
     * @generated from protobuf field: string messageId = 4;
     */
    messageId: string;
    /**
     * @generated from protobuf field: repeated socketmanager.multimediaPayload multimedia = 5;
     */
    multimedia: multimediaPayload[];
    /**
     * @generated from protobuf field: optional socketmanager.transactionPayload transaction = 6;
     */
    transaction?: transactionPayload;
    /**
     * @generated from protobuf field: string pinnedBy = 7;
     */
    pinnedBy: string;
    /**
     * @generated from protobuf field: string pinnedAt = 8;
     */
    pinnedAt: string;
    /**
     * @generated from protobuf field: bool isPinned = 9;
     */
    isPinned: boolean;
}
/**
 * @generated from protobuf message socketmanager.PinnedMessageEventRequest
 */
export interface PinnedMessageEventRequest {
    /**
     * @generated from protobuf field: socketmanager.pinnedPayload payload = 1;
     */
    payload?: pinnedPayload;
}
/**
 * @generated from protobuf message socketmanager.PinnedMessageEventResponse
 */
export interface PinnedMessageEventResponse {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeRequest$Type extends MessageType<SubscribeRequest> {
    constructor() {
        super("socketmanager.SubscribeRequest", [
            { no: 1, name: "uniqueDeviceId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubscribeRequest>): SubscribeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uniqueDeviceId = "";
        if (value !== undefined)
            reflectionMergePartial<SubscribeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeRequest): SubscribeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uniqueDeviceId */ 1:
                    message.uniqueDeviceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uniqueDeviceId = 1; */
        if (message.uniqueDeviceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uniqueDeviceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.SubscribeRequest
 */
export const SubscribeRequest = new SubscribeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeChatRequest$Type extends MessageType<SubscribeChatRequest> {
    constructor() {
        super("socketmanager.SubscribeChatRequest", [
            { no: 1, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubscribeChatRequest>): SubscribeChatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        if (value !== undefined)
            reflectionMergePartial<SubscribeChatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeChatRequest): SubscribeChatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chatId */ 1:
                    message.chatId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeChatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chatId = 1; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.SubscribeChatRequest
 */
export const SubscribeChatRequest = new SubscribeChatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatEvent$Type extends MessageType<ChatEvent> {
    constructor() {
        super("socketmanager.ChatEvent", [
            { no: 1, name: "message", kind: "message", T: () => MessagePayload },
            { no: 2, name: "reaction", kind: "message", T: () => ReactionPayload },
            { no: 3, name: "pinnedMessage", kind: "message", T: () => pinnedPayload },
            { no: 4, name: "unpinnedMessage", kind: "message", T: () => pinnedPayload }
        ]);
    }
    create(value?: PartialMessage<ChatEvent>): ChatEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ChatEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatEvent): ChatEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketmanager.MessagePayload message */ 1:
                    message.message = MessagePayload.internalBinaryRead(reader, reader.uint32(), options, message.message);
                    break;
                case /* optional socketmanager.ReactionPayload reaction */ 2:
                    message.reaction = ReactionPayload.internalBinaryRead(reader, reader.uint32(), options, message.reaction);
                    break;
                case /* optional socketmanager.pinnedPayload pinnedMessage */ 3:
                    message.pinnedMessage = pinnedPayload.internalBinaryRead(reader, reader.uint32(), options, message.pinnedMessage);
                    break;
                case /* optional socketmanager.pinnedPayload unpinnedMessage */ 4:
                    message.unpinnedMessage = pinnedPayload.internalBinaryRead(reader, reader.uint32(), options, message.unpinnedMessage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketmanager.MessagePayload message = 1; */
        if (message.message)
            MessagePayload.internalBinaryWrite(message.message, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional socketmanager.ReactionPayload reaction = 2; */
        if (message.reaction)
            ReactionPayload.internalBinaryWrite(message.reaction, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional socketmanager.pinnedPayload pinnedMessage = 3; */
        if (message.pinnedMessage)
            pinnedPayload.internalBinaryWrite(message.pinnedMessage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional socketmanager.pinnedPayload unpinnedMessage = 4; */
        if (message.unpinnedMessage)
            pinnedPayload.internalBinaryWrite(message.unpinnedMessage, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.ChatEvent
 */
export const ChatEvent = new ChatEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamEvent$Type extends MessageType<StreamEvent> {
    constructor() {
        super("socketmanager.StreamEvent", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "message", kind: "message", oneof: "payload", T: () => MessagePayload },
            { no: 3, name: "groupCreated", kind: "message", oneof: "payload", T: () => GroupChatCreatedPayload },
            { no: 4, name: "participantJoined", kind: "message", oneof: "payload", T: () => ParticipantJoinedPayload },
            { no: 5, name: "status", kind: "message", oneof: "payload", T: () => StatusPayload },
            { no: 6, name: "reaction", kind: "message", oneof: "payload", T: () => ReactionPayload },
            { no: 7, name: "pinnedMessage", kind: "message", oneof: "payload", T: () => pinnedPayload }
        ]);
    }
    create(value?: PartialMessage<StreamEvent>): StreamEvent {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.payload = { oneofKind: undefined };
        if (value !== undefined)
            reflectionMergePartial<StreamEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamEvent): StreamEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* socketmanager.MessagePayload message */ 2:
                    message.payload = {
                        oneofKind: "message",
                        message: MessagePayload.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).message)
                    };
                    break;
                case /* socketmanager.GroupChatCreatedPayload groupCreated */ 3:
                    message.payload = {
                        oneofKind: "groupCreated",
                        groupCreated: GroupChatCreatedPayload.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).groupCreated)
                    };
                    break;
                case /* socketmanager.ParticipantJoinedPayload participantJoined */ 4:
                    message.payload = {
                        oneofKind: "participantJoined",
                        participantJoined: ParticipantJoinedPayload.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).participantJoined)
                    };
                    break;
                case /* socketmanager.StatusPayload status */ 5:
                    message.payload = {
                        oneofKind: "status",
                        status: StatusPayload.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).status)
                    };
                    break;
                case /* socketmanager.ReactionPayload reaction */ 6:
                    message.payload = {
                        oneofKind: "reaction",
                        reaction: ReactionPayload.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).reaction)
                    };
                    break;
                case /* socketmanager.pinnedPayload pinnedMessage */ 7:
                    message.payload = {
                        oneofKind: "pinnedMessage",
                        pinnedMessage: pinnedPayload.internalBinaryRead(reader, reader.uint32(), options, (message.payload as any).pinnedMessage)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* socketmanager.MessagePayload message = 2; */
        if (message.payload.oneofKind === "message")
            MessagePayload.internalBinaryWrite(message.payload.message, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* socketmanager.GroupChatCreatedPayload groupCreated = 3; */
        if (message.payload.oneofKind === "groupCreated")
            GroupChatCreatedPayload.internalBinaryWrite(message.payload.groupCreated, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* socketmanager.ParticipantJoinedPayload participantJoined = 4; */
        if (message.payload.oneofKind === "participantJoined")
            ParticipantJoinedPayload.internalBinaryWrite(message.payload.participantJoined, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* socketmanager.StatusPayload status = 5; */
        if (message.payload.oneofKind === "status")
            StatusPayload.internalBinaryWrite(message.payload.status, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* socketmanager.ReactionPayload reaction = 6; */
        if (message.payload.oneofKind === "reaction")
            ReactionPayload.internalBinaryWrite(message.payload.reaction, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* socketmanager.pinnedPayload pinnedMessage = 7; */
        if (message.payload.oneofKind === "pinnedMessage")
            pinnedPayload.internalBinaryWrite(message.payload.pinnedMessage, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.StreamEvent
 */
export const StreamEvent = new StreamEvent$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MessagePayload$Type extends MessageType<MessagePayload> {
    constructor() {
        super("socketmanager.MessagePayload", [
            { no: 1, name: "senderId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "senderName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "automated", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "createdAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "updatedAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "_v", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "multimedia", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => multimediaPayload },
            { no: 13, name: "transaction", kind: "message", T: () => transactionPayload },
            { no: 14, name: "replyTo", kind: "message", T: () => replyTo },
            { no: 15, name: "preparedTransaction", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MessagePayload>): MessagePayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.senderId = "";
        message.chatId = "";
        message.content = "";
        message.messageId = "";
        message.senderName = "";
        message.timestamp = "";
        message.automated = false;
        message.createdAt = "";
        message.updatedAt = "";
        message.Id = "";
        message.V = 0;
        message.multimedia = [];
        if (value !== undefined)
            reflectionMergePartial<MessagePayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MessagePayload): MessagePayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string senderId */ 1:
                    message.senderId = reader.string();
                    break;
                case /* string chatId */ 2:
                    message.chatId = reader.string();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* string messageId */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string senderName */ 5:
                    message.senderName = reader.string();
                    break;
                case /* string timestamp */ 6:
                    message.timestamp = reader.string();
                    break;
                case /* bool automated */ 7:
                    message.automated = reader.bool();
                    break;
                case /* string createdAt */ 8:
                    message.createdAt = reader.string();
                    break;
                case /* string updatedAt */ 9:
                    message.updatedAt = reader.string();
                    break;
                case /* string _id */ 10:
                    message.Id = reader.string();
                    break;
                case /* int32 _v */ 11:
                    message.V = reader.int32();
                    break;
                case /* repeated socketmanager.multimediaPayload multimedia */ 12:
                    message.multimedia.push(multimediaPayload.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional socketmanager.transactionPayload transaction */ 13:
                    message.transaction = transactionPayload.internalBinaryRead(reader, reader.uint32(), options, message.transaction);
                    break;
                case /* optional socketmanager.replyTo replyTo */ 14:
                    message.replyTo = replyTo.internalBinaryRead(reader, reader.uint32(), options, message.replyTo);
                    break;
                case /* optional string preparedTransaction */ 15:
                    message.preparedTransaction = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MessagePayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string senderId = 1; */
        if (message.senderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.senderId);
        /* string chatId = 2; */
        if (message.chatId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chatId);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* string messageId = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string senderName = 5; */
        if (message.senderName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.senderName);
        /* string timestamp = 6; */
        if (message.timestamp !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.timestamp);
        /* bool automated = 7; */
        if (message.automated !== false)
            writer.tag(7, WireType.Varint).bool(message.automated);
        /* string createdAt = 8; */
        if (message.createdAt !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.createdAt);
        /* string updatedAt = 9; */
        if (message.updatedAt !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.updatedAt);
        /* string _id = 10; */
        if (message.Id !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.Id);
        /* int32 _v = 11; */
        if (message.V !== 0)
            writer.tag(11, WireType.Varint).int32(message.V);
        /* repeated socketmanager.multimediaPayload multimedia = 12; */
        for (let i = 0; i < message.multimedia.length; i++)
            multimediaPayload.internalBinaryWrite(message.multimedia[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional socketmanager.transactionPayload transaction = 13; */
        if (message.transaction)
            transactionPayload.internalBinaryWrite(message.transaction, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional socketmanager.replyTo replyTo = 14; */
        if (message.replyTo)
            replyTo.internalBinaryWrite(message.replyTo, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional string preparedTransaction = 15; */
        if (message.preparedTransaction !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.preparedTransaction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.MessagePayload
 */
export const MessagePayload = new MessagePayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupChatCreatedPayload$Type extends MessageType<GroupChatCreatedPayload> {
    constructor() {
        super("socketmanager.GroupChatCreatedPayload", [
            { no: 1, name: "GroupId", kind: "scalar", jsonName: "GroupId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "GroupName", kind: "scalar", jsonName: "GroupName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ParticipantsId", kind: "scalar", jsonName: "ParticipantsId", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "GroupIcon", kind: "scalar", jsonName: "GroupIcon", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "CreatorId", kind: "scalar", jsonName: "CreatorId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupChatCreatedPayload>): GroupChatCreatedPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = "";
        message.groupName = "";
        message.participantsId = [];
        message.groupIcon = "";
        message.creatorId = "";
        if (value !== undefined)
            reflectionMergePartial<GroupChatCreatedPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupChatCreatedPayload): GroupChatCreatedPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string GroupId = 1 [json_name = "GroupId"];*/ 1:
                    message.groupId = reader.string();
                    break;
                case /* string GroupName = 2 [json_name = "GroupName"];*/ 2:
                    message.groupName = reader.string();
                    break;
                case /* repeated string ParticipantsId = 3 [json_name = "ParticipantsId"];*/ 3:
                    message.participantsId.push(reader.string());
                    break;
                case /* string GroupIcon = 4 [json_name = "GroupIcon"];*/ 4:
                    message.groupIcon = reader.string();
                    break;
                case /* string CreatorId = 5 [json_name = "CreatorId"];*/ 5:
                    message.creatorId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupChatCreatedPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string GroupId = 1 [json_name = "GroupId"]; */
        if (message.groupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupId);
        /* string GroupName = 2 [json_name = "GroupName"]; */
        if (message.groupName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupName);
        /* repeated string ParticipantsId = 3 [json_name = "ParticipantsId"]; */
        for (let i = 0; i < message.participantsId.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.participantsId[i]);
        /* string GroupIcon = 4 [json_name = "GroupIcon"]; */
        if (message.groupIcon !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.groupIcon);
        /* string CreatorId = 5 [json_name = "CreatorId"]; */
        if (message.creatorId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.creatorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.GroupChatCreatedPayload
 */
export const GroupChatCreatedPayload = new GroupChatCreatedPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantJoinedPayload$Type extends MessageType<ParticipantJoinedPayload> {
    constructor() {
        super("socketmanager.ParticipantJoinedPayload", [
            { no: 1, name: "GroupId", kind: "scalar", jsonName: "GroupId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "AddedParticipants", kind: "scalar", jsonName: "AddedParticipants", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "automatedMessage", kind: "message", T: () => AutomatedMessage }
        ]);
    }
    create(value?: PartialMessage<ParticipantJoinedPayload>): ParticipantJoinedPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = "";
        message.addedParticipants = [];
        if (value !== undefined)
            reflectionMergePartial<ParticipantJoinedPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantJoinedPayload): ParticipantJoinedPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string GroupId = 1 [json_name = "GroupId"];*/ 1:
                    message.groupId = reader.string();
                    break;
                case /* repeated string AddedParticipants = 2 [json_name = "AddedParticipants"];*/ 2:
                    message.addedParticipants.push(reader.string());
                    break;
                case /* socketmanager.AutomatedMessage automatedMessage */ 3:
                    message.automatedMessage = AutomatedMessage.internalBinaryRead(reader, reader.uint32(), options, message.automatedMessage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantJoinedPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string GroupId = 1 [json_name = "GroupId"]; */
        if (message.groupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupId);
        /* repeated string AddedParticipants = 2 [json_name = "AddedParticipants"]; */
        for (let i = 0; i < message.addedParticipants.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.addedParticipants[i]);
        /* socketmanager.AutomatedMessage automatedMessage = 3; */
        if (message.automatedMessage)
            AutomatedMessage.internalBinaryWrite(message.automatedMessage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.ParticipantJoinedPayload
 */
export const ParticipantJoinedPayload = new ParticipantJoinedPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatusPayload$Type extends MessageType<StatusPayload> {
    constructor() {
        super("socketmanager.StatusPayload", [
            { no: 1, name: "userId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "lastActive", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StatusPayload>): StatusPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        message.status = "";
        message.lastActive = "";
        if (value !== undefined)
            reflectionMergePartial<StatusPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatusPayload): StatusPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string userId */ 1:
                    message.userId = reader.string();
                    break;
                case /* string status */ 2:
                    message.status = reader.string();
                    break;
                case /* string lastActive */ 3:
                    message.lastActive = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatusPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string userId = 1; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        /* string status = 2; */
        if (message.status !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.status);
        /* string lastActive = 3; */
        if (message.lastActive !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.lastActive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.StatusPayload
 */
export const StatusPayload = new StatusPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactionPayload$Type extends MessageType<ReactionPayload> {
    constructor() {
        super("socketmanager.ReactionPayload", [
            { no: 1, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reactorId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reactorName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "reactorProfilePicture", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "reactorBackgroundColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "reaction", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ReactionPayload>): ReactionPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        message.reactorId = "";
        message.reactorName = "";
        message.reactorProfilePicture = "";
        message.reactorBackgroundColor = "";
        message.timestamp = "";
        message.reaction = "";
        message.messageId = "";
        if (value !== undefined)
            reflectionMergePartial<ReactionPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactionPayload): ReactionPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chatId */ 1:
                    message.chatId = reader.string();
                    break;
                case /* string reactorId */ 2:
                    message.reactorId = reader.string();
                    break;
                case /* string reactorName */ 3:
                    message.reactorName = reader.string();
                    break;
                case /* string reactorProfilePicture */ 4:
                    message.reactorProfilePicture = reader.string();
                    break;
                case /* string reactorBackgroundColor */ 5:
                    message.reactorBackgroundColor = reader.string();
                    break;
                case /* string timestamp */ 6:
                    message.timestamp = reader.string();
                    break;
                case /* string reaction */ 7:
                    message.reaction = reader.string();
                    break;
                case /* string messageId */ 8:
                    message.messageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactionPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chatId = 1; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* string reactorId = 2; */
        if (message.reactorId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reactorId);
        /* string reactorName = 3; */
        if (message.reactorName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.reactorName);
        /* string reactorProfilePicture = 4; */
        if (message.reactorProfilePicture !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.reactorProfilePicture);
        /* string reactorBackgroundColor = 5; */
        if (message.reactorBackgroundColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.reactorBackgroundColor);
        /* string timestamp = 6; */
        if (message.timestamp !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.timestamp);
        /* string reaction = 7; */
        if (message.reaction !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.reaction);
        /* string messageId = 8; */
        if (message.messageId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.messageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.ReactionPayload
 */
export const ReactionPayload = new ReactionPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessageRequest$Type extends MessageType<SendMessageRequest> {
    constructor() {
        super("socketmanager.SendMessageRequest", [
            { no: 1, name: "senderId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "senderName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "automated", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "createdAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "updatedAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "_v", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "multimedia", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => multimediaPayload },
            { no: 13, name: "transaction", kind: "message", T: () => transactionPayload },
            { no: 14, name: "replyTo", kind: "message", T: () => replyTo },
            { no: 15, name: "preparedTransaction", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendMessageRequest>): SendMessageRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.senderId = "";
        message.chatId = "";
        message.content = "";
        message.messageId = "";
        message.senderName = "";
        message.timestamp = "";
        message.automated = false;
        message.createdAt = "";
        message.updatedAt = "";
        message.Id = "";
        message.V = 0;
        message.multimedia = [];
        if (value !== undefined)
            reflectionMergePartial<SendMessageRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessageRequest): SendMessageRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string senderId */ 1:
                    message.senderId = reader.string();
                    break;
                case /* string chatId */ 2:
                    message.chatId = reader.string();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* string messageId */ 4:
                    message.messageId = reader.string();
                    break;
                case /* string senderName */ 5:
                    message.senderName = reader.string();
                    break;
                case /* string timestamp */ 6:
                    message.timestamp = reader.string();
                    break;
                case /* bool automated */ 7:
                    message.automated = reader.bool();
                    break;
                case /* string createdAt */ 8:
                    message.createdAt = reader.string();
                    break;
                case /* string updatedAt */ 9:
                    message.updatedAt = reader.string();
                    break;
                case /* string _id */ 10:
                    message.Id = reader.string();
                    break;
                case /* int32 _v */ 11:
                    message.V = reader.int32();
                    break;
                case /* repeated socketmanager.multimediaPayload multimedia */ 12:
                    message.multimedia.push(multimediaPayload.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional socketmanager.transactionPayload transaction */ 13:
                    message.transaction = transactionPayload.internalBinaryRead(reader, reader.uint32(), options, message.transaction);
                    break;
                case /* optional socketmanager.replyTo replyTo */ 14:
                    message.replyTo = replyTo.internalBinaryRead(reader, reader.uint32(), options, message.replyTo);
                    break;
                case /* optional string preparedTransaction */ 15:
                    message.preparedTransaction = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessageRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string senderId = 1; */
        if (message.senderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.senderId);
        /* string chatId = 2; */
        if (message.chatId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chatId);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* string messageId = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* string senderName = 5; */
        if (message.senderName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.senderName);
        /* string timestamp = 6; */
        if (message.timestamp !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.timestamp);
        /* bool automated = 7; */
        if (message.automated !== false)
            writer.tag(7, WireType.Varint).bool(message.automated);
        /* string createdAt = 8; */
        if (message.createdAt !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.createdAt);
        /* string updatedAt = 9; */
        if (message.updatedAt !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.updatedAt);
        /* string _id = 10; */
        if (message.Id !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.Id);
        /* int32 _v = 11; */
        if (message.V !== 0)
            writer.tag(11, WireType.Varint).int32(message.V);
        /* repeated socketmanager.multimediaPayload multimedia = 12; */
        for (let i = 0; i < message.multimedia.length; i++)
            multimediaPayload.internalBinaryWrite(message.multimedia[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional socketmanager.transactionPayload transaction = 13; */
        if (message.transaction)
            transactionPayload.internalBinaryWrite(message.transaction, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional socketmanager.replyTo replyTo = 14; */
        if (message.replyTo)
            replyTo.internalBinaryWrite(message.replyTo, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional string preparedTransaction = 15; */
        if (message.preparedTransaction !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.preparedTransaction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.SendMessageRequest
 */
export const SendMessageRequest = new SendMessageRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class replyTo$Type extends MessageType<replyTo> {
    constructor() {
        super("socketmanager.replyTo", [
            { no: 1, name: "replyToId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "replyToSenderName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "replyTocontent", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<replyTo>): replyTo {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.replyToId = "";
        message.replyToSenderName = "";
        message.replyTocontent = "";
        if (value !== undefined)
            reflectionMergePartial<replyTo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: replyTo): replyTo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string replyToId */ 1:
                    message.replyToId = reader.string();
                    break;
                case /* string replyToSenderName */ 2:
                    message.replyToSenderName = reader.string();
                    break;
                case /* string replyTocontent */ 3:
                    message.replyTocontent = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: replyTo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string replyToId = 1; */
        if (message.replyToId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.replyToId);
        /* string replyToSenderName = 2; */
        if (message.replyToSenderName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.replyToSenderName);
        /* string replyTocontent = 3; */
        if (message.replyTocontent !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.replyTocontent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.replyTo
 */
export const replyTo = new replyTo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class multimediaPayload$Type extends MessageType<multimediaPayload> {
    constructor() {
        super("socketmanager.multimediaPayload", [
            { no: 1, name: "filePath", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "signedUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "expirationTime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "mimeType", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<multimediaPayload>): multimediaPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filePath = "";
        message.signedUrl = "";
        message.expirationTime = "";
        message.mimeType = "";
        if (value !== undefined)
            reflectionMergePartial<multimediaPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: multimediaPayload): multimediaPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filePath */ 1:
                    message.filePath = reader.string();
                    break;
                case /* string signedUrl */ 2:
                    message.signedUrl = reader.string();
                    break;
                case /* string expirationTime */ 3:
                    message.expirationTime = reader.string();
                    break;
                case /* string mimeType */ 4:
                    message.mimeType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: multimediaPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filePath = 1; */
        if (message.filePath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filePath);
        /* string signedUrl = 2; */
        if (message.signedUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.signedUrl);
        /* string expirationTime = 3; */
        if (message.expirationTime !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.expirationTime);
        /* string mimeType = 4; */
        if (message.mimeType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.mimeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.multimediaPayload
 */
export const multimediaPayload = new multimediaPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class transactionPayload$Type extends MessageType<transactionPayload> {
    constructor() {
        super("socketmanager.transactionPayload", [
            { no: 1, name: "amount", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "toWallet", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "fromWallet", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "senderId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<transactionPayload>): transactionPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.amount = "";
        message.toWallet = "";
        message.fromWallet = "";
        message.signature = "";
        message.senderId = "";
        message.timestamp = "";
        if (value !== undefined)
            reflectionMergePartial<transactionPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: transactionPayload): transactionPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string amount */ 1:
                    message.amount = reader.string();
                    break;
                case /* string toWallet */ 2:
                    message.toWallet = reader.string();
                    break;
                case /* string fromWallet */ 3:
                    message.fromWallet = reader.string();
                    break;
                case /* string signature */ 4:
                    message.signature = reader.string();
                    break;
                case /* string senderId */ 5:
                    message.senderId = reader.string();
                    break;
                case /* string timestamp */ 6:
                    message.timestamp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: transactionPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string amount = 1; */
        if (message.amount !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.amount);
        /* string toWallet = 2; */
        if (message.toWallet !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toWallet);
        /* string fromWallet = 3; */
        if (message.fromWallet !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fromWallet);
        /* string signature = 4; */
        if (message.signature !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.signature);
        /* string senderId = 5; */
        if (message.senderId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.senderId);
        /* string timestamp = 6; */
        if (message.timestamp !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.transactionPayload
 */
export const transactionPayload = new transactionPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendMessageResponse$Type extends MessageType<SendMessageResponse> {
    constructor() {
        super("socketmanager.SendMessageResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SendMessageResponse>): SendMessageResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<SendMessageResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendMessageResponse): SendMessageResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendMessageResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.SendMessageResponse
 */
export const SendMessageResponse = new SendMessageResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupChatCreatedRequest$Type extends MessageType<GroupChatCreatedRequest> {
    constructor() {
        super("socketmanager.GroupChatCreatedRequest", [
            { no: 1, name: "GroupId", kind: "scalar", jsonName: "GroupId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "GroupName", kind: "scalar", jsonName: "GroupName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ParticipantsId", kind: "scalar", jsonName: "ParticipantsId", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "GroupIcon", kind: "scalar", jsonName: "GroupIcon", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "CreatorId", kind: "scalar", jsonName: "CreatorId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupChatCreatedRequest>): GroupChatCreatedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = "";
        message.groupName = "";
        message.participantsId = [];
        message.groupIcon = "";
        message.creatorId = "";
        if (value !== undefined)
            reflectionMergePartial<GroupChatCreatedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupChatCreatedRequest): GroupChatCreatedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string GroupId = 1 [json_name = "GroupId"];*/ 1:
                    message.groupId = reader.string();
                    break;
                case /* string GroupName = 2 [json_name = "GroupName"];*/ 2:
                    message.groupName = reader.string();
                    break;
                case /* repeated string ParticipantsId = 3 [json_name = "ParticipantsId"];*/ 3:
                    message.participantsId.push(reader.string());
                    break;
                case /* string GroupIcon = 4 [json_name = "GroupIcon"];*/ 4:
                    message.groupIcon = reader.string();
                    break;
                case /* string CreatorId = 5 [json_name = "CreatorId"];*/ 5:
                    message.creatorId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupChatCreatedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string GroupId = 1 [json_name = "GroupId"]; */
        if (message.groupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupId);
        /* string GroupName = 2 [json_name = "GroupName"]; */
        if (message.groupName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupName);
        /* repeated string ParticipantsId = 3 [json_name = "ParticipantsId"]; */
        for (let i = 0; i < message.participantsId.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.participantsId[i]);
        /* string GroupIcon = 4 [json_name = "GroupIcon"]; */
        if (message.groupIcon !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.groupIcon);
        /* string CreatorId = 5 [json_name = "CreatorId"]; */
        if (message.creatorId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.creatorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.GroupChatCreatedRequest
 */
export const GroupChatCreatedRequest = new GroupChatCreatedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupChatCreatedResponse$Type extends MessageType<GroupChatCreatedResponse> {
    constructor() {
        super("socketmanager.GroupChatCreatedResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GroupChatCreatedResponse>): GroupChatCreatedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<GroupChatCreatedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupChatCreatedResponse): GroupChatCreatedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupChatCreatedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.GroupChatCreatedResponse
 */
export const GroupChatCreatedResponse = new GroupChatCreatedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AutomatedMessage$Type extends MessageType<AutomatedMessage> {
    constructor() {
        super("socketmanager.AutomatedMessage", [
            { no: 1, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "senderId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "senderName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "automated", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AutomatedMessage>): AutomatedMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        message.senderId = "";
        message.senderName = "";
        message.content = "";
        message.automated = false;
        if (value !== undefined)
            reflectionMergePartial<AutomatedMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AutomatedMessage): AutomatedMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chatId */ 1:
                    message.chatId = reader.string();
                    break;
                case /* string senderId */ 2:
                    message.senderId = reader.string();
                    break;
                case /* string senderName */ 3:
                    message.senderName = reader.string();
                    break;
                case /* string content */ 4:
                    message.content = reader.string();
                    break;
                case /* bool automated */ 5:
                    message.automated = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AutomatedMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chatId = 1; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* string senderId = 2; */
        if (message.senderId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.senderId);
        /* string senderName = 3; */
        if (message.senderName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.senderName);
        /* string content = 4; */
        if (message.content !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.content);
        /* bool automated = 5; */
        if (message.automated !== false)
            writer.tag(5, WireType.Varint).bool(message.automated);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.AutomatedMessage
 */
export const AutomatedMessage = new AutomatedMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantJoinedRequest$Type extends MessageType<ParticipantJoinedRequest> {
    constructor() {
        super("socketmanager.ParticipantJoinedRequest", [
            { no: 1, name: "GroupId", kind: "scalar", jsonName: "GroupId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "AddedParticipants", kind: "scalar", jsonName: "AddedParticipants", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "AutomatedMessage", kind: "message", jsonName: "AutomatedMessage", T: () => AutomatedMessage }
        ]);
    }
    create(value?: PartialMessage<ParticipantJoinedRequest>): ParticipantJoinedRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = "";
        message.addedParticipants = [];
        if (value !== undefined)
            reflectionMergePartial<ParticipantJoinedRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantJoinedRequest): ParticipantJoinedRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string GroupId = 1 [json_name = "GroupId"];*/ 1:
                    message.groupId = reader.string();
                    break;
                case /* repeated string AddedParticipants = 2 [json_name = "AddedParticipants"];*/ 2:
                    message.addedParticipants.push(reader.string());
                    break;
                case /* socketmanager.AutomatedMessage AutomatedMessage = 3 [json_name = "AutomatedMessage"];*/ 3:
                    message.automatedMessage = AutomatedMessage.internalBinaryRead(reader, reader.uint32(), options, message.automatedMessage);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantJoinedRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string GroupId = 1 [json_name = "GroupId"]; */
        if (message.groupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupId);
        /* repeated string AddedParticipants = 2 [json_name = "AddedParticipants"]; */
        for (let i = 0; i < message.addedParticipants.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.addedParticipants[i]);
        /* socketmanager.AutomatedMessage AutomatedMessage = 3 [json_name = "AutomatedMessage"]; */
        if (message.automatedMessage)
            AutomatedMessage.internalBinaryWrite(message.automatedMessage, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.ParticipantJoinedRequest
 */
export const ParticipantJoinedRequest = new ParticipantJoinedRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantJoinedResponse$Type extends MessageType<ParticipantJoinedResponse> {
    constructor() {
        super("socketmanager.ParticipantJoinedResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ParticipantJoinedResponse>): ParticipantJoinedResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<ParticipantJoinedResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantJoinedResponse): ParticipantJoinedResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantJoinedResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.ParticipantJoinedResponse
 */
export const ParticipantJoinedResponse = new ParticipantJoinedResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactionRequest$Type extends MessageType<ReactionRequest> {
    constructor() {
        super("socketmanager.ReactionRequest", [
            { no: 1, name: "participantsId", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "payload", kind: "message", T: () => data }
        ]);
    }
    create(value?: PartialMessage<ReactionRequest>): ReactionRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.participantsId = [];
        if (value !== undefined)
            reflectionMergePartial<ReactionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactionRequest): ReactionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string participantsId */ 1:
                    message.participantsId.push(reader.string());
                    break;
                case /* socketmanager.data payload */ 2:
                    message.payload = data.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string participantsId = 1; */
        for (let i = 0; i < message.participantsId.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.participantsId[i]);
        /* socketmanager.data payload = 2; */
        if (message.payload)
            data.internalBinaryWrite(message.payload, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.ReactionRequest
 */
export const ReactionRequest = new ReactionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class data$Type extends MessageType<data> {
    constructor() {
        super("socketmanager.data", [
            { no: 1, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "reactorId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "reactorName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "reactorProfilePicture", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "reactorBackgroundColor", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "timestamp", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "reaction", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<data>): data {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        message.reactorId = "";
        message.reactorName = "";
        message.reactorProfilePicture = "";
        message.reactorBackgroundColor = "";
        message.timestamp = "";
        message.reaction = "";
        message.messageId = "";
        if (value !== undefined)
            reflectionMergePartial<data>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: data): data {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chatId */ 1:
                    message.chatId = reader.string();
                    break;
                case /* string reactorId */ 2:
                    message.reactorId = reader.string();
                    break;
                case /* string reactorName */ 3:
                    message.reactorName = reader.string();
                    break;
                case /* string reactorProfilePicture */ 4:
                    message.reactorProfilePicture = reader.string();
                    break;
                case /* string reactorBackgroundColor */ 5:
                    message.reactorBackgroundColor = reader.string();
                    break;
                case /* string timestamp */ 6:
                    message.timestamp = reader.string();
                    break;
                case /* string reaction */ 7:
                    message.reaction = reader.string();
                    break;
                case /* string messageId */ 8:
                    message.messageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: data, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chatId = 1; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* string reactorId = 2; */
        if (message.reactorId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.reactorId);
        /* string reactorName = 3; */
        if (message.reactorName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.reactorName);
        /* string reactorProfilePicture = 4; */
        if (message.reactorProfilePicture !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.reactorProfilePicture);
        /* string reactorBackgroundColor = 5; */
        if (message.reactorBackgroundColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.reactorBackgroundColor);
        /* string timestamp = 6; */
        if (message.timestamp !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.timestamp);
        /* string reaction = 7; */
        if (message.reaction !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.reaction);
        /* string messageId = 8; */
        if (message.messageId !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.messageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.data
 */
export const data = new data$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReactionResponse$Type extends MessageType<ReactionResponse> {
    constructor() {
        super("socketmanager.ReactionResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ReactionResponse>): ReactionResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<ReactionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReactionResponse): ReactionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReactionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.ReactionResponse
 */
export const ReactionResponse = new ReactionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class pinnedPayload$Type extends MessageType<pinnedPayload> {
    constructor() {
        super("socketmanager.pinnedPayload", [
            { no: 1, name: "_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "messageId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "multimedia", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => multimediaPayload },
            { no: 6, name: "transaction", kind: "message", T: () => transactionPayload },
            { no: 7, name: "pinnedBy", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "pinnedAt", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "isPinned", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<pinnedPayload>): pinnedPayload {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.Id = "";
        message.chatId = "";
        message.content = "";
        message.messageId = "";
        message.multimedia = [];
        message.pinnedBy = "";
        message.pinnedAt = "";
        message.isPinned = false;
        if (value !== undefined)
            reflectionMergePartial<pinnedPayload>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: pinnedPayload): pinnedPayload {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string _id */ 1:
                    message.Id = reader.string();
                    break;
                case /* string chatId */ 2:
                    message.chatId = reader.string();
                    break;
                case /* string content */ 3:
                    message.content = reader.string();
                    break;
                case /* string messageId */ 4:
                    message.messageId = reader.string();
                    break;
                case /* repeated socketmanager.multimediaPayload multimedia */ 5:
                    message.multimedia.push(multimediaPayload.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional socketmanager.transactionPayload transaction */ 6:
                    message.transaction = transactionPayload.internalBinaryRead(reader, reader.uint32(), options, message.transaction);
                    break;
                case /* string pinnedBy */ 7:
                    message.pinnedBy = reader.string();
                    break;
                case /* string pinnedAt */ 8:
                    message.pinnedAt = reader.string();
                    break;
                case /* bool isPinned */ 9:
                    message.isPinned = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: pinnedPayload, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string _id = 1; */
        if (message.Id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.Id);
        /* string chatId = 2; */
        if (message.chatId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chatId);
        /* string content = 3; */
        if (message.content !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.content);
        /* string messageId = 4; */
        if (message.messageId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.messageId);
        /* repeated socketmanager.multimediaPayload multimedia = 5; */
        for (let i = 0; i < message.multimedia.length; i++)
            multimediaPayload.internalBinaryWrite(message.multimedia[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional socketmanager.transactionPayload transaction = 6; */
        if (message.transaction)
            transactionPayload.internalBinaryWrite(message.transaction, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string pinnedBy = 7; */
        if (message.pinnedBy !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.pinnedBy);
        /* string pinnedAt = 8; */
        if (message.pinnedAt !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.pinnedAt);
        /* bool isPinned = 9; */
        if (message.isPinned !== false)
            writer.tag(9, WireType.Varint).bool(message.isPinned);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.pinnedPayload
 */
export const pinnedPayload = new pinnedPayload$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PinnedMessageEventRequest$Type extends MessageType<PinnedMessageEventRequest> {
    constructor() {
        super("socketmanager.PinnedMessageEventRequest", [
            { no: 1, name: "payload", kind: "message", T: () => pinnedPayload }
        ]);
    }
    create(value?: PartialMessage<PinnedMessageEventRequest>): PinnedMessageEventRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<PinnedMessageEventRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PinnedMessageEventRequest): PinnedMessageEventRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* socketmanager.pinnedPayload payload */ 1:
                    message.payload = pinnedPayload.internalBinaryRead(reader, reader.uint32(), options, message.payload);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PinnedMessageEventRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* socketmanager.pinnedPayload payload = 1; */
        if (message.payload)
            pinnedPayload.internalBinaryWrite(message.payload, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.PinnedMessageEventRequest
 */
export const PinnedMessageEventRequest = new PinnedMessageEventRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PinnedMessageEventResponse$Type extends MessageType<PinnedMessageEventResponse> {
    constructor() {
        super("socketmanager.PinnedMessageEventResponse", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PinnedMessageEventResponse>): PinnedMessageEventResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<PinnedMessageEventResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PinnedMessageEventResponse): PinnedMessageEventResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PinnedMessageEventResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message socketmanager.PinnedMessageEventResponse
 */
export const PinnedMessageEventResponse = new PinnedMessageEventResponse$Type();
/**
 * @generated ServiceType for protobuf service socketmanager.SocketService
 */
export const SocketService = new ServiceType("socketmanager.SocketService", [
    { name: "Connect", serverStreaming: true, options: {}, I: SubscribeRequest, O: StreamEvent },
    { name: "BroadcastMessage", options: {}, I: SendMessageRequest, O: SendMessageResponse },
    { name: "GroupChatCreated", options: {}, I: GroupChatCreatedRequest, O: GroupChatCreatedResponse },
    { name: "ParticipantJoined", options: {}, I: ParticipantJoinedRequest, O: ParticipantJoinedResponse },
    { name: "SubscribeChat", serverStreaming: true, options: {}, I: SubscribeChatRequest, O: ChatEvent },
    { name: "ReactedToGroup", options: {}, I: ReactionRequest, O: ReactionResponse },
    { name: "PinnedMessageEvent", options: {}, I: PinnedMessageEventRequest, O: PinnedMessageEventResponse },
    { name: "UnpinnedMessageEvent", options: {}, I: PinnedMessageEventRequest, O: PinnedMessageEventResponse }
]);
