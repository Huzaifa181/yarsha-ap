// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "users.proto" (package "yarsha.users.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message yarsha.users.v1.requestHeader
 */
export interface requestHeader {
    /**
     * @generated from protobuf field: string RequestId = 1 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string DeviceId = 2 [json_name = "DeviceId"];
     */
    deviceId: string;
    /**
     * @generated from protobuf field: string DeviceModel = 3 [json_name = "DeviceModel"];
     */
    deviceModel: string;
    /**
     * @generated from protobuf field: string Timestamp = 4 [json_name = "Timestamp"];
     */
    timestamp: string;
}
/**
 * @generated from protobuf message yarsha.users.v1.responseHeader
 */
export interface responseHeader {
    /**
     * @generated from protobuf field: string Status = 1 [json_name = "Status"];
     */
    status: string;
    /**
     * @generated from protobuf field: string StatusCode = 2 [json_name = "StatusCode"];
     */
    statusCode: string;
    /**
     * @generated from protobuf field: string Message = 3 [json_name = "Message"];
     */
    message: string;
    /**
     * @generated from protobuf field: string TimeStamp = 4 [json_name = "TimeStamp"];
     */
    timeStamp: string;
    /**
     * @generated from protobuf field: string RequestId = 5 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string ResponseTitle = 6 [json_name = "ResponseTitle"];
     */
    responseTitle: string;
    /**
     * @generated from protobuf field: string ResponseDescription = 7 [json_name = "ResponseDescription"];
     */
    responseDescription: string;
}
/**
 * @generated from protobuf message yarsha.users.v1.sendOtpRequestBody
 */
export interface sendOtpRequestBody {
    /**
     * @generated from protobuf field: string PhoneNumber = 1 [json_name = "PhoneNumber"];
     */
    phoneNumber: string;
}
/**
 * @generated from protobuf message yarsha.users.v1.SendOtpRequest
 */
export interface SendOtpRequest {
    /**
     * @generated from protobuf field: yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: yarsha.users.v1.sendOtpRequestBody Body = 2 [json_name = "Body"];
     */
    body?: sendOtpRequestBody;
}
/**
 * @generated from protobuf message yarsha.users.v1.SendOtp
 */
export interface SendOtp {
    /**
     * @generated from protobuf field: string PhoneNumber = 1 [json_name = "PhoneNumber"];
     */
    phoneNumber: string;
    /**
     * @generated from protobuf field: string Message = 2 [json_name = "Message"];
     */
    message: string;
}
/**
 * @generated from protobuf message yarsha.users.v1.SendOtpResponse
 */
export interface SendOtpResponse {
    /**
     * @generated from protobuf field: yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: yarsha.users.v1.SendOtp Response = 2 [json_name = "Response"];
     */
    response?: SendOtp;
}
/**
 * @generated from protobuf message yarsha.users.v1.FcmData
 */
export interface FcmData {
    /**
     * @generated from protobuf field: string Token = 1 [json_name = "Token"];
     */
    token: string;
    /**
     * @generated from protobuf field: string DeviceId = 2 [json_name = "DeviceId"];
     */
    deviceId: string;
    /**
     * @generated from protobuf field: string Model = 3 [json_name = "Model"];
     */
    model: string;
    /**
     * @generated from protobuf field: string UniqueDeviceId = 4 [json_name = "UniqueDeviceId"];
     */
    uniqueDeviceId: string;
}
/**
 * @generated from protobuf message yarsha.users.v1.VerifyOtpRequestBody
 */
export interface VerifyOtpRequestBody {
    /**
     * @generated from protobuf field: string PhoneNumber = 1 [json_name = "PhoneNumber"];
     */
    phoneNumber: string;
    /**
     * @generated from protobuf field: string Otp = 2 [json_name = "Otp"];
     */
    otp: string;
    /**
     * @generated from protobuf field: optional yarsha.users.v1.FcmData FcmData = 3 [json_name = "FcmData"];
     */
    fcmData?: FcmData;
}
/**
 * @generated from protobuf message yarsha.users.v1.VerifyOtpRequest
 */
export interface VerifyOtpRequest {
    /**
     * @generated from protobuf field: yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: yarsha.users.v1.VerifyOtpRequestBody Body = 2 [json_name = "Body"];
     */
    body?: VerifyOtpRequestBody;
}
/**
 * @generated from protobuf message yarsha.users.v1.User
 */
export interface User {
    /**
     * @generated from protobuf field: string Id = 1 [json_name = "Id"];
     */
    id: string;
    /**
     * @generated from protobuf field: optional string PhoneNumber = 2 [json_name = "PhoneNumber"];
     */
    phoneNumber?: string;
    /**
     * @generated from protobuf field: optional string FullName = 3 [json_name = "FullName"];
     */
    fullName?: string;
    /**
     * @generated from protobuf field: optional string CountryCode = 4 [json_name = "CountryCode"];
     */
    countryCode?: string;
    /**
     * @generated from protobuf field: optional string Number = 5 [json_name = "Number"];
     */
    number?: string;
    /**
     * @generated from protobuf field: optional string DialCode = 6 [json_name = "DialCode"];
     */
    dialCode?: string;
    /**
     * @generated from protobuf field: optional string Address = 7 [json_name = "Address"];
     */
    address?: string;
    /**
     * @generated from protobuf field: optional string Status = 8 [json_name = "Status"];
     */
    status?: string;
    /**
     * @generated from protobuf field: optional string LastActive = 9 [json_name = "LastActive"];
     */
    lastActive?: string;
    /**
     * @generated from protobuf field: optional string ProfilePicture = 10 [json_name = "ProfilePicture"];
     */
    profilePicture?: string;
    /**
     * @generated from protobuf field: optional string UserBio = 11 [json_name = "UserBio"];
     */
    userBio?: string;
    /**
     * @generated from protobuf field: optional string Username = 12 [json_name = "Username"];
     */
    username?: string;
    /**
     * @generated from protobuf field: optional string BackgroundColor = 13 [json_name = "BackgroundColor"];
     */
    backgroundColor?: string;
    /**
     * @generated from protobuf field: optional string CreatedAt = 14 [json_name = "CreatedAt"];
     */
    createdAt?: string;
    /**
     * @generated from protobuf field: optional string UpdatedAt = 15 [json_name = "UpdatedAt"];
     */
    updatedAt?: string;
}
/**
 * @generated from protobuf message yarsha.users.v1.VerifyOtp
 */
export interface VerifyOtp {
    /**
     * @generated from protobuf field: yarsha.users.v1.User User = 1 [json_name = "User"];
     */
    user?: User;
    /**
     * @generated from protobuf field: string Token = 2 [json_name = "Token"];
     */
    token: string;
    /**
     * @generated from protobuf field: string PrivateKey = 3 [json_name = "PrivateKey"];
     */
    privateKey: string;
}
/**
 * @generated from protobuf message yarsha.users.v1.VerifyOtpResponse
 */
export interface VerifyOtpResponse {
    /**
     * @generated from protobuf field: yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: yarsha.users.v1.VerifyOtp Response = 2 [json_name = "Response"];
     */
    response?: VerifyOtp;
}
/**
 * @generated from protobuf message yarsha.users.v1.UserId
 */
export interface UserId {
    /**
     * @generated from protobuf field: string UserId = 1 [json_name = "UserId"];
     */
    userId: string;
}
/**
 * @generated from protobuf message yarsha.users.v1.GetUserInfoRequest
 */
export interface GetUserInfoRequest {
    /**
     * @generated from protobuf field: yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: yarsha.users.v1.UserId Body = 2 [json_name = "Body"];
     */
    body?: UserId;
}
/**
 * @generated from protobuf message yarsha.users.v1.GetUserInfoResponse
 */
export interface GetUserInfoResponse {
    /**
     * @generated from protobuf field: yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: yarsha.users.v1.User Response = 2 [json_name = "Response"];
     */
    response?: User;
}
/**
 * @generated from protobuf message yarsha.users.v1.SearchUsersRequestBody
 */
export interface SearchUsersRequestBody {
    /**
     * @generated from protobuf field: string SearchQuery = 1 [json_name = "SearchQuery"];
     */
    searchQuery: string;
}
/**
 * @generated from protobuf message yarsha.users.v1.SearchUsersRequest
 */
export interface SearchUsersRequest {
    /**
     * @generated from protobuf field: yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: yarsha.users.v1.SearchUsersRequestBody Body = 2 [json_name = "Body"];
     */
    body?: SearchUsersRequestBody;
}
/**
 * @generated from protobuf message yarsha.users.v1.SearchUsersResponse
 */
export interface SearchUsersResponse {
    /**
     * @generated from protobuf field: yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: repeated yarsha.users.v1.User Response = 2 [json_name = "Response"];
     */
    response: User[];
}
/**
 * @generated from protobuf message yarsha.users.v1.FcmToken
 */
export interface FcmToken {
    /**
     * @generated from protobuf field: string DeviceId = 1 [json_name = "DeviceId"];
     */
    deviceId: string;
    /**
     * @generated from protobuf field: string Model = 2 [json_name = "Model"];
     */
    model: string;
    /**
     * @generated from protobuf field: int64 LastUpdated = 3 [json_name = "LastUpdated"];
     */
    lastUpdated: bigint;
    /**
     * @generated from protobuf field: string Token = 4 [json_name = "Token"];
     */
    token: string;
    /**
     * @generated from protobuf field: string UniqueDeviceId = 5 [json_name = "UniqueDeviceId"];
     */
    uniqueDeviceId: string;
}
/**
 * @generated from protobuf message yarsha.users.v1.UpdateUserRequestBody
 */
export interface UpdateUserRequestBody {
    /**
     * @generated from protobuf field: yarsha.users.v1.User User = 1 [json_name = "User"];
     */
    user?: User;
    /**
     * @generated from protobuf field: optional yarsha.users.v1.FcmToken FcmToken = 2 [json_name = "FcmToken"];
     */
    fcmToken?: FcmToken;
}
/**
 * @generated from protobuf message yarsha.users.v1.UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * @generated from protobuf field: yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: yarsha.users.v1.UpdateUserRequestBody Body = 2 [json_name = "Body"];
     */
    body?: UpdateUserRequestBody;
}
/**
 * @generated from protobuf message yarsha.users.v1.UpdateUserResponse
 */
export interface UpdateUserResponse {
    /**
     * @generated from protobuf field: yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: yarsha.users.v1.User Response = 2 [json_name = "Response"];
     */
    response?: User;
}
/**
 * @generated from protobuf message yarsha.users.v1.CheckYarshaUserRequestBody
 */
export interface CheckYarshaUserRequestBody {
    /**
     * @generated from protobuf field: repeated string ContactList = 1 [json_name = "ContactList"];
     */
    contactList: string[];
}
/**
 * @generated from protobuf message yarsha.users.v1.CheckYarshaUserRequest
 */
export interface CheckYarshaUserRequest {
    /**
     * @generated from protobuf field: yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: yarsha.users.v1.CheckYarshaUserRequestBody Body = 2 [json_name = "Body"];
     */
    body?: CheckYarshaUserRequestBody;
}
/**
 * @generated from protobuf message yarsha.users.v1.MatchedUsers
 */
export interface MatchedUsers {
    /**
     * @generated from protobuf field: repeated yarsha.users.v1.User MatchedUsers = 1 [json_name = "MatchedUsers"];
     */
    matchedUsers: User[];
}
/**
 * @generated from protobuf message yarsha.users.v1.CheckYarshaUserResponse
 */
export interface CheckYarshaUserResponse {
    /**
     * @generated from protobuf field: yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: yarsha.users.v1.MatchedUsers Response = 2 [json_name = "Response"];
     */
    response?: MatchedUsers;
}
/**
 * @generated from protobuf message yarsha.users.v1.LogoutRequest
 */
export interface LogoutRequest {
    /**
     * @generated from protobuf field: yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: string FcmToken = 2 [json_name = "FcmToken"];
     */
    fcmToken: string;
}
/**
 * @generated from protobuf message yarsha.users.v1.LogoutResponseBody
 */
export interface LogoutResponseBody {
    /**
     * @generated from protobuf field: string SuccessMessage = 1 [json_name = "SuccessMessage"];
     */
    successMessage: string;
}
/**
 * @generated from protobuf message yarsha.users.v1.LogoutResponse
 */
export interface LogoutResponse {
    /**
     * @generated from protobuf field: yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: yarsha.users.v1.LogoutResponseBody Response = 2 [json_name = "Response"];
     */
    response?: LogoutResponseBody;
}
/**
 * @generated from protobuf message yarsha.users.v1.DeleteAccountRequestBody
 */
export interface DeleteAccountRequestBody {
    /**
     * @generated from protobuf field: repeated string Reason = 1 [json_name = "Reason"];
     */
    reason: string[];
}
/**
 * @generated from protobuf message yarsha.users.v1.DeleteAccountRequest
 */
export interface DeleteAccountRequest {
    /**
     * @generated from protobuf field: yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: requestHeader;
    /**
     * @generated from protobuf field: yarsha.users.v1.DeleteAccountRequestBody Body = 2 [json_name = "Body"];
     */
    body?: DeleteAccountRequestBody;
}
/**
 * @generated from protobuf message yarsha.users.v1.DeleteAccountResponseBody
 */
export interface DeleteAccountResponseBody {
    /**
     * @generated from protobuf field: string SuccessMessage = 1 [json_name = "SuccessMessage"];
     */
    successMessage: string;
}
/**
 * @generated from protobuf message yarsha.users.v1.DeleteAccountResponse
 */
export interface DeleteAccountResponse {
    /**
     * @generated from protobuf field: yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: responseHeader;
    /**
     * @generated from protobuf field: yarsha.users.v1.DeleteAccountResponseBody Response = 2 [json_name = "Response"];
     */
    response?: DeleteAccountResponseBody;
}
// @generated message type with reflection information, may provide speed optimized methods
class requestHeader$Type extends MessageType<requestHeader> {
    constructor() {
        super("yarsha.users.v1.requestHeader", [
            { no: 1, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "DeviceId", kind: "scalar", jsonName: "DeviceId", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "DeviceModel", kind: "scalar", jsonName: "DeviceModel", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<requestHeader>): requestHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = "";
        message.deviceId = "";
        message.deviceModel = "";
        message.timestamp = "";
        if (value !== undefined)
            reflectionMergePartial<requestHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: requestHeader): requestHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string RequestId = 1 [json_name = "RequestId"];*/ 1:
                    message.requestId = reader.string();
                    break;
                case /* string DeviceId = 2 [json_name = "DeviceId"];*/ 2:
                    message.deviceId = reader.string();
                    break;
                case /* string DeviceModel = 3 [json_name = "DeviceModel"];*/ 3:
                    message.deviceModel = reader.string();
                    break;
                case /* string Timestamp = 4 [json_name = "Timestamp"];*/ 4:
                    message.timestamp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: requestHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string RequestId = 1 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.requestId);
        /* string DeviceId = 2 [json_name = "DeviceId"]; */
        if (message.deviceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.deviceId);
        /* string DeviceModel = 3 [json_name = "DeviceModel"]; */
        if (message.deviceModel !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.deviceModel);
        /* string Timestamp = 4 [json_name = "Timestamp"]; */
        if (message.timestamp !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.requestHeader
 */
export const requestHeader = new requestHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class responseHeader$Type extends MessageType<responseHeader> {
    constructor() {
        super("yarsha.users.v1.responseHeader", [
            { no: 1, name: "Status", kind: "scalar", jsonName: "Status", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "StatusCode", kind: "scalar", jsonName: "StatusCode", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "TimeStamp", kind: "scalar", jsonName: "TimeStamp", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ResponseTitle", kind: "scalar", jsonName: "ResponseTitle", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "ResponseDescription", kind: "scalar", jsonName: "ResponseDescription", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<responseHeader>): responseHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        message.statusCode = "";
        message.message = "";
        message.timeStamp = "";
        message.requestId = "";
        message.responseTitle = "";
        message.responseDescription = "";
        if (value !== undefined)
            reflectionMergePartial<responseHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: responseHeader): responseHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Status = 1 [json_name = "Status"];*/ 1:
                    message.status = reader.string();
                    break;
                case /* string StatusCode = 2 [json_name = "StatusCode"];*/ 2:
                    message.statusCode = reader.string();
                    break;
                case /* string Message = 3 [json_name = "Message"];*/ 3:
                    message.message = reader.string();
                    break;
                case /* string TimeStamp = 4 [json_name = "TimeStamp"];*/ 4:
                    message.timeStamp = reader.string();
                    break;
                case /* string RequestId = 5 [json_name = "RequestId"];*/ 5:
                    message.requestId = reader.string();
                    break;
                case /* string ResponseTitle = 6 [json_name = "ResponseTitle"];*/ 6:
                    message.responseTitle = reader.string();
                    break;
                case /* string ResponseDescription = 7 [json_name = "ResponseDescription"];*/ 7:
                    message.responseDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: responseHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Status = 1 [json_name = "Status"]; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        /* string StatusCode = 2 [json_name = "StatusCode"]; */
        if (message.statusCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.statusCode);
        /* string Message = 3 [json_name = "Message"]; */
        if (message.message !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.message);
        /* string TimeStamp = 4 [json_name = "TimeStamp"]; */
        if (message.timeStamp !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.timeStamp);
        /* string RequestId = 5 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.requestId);
        /* string ResponseTitle = 6 [json_name = "ResponseTitle"]; */
        if (message.responseTitle !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.responseTitle);
        /* string ResponseDescription = 7 [json_name = "ResponseDescription"]; */
        if (message.responseDescription !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.responseDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.responseHeader
 */
export const responseHeader = new responseHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class sendOtpRequestBody$Type extends MessageType<sendOtpRequestBody> {
    constructor() {
        super("yarsha.users.v1.sendOtpRequestBody", [
            { no: 1, name: "PhoneNumber", kind: "scalar", jsonName: "PhoneNumber", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<sendOtpRequestBody>): sendOtpRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phoneNumber = "";
        if (value !== undefined)
            reflectionMergePartial<sendOtpRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: sendOtpRequestBody): sendOtpRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string PhoneNumber = 1 [json_name = "PhoneNumber"];*/ 1:
                    message.phoneNumber = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: sendOtpRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string PhoneNumber = 1 [json_name = "PhoneNumber"]; */
        if (message.phoneNumber !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.phoneNumber);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.sendOtpRequestBody
 */
export const sendOtpRequestBody = new sendOtpRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendOtpRequest$Type extends MessageType<SendOtpRequest> {
    constructor() {
        super("yarsha.users.v1.SendOtpRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => sendOtpRequestBody }
        ]);
    }
    create(value?: PartialMessage<SendOtpRequest>): SendOtpRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendOtpRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendOtpRequest): SendOtpRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.users.v1.sendOtpRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = sendOtpRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendOtpRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.users.v1.sendOtpRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            sendOtpRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.SendOtpRequest
 */
export const SendOtpRequest = new SendOtpRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendOtp$Type extends MessageType<SendOtp> {
    constructor() {
        super("yarsha.users.v1.SendOtp", [
            { no: 1, name: "PhoneNumber", kind: "scalar", jsonName: "PhoneNumber", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Message", kind: "scalar", jsonName: "Message", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SendOtp>): SendOtp {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phoneNumber = "";
        message.message = "";
        if (value !== undefined)
            reflectionMergePartial<SendOtp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendOtp): SendOtp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string PhoneNumber = 1 [json_name = "PhoneNumber"];*/ 1:
                    message.phoneNumber = reader.string();
                    break;
                case /* string Message = 2 [json_name = "Message"];*/ 2:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendOtp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string PhoneNumber = 1 [json_name = "PhoneNumber"]; */
        if (message.phoneNumber !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.phoneNumber);
        /* string Message = 2 [json_name = "Message"]; */
        if (message.message !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.SendOtp
 */
export const SendOtp = new SendOtp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendOtpResponse$Type extends MessageType<SendOtpResponse> {
    constructor() {
        super("yarsha.users.v1.SendOtpResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => SendOtp }
        ]);
    }
    create(value?: PartialMessage<SendOtpResponse>): SendOtpResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SendOtpResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendOtpResponse): SendOtpResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.users.v1.SendOtp Response = 2 [json_name = "Response"];*/ 2:
                    message.response = SendOtp.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendOtpResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.users.v1.SendOtp Response = 2 [json_name = "Response"]; */
        if (message.response)
            SendOtp.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.SendOtpResponse
 */
export const SendOtpResponse = new SendOtpResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FcmData$Type extends MessageType<FcmData> {
    constructor() {
        super("yarsha.users.v1.FcmData", [
            { no: 1, name: "Token", kind: "scalar", jsonName: "Token", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "DeviceId", kind: "scalar", jsonName: "DeviceId", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Model", kind: "scalar", jsonName: "Model", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "UniqueDeviceId", kind: "scalar", jsonName: "UniqueDeviceId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FcmData>): FcmData {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        message.deviceId = "";
        message.model = "";
        message.uniqueDeviceId = "";
        if (value !== undefined)
            reflectionMergePartial<FcmData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FcmData): FcmData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Token = 1 [json_name = "Token"];*/ 1:
                    message.token = reader.string();
                    break;
                case /* string DeviceId = 2 [json_name = "DeviceId"];*/ 2:
                    message.deviceId = reader.string();
                    break;
                case /* string Model = 3 [json_name = "Model"];*/ 3:
                    message.model = reader.string();
                    break;
                case /* string UniqueDeviceId = 4 [json_name = "UniqueDeviceId"];*/ 4:
                    message.uniqueDeviceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FcmData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Token = 1 [json_name = "Token"]; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        /* string DeviceId = 2 [json_name = "DeviceId"]; */
        if (message.deviceId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.deviceId);
        /* string Model = 3 [json_name = "Model"]; */
        if (message.model !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.model);
        /* string UniqueDeviceId = 4 [json_name = "UniqueDeviceId"]; */
        if (message.uniqueDeviceId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.uniqueDeviceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.FcmData
 */
export const FcmData = new FcmData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyOtpRequestBody$Type extends MessageType<VerifyOtpRequestBody> {
    constructor() {
        super("yarsha.users.v1.VerifyOtpRequestBody", [
            { no: 1, name: "PhoneNumber", kind: "scalar", jsonName: "PhoneNumber", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Otp", kind: "scalar", jsonName: "Otp", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "FcmData", kind: "message", jsonName: "FcmData", T: () => FcmData }
        ]);
    }
    create(value?: PartialMessage<VerifyOtpRequestBody>): VerifyOtpRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.phoneNumber = "";
        message.otp = "";
        if (value !== undefined)
            reflectionMergePartial<VerifyOtpRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyOtpRequestBody): VerifyOtpRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string PhoneNumber = 1 [json_name = "PhoneNumber"];*/ 1:
                    message.phoneNumber = reader.string();
                    break;
                case /* string Otp = 2 [json_name = "Otp"];*/ 2:
                    message.otp = reader.string();
                    break;
                case /* optional yarsha.users.v1.FcmData FcmData = 3 [json_name = "FcmData"];*/ 3:
                    message.fcmData = FcmData.internalBinaryRead(reader, reader.uint32(), options, message.fcmData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyOtpRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string PhoneNumber = 1 [json_name = "PhoneNumber"]; */
        if (message.phoneNumber !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.phoneNumber);
        /* string Otp = 2 [json_name = "Otp"]; */
        if (message.otp !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.otp);
        /* optional yarsha.users.v1.FcmData FcmData = 3 [json_name = "FcmData"]; */
        if (message.fcmData)
            FcmData.internalBinaryWrite(message.fcmData, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.VerifyOtpRequestBody
 */
export const VerifyOtpRequestBody = new VerifyOtpRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyOtpRequest$Type extends MessageType<VerifyOtpRequest> {
    constructor() {
        super("yarsha.users.v1.VerifyOtpRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => VerifyOtpRequestBody }
        ]);
    }
    create(value?: PartialMessage<VerifyOtpRequest>): VerifyOtpRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<VerifyOtpRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyOtpRequest): VerifyOtpRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.users.v1.VerifyOtpRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = VerifyOtpRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyOtpRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.users.v1.VerifyOtpRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            VerifyOtpRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.VerifyOtpRequest
 */
export const VerifyOtpRequest = new VerifyOtpRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class User$Type extends MessageType<User> {
    constructor() {
        super("yarsha.users.v1.User", [
            { no: 1, name: "Id", kind: "scalar", jsonName: "Id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "PhoneNumber", kind: "scalar", jsonName: "PhoneNumber", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "FullName", kind: "scalar", jsonName: "FullName", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "CountryCode", kind: "scalar", jsonName: "CountryCode", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "Number", kind: "scalar", jsonName: "Number", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "DialCode", kind: "scalar", jsonName: "DialCode", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "Address", kind: "scalar", jsonName: "Address", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "Status", kind: "scalar", jsonName: "Status", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "LastActive", kind: "scalar", jsonName: "LastActive", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "ProfilePicture", kind: "scalar", jsonName: "ProfilePicture", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "UserBio", kind: "scalar", jsonName: "UserBio", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "Username", kind: "scalar", jsonName: "Username", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "BackgroundColor", kind: "scalar", jsonName: "BackgroundColor", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "CreatedAt", kind: "scalar", jsonName: "CreatedAt", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "UpdatedAt", kind: "scalar", jsonName: "UpdatedAt", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<User>): User {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        if (value !== undefined)
            reflectionMergePartial<User>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: User): User {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Id = 1 [json_name = "Id"];*/ 1:
                    message.id = reader.string();
                    break;
                case /* optional string PhoneNumber = 2 [json_name = "PhoneNumber"];*/ 2:
                    message.phoneNumber = reader.string();
                    break;
                case /* optional string FullName = 3 [json_name = "FullName"];*/ 3:
                    message.fullName = reader.string();
                    break;
                case /* optional string CountryCode = 4 [json_name = "CountryCode"];*/ 4:
                    message.countryCode = reader.string();
                    break;
                case /* optional string Number = 5 [json_name = "Number"];*/ 5:
                    message.number = reader.string();
                    break;
                case /* optional string DialCode = 6 [json_name = "DialCode"];*/ 6:
                    message.dialCode = reader.string();
                    break;
                case /* optional string Address = 7 [json_name = "Address"];*/ 7:
                    message.address = reader.string();
                    break;
                case /* optional string Status = 8 [json_name = "Status"];*/ 8:
                    message.status = reader.string();
                    break;
                case /* optional string LastActive = 9 [json_name = "LastActive"];*/ 9:
                    message.lastActive = reader.string();
                    break;
                case /* optional string ProfilePicture = 10 [json_name = "ProfilePicture"];*/ 10:
                    message.profilePicture = reader.string();
                    break;
                case /* optional string UserBio = 11 [json_name = "UserBio"];*/ 11:
                    message.userBio = reader.string();
                    break;
                case /* optional string Username = 12 [json_name = "Username"];*/ 12:
                    message.username = reader.string();
                    break;
                case /* optional string BackgroundColor = 13 [json_name = "BackgroundColor"];*/ 13:
                    message.backgroundColor = reader.string();
                    break;
                case /* optional string CreatedAt = 14 [json_name = "CreatedAt"];*/ 14:
                    message.createdAt = reader.string();
                    break;
                case /* optional string UpdatedAt = 15 [json_name = "UpdatedAt"];*/ 15:
                    message.updatedAt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: User, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Id = 1 [json_name = "Id"]; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* optional string PhoneNumber = 2 [json_name = "PhoneNumber"]; */
        if (message.phoneNumber !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.phoneNumber);
        /* optional string FullName = 3 [json_name = "FullName"]; */
        if (message.fullName !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.fullName);
        /* optional string CountryCode = 4 [json_name = "CountryCode"]; */
        if (message.countryCode !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.countryCode);
        /* optional string Number = 5 [json_name = "Number"]; */
        if (message.number !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.number);
        /* optional string DialCode = 6 [json_name = "DialCode"]; */
        if (message.dialCode !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.dialCode);
        /* optional string Address = 7 [json_name = "Address"]; */
        if (message.address !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.address);
        /* optional string Status = 8 [json_name = "Status"]; */
        if (message.status !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.status);
        /* optional string LastActive = 9 [json_name = "LastActive"]; */
        if (message.lastActive !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.lastActive);
        /* optional string ProfilePicture = 10 [json_name = "ProfilePicture"]; */
        if (message.profilePicture !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.profilePicture);
        /* optional string UserBio = 11 [json_name = "UserBio"]; */
        if (message.userBio !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.userBio);
        /* optional string Username = 12 [json_name = "Username"]; */
        if (message.username !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.username);
        /* optional string BackgroundColor = 13 [json_name = "BackgroundColor"]; */
        if (message.backgroundColor !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.backgroundColor);
        /* optional string CreatedAt = 14 [json_name = "CreatedAt"]; */
        if (message.createdAt !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.createdAt);
        /* optional string UpdatedAt = 15 [json_name = "UpdatedAt"]; */
        if (message.updatedAt !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.updatedAt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.User
 */
export const User = new User$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyOtp$Type extends MessageType<VerifyOtp> {
    constructor() {
        super("yarsha.users.v1.VerifyOtp", [
            { no: 1, name: "User", kind: "message", jsonName: "User", T: () => User },
            { no: 2, name: "Token", kind: "scalar", jsonName: "Token", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "PrivateKey", kind: "scalar", jsonName: "PrivateKey", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<VerifyOtp>): VerifyOtp {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        message.privateKey = "";
        if (value !== undefined)
            reflectionMergePartial<VerifyOtp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyOtp): VerifyOtp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.User User = 1 [json_name = "User"];*/ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string Token = 2 [json_name = "Token"];*/ 2:
                    message.token = reader.string();
                    break;
                case /* string PrivateKey = 3 [json_name = "PrivateKey"];*/ 3:
                    message.privateKey = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyOtp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.User User = 1 [json_name = "User"]; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string Token = 2 [json_name = "Token"]; */
        if (message.token !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.token);
        /* string PrivateKey = 3 [json_name = "PrivateKey"]; */
        if (message.privateKey !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.privateKey);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.VerifyOtp
 */
export const VerifyOtp = new VerifyOtp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VerifyOtpResponse$Type extends MessageType<VerifyOtpResponse> {
    constructor() {
        super("yarsha.users.v1.VerifyOtpResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => VerifyOtp }
        ]);
    }
    create(value?: PartialMessage<VerifyOtpResponse>): VerifyOtpResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<VerifyOtpResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VerifyOtpResponse): VerifyOtpResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.users.v1.VerifyOtp Response = 2 [json_name = "Response"];*/ 2:
                    message.response = VerifyOtp.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VerifyOtpResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.users.v1.VerifyOtp Response = 2 [json_name = "Response"]; */
        if (message.response)
            VerifyOtp.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.VerifyOtpResponse
 */
export const VerifyOtpResponse = new VerifyOtpResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserId$Type extends MessageType<UserId> {
    constructor() {
        super("yarsha.users.v1.UserId", [
            { no: 1, name: "UserId", kind: "scalar", jsonName: "UserId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserId>): UserId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.userId = "";
        if (value !== undefined)
            reflectionMergePartial<UserId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserId): UserId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string UserId = 1 [json_name = "UserId"];*/ 1:
                    message.userId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string UserId = 1 [json_name = "UserId"]; */
        if (message.userId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.UserId
 */
export const UserId = new UserId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserInfoRequest$Type extends MessageType<GetUserInfoRequest> {
    constructor() {
        super("yarsha.users.v1.GetUserInfoRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => UserId }
        ]);
    }
    create(value?: PartialMessage<GetUserInfoRequest>): GetUserInfoRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetUserInfoRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserInfoRequest): GetUserInfoRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.users.v1.UserId Body = 2 [json_name = "Body"];*/ 2:
                    message.body = UserId.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserInfoRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.users.v1.UserId Body = 2 [json_name = "Body"]; */
        if (message.body)
            UserId.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.GetUserInfoRequest
 */
export const GetUserInfoRequest = new GetUserInfoRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserInfoResponse$Type extends MessageType<GetUserInfoResponse> {
    constructor() {
        super("yarsha.users.v1.GetUserInfoResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => User }
        ]);
    }
    create(value?: PartialMessage<GetUserInfoResponse>): GetUserInfoResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetUserInfoResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserInfoResponse): GetUserInfoResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.users.v1.User Response = 2 [json_name = "Response"];*/ 2:
                    message.response = User.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserInfoResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.users.v1.User Response = 2 [json_name = "Response"]; */
        if (message.response)
            User.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.GetUserInfoResponse
 */
export const GetUserInfoResponse = new GetUserInfoResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchUsersRequestBody$Type extends MessageType<SearchUsersRequestBody> {
    constructor() {
        super("yarsha.users.v1.SearchUsersRequestBody", [
            { no: 1, name: "SearchQuery", kind: "scalar", jsonName: "SearchQuery", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SearchUsersRequestBody>): SearchUsersRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.searchQuery = "";
        if (value !== undefined)
            reflectionMergePartial<SearchUsersRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchUsersRequestBody): SearchUsersRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string SearchQuery = 1 [json_name = "SearchQuery"];*/ 1:
                    message.searchQuery = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchUsersRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string SearchQuery = 1 [json_name = "SearchQuery"]; */
        if (message.searchQuery !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.searchQuery);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.SearchUsersRequestBody
 */
export const SearchUsersRequestBody = new SearchUsersRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchUsersRequest$Type extends MessageType<SearchUsersRequest> {
    constructor() {
        super("yarsha.users.v1.SearchUsersRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => SearchUsersRequestBody }
        ]);
    }
    create(value?: PartialMessage<SearchUsersRequest>): SearchUsersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SearchUsersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchUsersRequest): SearchUsersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.users.v1.SearchUsersRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = SearchUsersRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchUsersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.users.v1.SearchUsersRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            SearchUsersRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.SearchUsersRequest
 */
export const SearchUsersRequest = new SearchUsersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SearchUsersResponse$Type extends MessageType<SearchUsersResponse> {
    constructor() {
        super("yarsha.users.v1.SearchUsersResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", repeat: 1 /*RepeatType.PACKED*/, T: () => User }
        ]);
    }
    create(value?: PartialMessage<SearchUsersResponse>): SearchUsersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.response = [];
        if (value !== undefined)
            reflectionMergePartial<SearchUsersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SearchUsersResponse): SearchUsersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* repeated yarsha.users.v1.User Response = 2 [json_name = "Response"];*/ 2:
                    message.response.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SearchUsersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated yarsha.users.v1.User Response = 2 [json_name = "Response"]; */
        for (let i = 0; i < message.response.length; i++)
            User.internalBinaryWrite(message.response[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.SearchUsersResponse
 */
export const SearchUsersResponse = new SearchUsersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FcmToken$Type extends MessageType<FcmToken> {
    constructor() {
        super("yarsha.users.v1.FcmToken", [
            { no: 1, name: "DeviceId", kind: "scalar", jsonName: "DeviceId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Model", kind: "scalar", jsonName: "Model", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "LastUpdated", kind: "scalar", jsonName: "LastUpdated", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "Token", kind: "scalar", jsonName: "Token", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "UniqueDeviceId", kind: "scalar", jsonName: "UniqueDeviceId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FcmToken>): FcmToken {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.deviceId = "";
        message.model = "";
        message.lastUpdated = 0n;
        message.token = "";
        message.uniqueDeviceId = "";
        if (value !== undefined)
            reflectionMergePartial<FcmToken>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FcmToken): FcmToken {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string DeviceId = 1 [json_name = "DeviceId"];*/ 1:
                    message.deviceId = reader.string();
                    break;
                case /* string Model = 2 [json_name = "Model"];*/ 2:
                    message.model = reader.string();
                    break;
                case /* int64 LastUpdated = 3 [json_name = "LastUpdated"];*/ 3:
                    message.lastUpdated = reader.int64().toBigInt();
                    break;
                case /* string Token = 4 [json_name = "Token"];*/ 4:
                    message.token = reader.string();
                    break;
                case /* string UniqueDeviceId = 5 [json_name = "UniqueDeviceId"];*/ 5:
                    message.uniqueDeviceId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FcmToken, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string DeviceId = 1 [json_name = "DeviceId"]; */
        if (message.deviceId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.deviceId);
        /* string Model = 2 [json_name = "Model"]; */
        if (message.model !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.model);
        /* int64 LastUpdated = 3 [json_name = "LastUpdated"]; */
        if (message.lastUpdated !== 0n)
            writer.tag(3, WireType.Varint).int64(message.lastUpdated);
        /* string Token = 4 [json_name = "Token"]; */
        if (message.token !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.token);
        /* string UniqueDeviceId = 5 [json_name = "UniqueDeviceId"]; */
        if (message.uniqueDeviceId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.uniqueDeviceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.FcmToken
 */
export const FcmToken = new FcmToken$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserRequestBody$Type extends MessageType<UpdateUserRequestBody> {
    constructor() {
        super("yarsha.users.v1.UpdateUserRequestBody", [
            { no: 1, name: "User", kind: "message", jsonName: "User", T: () => User },
            { no: 2, name: "FcmToken", kind: "message", jsonName: "FcmToken", T: () => FcmToken }
        ]);
    }
    create(value?: PartialMessage<UpdateUserRequestBody>): UpdateUserRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateUserRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserRequestBody): UpdateUserRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.User User = 1 [json_name = "User"];*/ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* optional yarsha.users.v1.FcmToken FcmToken = 2 [json_name = "FcmToken"];*/ 2:
                    message.fcmToken = FcmToken.internalBinaryRead(reader, reader.uint32(), options, message.fcmToken);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.User User = 1 [json_name = "User"]; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional yarsha.users.v1.FcmToken FcmToken = 2 [json_name = "FcmToken"]; */
        if (message.fcmToken)
            FcmToken.internalBinaryWrite(message.fcmToken, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.UpdateUserRequestBody
 */
export const UpdateUserRequestBody = new UpdateUserRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserRequest$Type extends MessageType<UpdateUserRequest> {
    constructor() {
        super("yarsha.users.v1.UpdateUserRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => UpdateUserRequestBody }
        ]);
    }
    create(value?: PartialMessage<UpdateUserRequest>): UpdateUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserRequest): UpdateUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.users.v1.UpdateUserRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = UpdateUserRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.users.v1.UpdateUserRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            UpdateUserRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.UpdateUserRequest
 */
export const UpdateUserRequest = new UpdateUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateUserResponse$Type extends MessageType<UpdateUserResponse> {
    constructor() {
        super("yarsha.users.v1.UpdateUserResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => User }
        ]);
    }
    create(value?: PartialMessage<UpdateUserResponse>): UpdateUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateUserResponse): UpdateUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.users.v1.User Response = 2 [json_name = "Response"];*/ 2:
                    message.response = User.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.users.v1.User Response = 2 [json_name = "Response"]; */
        if (message.response)
            User.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.UpdateUserResponse
 */
export const UpdateUserResponse = new UpdateUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckYarshaUserRequestBody$Type extends MessageType<CheckYarshaUserRequestBody> {
    constructor() {
        super("yarsha.users.v1.CheckYarshaUserRequestBody", [
            { no: 1, name: "ContactList", kind: "scalar", jsonName: "ContactList", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CheckYarshaUserRequestBody>): CheckYarshaUserRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.contactList = [];
        if (value !== undefined)
            reflectionMergePartial<CheckYarshaUserRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckYarshaUserRequestBody): CheckYarshaUserRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string ContactList = 1 [json_name = "ContactList"];*/ 1:
                    message.contactList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckYarshaUserRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string ContactList = 1 [json_name = "ContactList"]; */
        for (let i = 0; i < message.contactList.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.contactList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.CheckYarshaUserRequestBody
 */
export const CheckYarshaUserRequestBody = new CheckYarshaUserRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckYarshaUserRequest$Type extends MessageType<CheckYarshaUserRequest> {
    constructor() {
        super("yarsha.users.v1.CheckYarshaUserRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => CheckYarshaUserRequestBody }
        ]);
    }
    create(value?: PartialMessage<CheckYarshaUserRequest>): CheckYarshaUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CheckYarshaUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckYarshaUserRequest): CheckYarshaUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.users.v1.CheckYarshaUserRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = CheckYarshaUserRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckYarshaUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.users.v1.CheckYarshaUserRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            CheckYarshaUserRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.CheckYarshaUserRequest
 */
export const CheckYarshaUserRequest = new CheckYarshaUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchedUsers$Type extends MessageType<MatchedUsers> {
    constructor() {
        super("yarsha.users.v1.MatchedUsers", [
            { no: 1, name: "MatchedUsers", kind: "message", jsonName: "MatchedUsers", repeat: 1 /*RepeatType.PACKED*/, T: () => User }
        ]);
    }
    create(value?: PartialMessage<MatchedUsers>): MatchedUsers {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.matchedUsers = [];
        if (value !== undefined)
            reflectionMergePartial<MatchedUsers>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchedUsers): MatchedUsers {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated yarsha.users.v1.User MatchedUsers = 1 [json_name = "MatchedUsers"];*/ 1:
                    message.matchedUsers.push(User.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchedUsers, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated yarsha.users.v1.User MatchedUsers = 1 [json_name = "MatchedUsers"]; */
        for (let i = 0; i < message.matchedUsers.length; i++)
            User.internalBinaryWrite(message.matchedUsers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.MatchedUsers
 */
export const MatchedUsers = new MatchedUsers$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckYarshaUserResponse$Type extends MessageType<CheckYarshaUserResponse> {
    constructor() {
        super("yarsha.users.v1.CheckYarshaUserResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => MatchedUsers }
        ]);
    }
    create(value?: PartialMessage<CheckYarshaUserResponse>): CheckYarshaUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CheckYarshaUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckYarshaUserResponse): CheckYarshaUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.users.v1.MatchedUsers Response = 2 [json_name = "Response"];*/ 2:
                    message.response = MatchedUsers.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckYarshaUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.users.v1.MatchedUsers Response = 2 [json_name = "Response"]; */
        if (message.response)
            MatchedUsers.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.CheckYarshaUserResponse
 */
export const CheckYarshaUserResponse = new CheckYarshaUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutRequest$Type extends MessageType<LogoutRequest> {
    constructor() {
        super("yarsha.users.v1.LogoutRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "FcmToken", kind: "scalar", jsonName: "FcmToken", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LogoutRequest>): LogoutRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fcmToken = "";
        if (value !== undefined)
            reflectionMergePartial<LogoutRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogoutRequest): LogoutRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* string FcmToken = 2 [json_name = "FcmToken"];*/ 2:
                    message.fcmToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogoutRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string FcmToken = 2 [json_name = "FcmToken"]; */
        if (message.fcmToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fcmToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.LogoutRequest
 */
export const LogoutRequest = new LogoutRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutResponseBody$Type extends MessageType<LogoutResponseBody> {
    constructor() {
        super("yarsha.users.v1.LogoutResponseBody", [
            { no: 1, name: "SuccessMessage", kind: "scalar", jsonName: "SuccessMessage", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LogoutResponseBody>): LogoutResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.successMessage = "";
        if (value !== undefined)
            reflectionMergePartial<LogoutResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogoutResponseBody): LogoutResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string SuccessMessage = 1 [json_name = "SuccessMessage"];*/ 1:
                    message.successMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogoutResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string SuccessMessage = 1 [json_name = "SuccessMessage"]; */
        if (message.successMessage !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.successMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.LogoutResponseBody
 */
export const LogoutResponseBody = new LogoutResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutResponse$Type extends MessageType<LogoutResponse> {
    constructor() {
        super("yarsha.users.v1.LogoutResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => LogoutResponseBody }
        ]);
    }
    create(value?: PartialMessage<LogoutResponse>): LogoutResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<LogoutResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogoutResponse): LogoutResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.users.v1.LogoutResponseBody Response = 2 [json_name = "Response"];*/ 2:
                    message.response = LogoutResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogoutResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.users.v1.LogoutResponseBody Response = 2 [json_name = "Response"]; */
        if (message.response)
            LogoutResponseBody.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.LogoutResponse
 */
export const LogoutResponse = new LogoutResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAccountRequestBody$Type extends MessageType<DeleteAccountRequestBody> {
    constructor() {
        super("yarsha.users.v1.DeleteAccountRequestBody", [
            { no: 1, name: "Reason", kind: "scalar", jsonName: "Reason", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteAccountRequestBody>): DeleteAccountRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.reason = [];
        if (value !== undefined)
            reflectionMergePartial<DeleteAccountRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAccountRequestBody): DeleteAccountRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string Reason = 1 [json_name = "Reason"];*/ 1:
                    message.reason.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteAccountRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string Reason = 1 [json_name = "Reason"]; */
        for (let i = 0; i < message.reason.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.reason[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.DeleteAccountRequestBody
 */
export const DeleteAccountRequestBody = new DeleteAccountRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAccountRequest$Type extends MessageType<DeleteAccountRequest> {
    constructor() {
        super("yarsha.users.v1.DeleteAccountRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => requestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => DeleteAccountRequestBody }
        ]);
    }
    create(value?: PartialMessage<DeleteAccountRequest>): DeleteAccountRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteAccountRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAccountRequest): DeleteAccountRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = requestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.users.v1.DeleteAccountRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = DeleteAccountRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteAccountRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.requestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            requestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.users.v1.DeleteAccountRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            DeleteAccountRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.DeleteAccountRequest
 */
export const DeleteAccountRequest = new DeleteAccountRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAccountResponseBody$Type extends MessageType<DeleteAccountResponseBody> {
    constructor() {
        super("yarsha.users.v1.DeleteAccountResponseBody", [
            { no: 1, name: "SuccessMessage", kind: "scalar", jsonName: "SuccessMessage", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteAccountResponseBody>): DeleteAccountResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.successMessage = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteAccountResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAccountResponseBody): DeleteAccountResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string SuccessMessage = 1 [json_name = "SuccessMessage"];*/ 1:
                    message.successMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteAccountResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string SuccessMessage = 1 [json_name = "SuccessMessage"]; */
        if (message.successMessage !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.successMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.DeleteAccountResponseBody
 */
export const DeleteAccountResponseBody = new DeleteAccountResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAccountResponse$Type extends MessageType<DeleteAccountResponse> {
    constructor() {
        super("yarsha.users.v1.DeleteAccountResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => responseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => DeleteAccountResponseBody }
        ]);
    }
    create(value?: PartialMessage<DeleteAccountResponse>): DeleteAccountResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteAccountResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAccountResponse): DeleteAccountResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = responseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.users.v1.DeleteAccountResponseBody Response = 2 [json_name = "Response"];*/ 2:
                    message.response = DeleteAccountResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteAccountResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.users.v1.responseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            responseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.users.v1.DeleteAccountResponseBody Response = 2 [json_name = "Response"]; */
        if (message.response)
            DeleteAccountResponseBody.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.users.v1.DeleteAccountResponse
 */
export const DeleteAccountResponse = new DeleteAccountResponse$Type();
/**
 * @generated ServiceType for protobuf service yarsha.users.v1.UserService
 */
export const UserService = new ServiceType("yarsha.users.v1.UserService", [
    { name: "SendOtp", options: {}, I: SendOtpRequest, O: SendOtpResponse },
    { name: "VerifyOtp", options: {}, I: VerifyOtpRequest, O: VerifyOtpResponse },
    { name: "GetUserById", options: {}, I: GetUserInfoRequest, O: GetUserInfoResponse },
    { name: "SearchUsers", options: {}, I: SearchUsersRequest, O: SearchUsersResponse },
    { name: "UpdateUserProfile", options: {}, I: UpdateUserRequest, O: UpdateUserResponse },
    { name: "CheckYarshaUser", options: {}, I: CheckYarshaUserRequest, O: CheckYarshaUserResponse },
    { name: "Logout", options: {}, I: LogoutRequest, O: LogoutResponse },
    { name: "DeleteAccount", options: {}, I: DeleteAccountRequest, O: DeleteAccountResponse }
]);
