// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "groupchat.proto" (package "yarsha.groupchat.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message yarsha.groupchat.v1.RequestHeader
 */
export interface RequestHeader {
    /**
     * @generated from protobuf field: string RequestId = 1 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string Timestamp = 2 [json_name = "Timestamp"];
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string Channel = 3 [json_name = "Channel"];
     */
    channel: string;
    /**
     * @generated from protobuf field: string DeviceType = 4 [json_name = "DeviceType"];
     */
    deviceType: string;
    /**
     * @generated from protobuf field: string DeviceId = 5 [json_name = "DeviceId"];
     */
    deviceId: string;
    /**
     * @generated from protobuf field: string ClientIp = 6 [json_name = "ClientIp"];
     */
    clientIp: string;
    /**
     * @generated from protobuf field: string Action = 7 [json_name = "Action"];
     */
    action: string;
    /**
     * @generated from protobuf field: string AppVersion = 8 [json_name = "AppVersion"];
     */
    appVersion: string;
    /**
     * @generated from protobuf field: string LanguageCode = 9 [json_name = "LanguageCode"];
     */
    languageCode: string;
    /**
     * @generated from protobuf field: string DeviceModel = 10 [json_name = "DeviceModel"];
     */
    deviceModel: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.ResponseHeader
 */
export interface ResponseHeader {
    /**
     * @generated from protobuf field: int32 Status = 1 [json_name = "Status"];
     */
    status: number;
    /**
     * @generated from protobuf field: string StatusCode = 2 [json_name = "StatusCode"];
     */
    statusCode: string;
    /**
     * @generated from protobuf field: string Timestamp = 3 [json_name = "Timestamp"];
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string RequestId = 4 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string ResponseTitle = 5 [json_name = "ResponseTitle"];
     */
    responseTitle: string;
    /**
     * @generated from protobuf field: string ResponseDescription = 6 [json_name = "ResponseDescription"];
     */
    responseDescription: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GroupChatRequestBody
 */
export interface GroupChatRequestBody {
    /**
     * @generated from protobuf field: string GroupName = 1 [json_name = "GroupName"];
     */
    groupName: string;
    /**
     * @generated from protobuf field: repeated string ParticipantsId = 2 [json_name = "ParticipantsId"];
     */
    participantsId: string[];
    /**
     * @generated from protobuf field: optional string GroupIcon = 3 [json_name = "GroupIcon"];
     */
    groupIcon?: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GroupChatResponseBody
 */
export interface GroupChatResponseBody {
    /**
     * @generated from protobuf field: string GroupId = 1 [json_name = "GroupId"];
     */
    groupId: string;
    /**
     * @generated from protobuf field: string GroupName = 2 [json_name = "GroupName"];
     */
    groupName: string;
    /**
     * @generated from protobuf field: string Type = 3 [json_name = "Type"];
     */
    type: string;
    /**
     * @generated from protobuf field: repeated string ParticipantsId = 4 [json_name = "ParticipantsId"];
     */
    participantsId: string[];
    /**
     * @generated from protobuf field: optional string GroupIcon = 5 [json_name = "GroupIcon"];
     */
    groupIcon?: string;
    /**
     * @generated from protobuf field: optional string BackgroundColor = 6 [json_name = "BackgroundColor"];
     */
    backgroundColor?: string;
    /**
     * @generated from protobuf field: optional string LastActive = 7 [json_name = "LastActive"];
     */
    lastActive?: string;
    /**
     * @generated from protobuf field: optional string Status = 8 [json_name = "Status"];
     */
    status?: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GroupChatRequestWrapper
 */
export interface GroupChatRequestWrapper {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.GroupChatRequestBody Body = 2 [json_name = "Body"];
     */
    body?: GroupChatRequestBody;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GroupChatResponseWrapper
 */
export interface GroupChatResponseWrapper {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.GroupChatResponseBody Response = 2 [json_name = "Response"];
     */
    response?: GroupChatResponseBody;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GroupChatsRequestBody
 */
export interface GroupChatsRequestBody {
    /**
     * @generated from protobuf field: string Limit = 1 [json_name = "Limit"];
     */
    limit: string;
    /**
     * @generated from protobuf field: string Page = 2 [json_name = "Page"];
     */
    page: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GroupChatsRequest
 */
export interface GroupChatsRequest {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.GroupChatsRequestBody Body = 2 [json_name = "Body"];
     */
    body?: GroupChatsRequestBody;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.Multimedia
 */
export interface Multimedia {
    /**
     * @generated from protobuf field: string FilePath = 1 [json_name = "FilePath"];
     */
    filePath: string;
    /**
     * @generated from protobuf field: string SignedUrl = 2 [json_name = "SignedUrl"];
     */
    signedUrl: string;
    /**
     * @generated from protobuf field: int64 ExpirationTime = 3 [json_name = "ExpirationTime"];
     */
    expirationTime: bigint;
    /**
     * @generated from protobuf field: string MimeType = 4 [json_name = "MimeType"];
     */
    mimeType: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.Transaction
 */
export interface Transaction {
    /**
     * @generated from protobuf field: string FromWallet = 1 [json_name = "FromWallet"];
     */
    fromWallet: string;
    /**
     * @generated from protobuf field: string ToWallet = 2 [json_name = "ToWallet"];
     */
    toWallet: string;
    /**
     * @generated from protobuf field: string SenderId = 3 [json_name = "SenderId"];
     */
    senderId: string;
    /**
     * @generated from protobuf field: string Amount = 4 [json_name = "Amount"];
     */
    amount: string;
    /**
     * @generated from protobuf field: int64 Timestamp = 5 [json_name = "Timestamp"];
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: string Signature = 6 [json_name = "Signature"];
     */
    signature: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.Reply
 */
export interface Reply {
    /**
     * @generated from protobuf field: string ReplyToId = 1 [json_name = "ReplyToId"];
     */
    replyToId: string;
    /**
     * @generated from protobuf field: string ReplyToContent = 2 [json_name = "ReplyToContent"];
     */
    replyToContent: string;
    /**
     * @generated from protobuf field: string ReplyToSenderName = 3 [json_name = "ReplyToSenderName"];
     */
    replyToSenderName: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.LastMessage
 */
export interface LastMessage {
    /**
     * @generated from protobuf field: string MessageId = 1 [json_name = "MessageId"];
     */
    messageId: string;
    /**
     * @generated from protobuf field: string SenderId = 2 [json_name = "SenderId"];
     */
    senderId: string;
    /**
     * @generated from protobuf field: string SenderName = 3 [json_name = "SenderName"];
     */
    senderName: string;
    /**
     * @generated from protobuf field: string Text = 4 [json_name = "Text"];
     */
    text: string;
    /**
     * @generated from protobuf field: string MessageType = 5 [json_name = "MessageType"];
     */
    messageType: string;
    /**
     * @generated from protobuf field: string Timestamp = 6 [json_name = "Timestamp"];
     */
    timestamp: string;
    /**
     * @generated from protobuf field: repeated yarsha.groupchat.v1.Multimedia Multimedia = 7 [json_name = "Multimedia"];
     */
    multimedia: Multimedia[];
    /**
     * @generated from protobuf field: optional yarsha.groupchat.v1.Transaction Transaction = 8 [json_name = "Transaction"];
     */
    transaction?: Transaction;
    /**
     * @generated from protobuf field: optional yarsha.groupchat.v1.Reply ReplyTo = 9 [json_name = "ReplyTo"];
     */
    replyTo?: Reply;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.SeenDetail
 */
export interface SeenDetail {
    /**
     * @generated from protobuf field: string ParticipantId = 1 [json_name = "ParticipantId"];
     */
    participantId: string;
    /**
     * @generated from protobuf field: string SeenCount = 2 [json_name = "SeenCount"];
     */
    seenCount: string;
    /**
     * @generated from protobuf field: string Timestamp = 3 [json_name = "Timestamp"];
     */
    timestamp: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GroupChatDetail
 */
export interface GroupChatDetail {
    /**
     * @generated from protobuf field: string GroupId = 1 [json_name = "GroupId"];
     */
    groupId: string;
    /**
     * @generated from protobuf field: string GroupName = 2 [json_name = "GroupName"];
     */
    groupName: string;
    /**
     * @generated from protobuf field: string GroupIcon = 3 [json_name = "GroupIcon"];
     */
    groupIcon: string;
    /**
     * @generated from protobuf field: string Type = 4 [json_name = "Type"];
     */
    type: string;
    /**
     * @generated from protobuf field: string MessageCount = 5 [json_name = "MessageCount"];
     */
    messageCount: string;
    /**
     * @generated from protobuf field: string BackgroundColor = 6 [json_name = "BackgroundColor"];
     */
    backgroundColor: string;
    /**
     * @generated from protobuf field: repeated string ParticipantsId = 7 [json_name = "ParticipantsId"];
     */
    participantsId: string[];
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.LastMessage LastMessage = 8 [json_name = "LastMessage"];
     */
    lastMessage?: LastMessage;
    /**
     * @generated from protobuf field: int32 UnreadCount = 9 [json_name = "UnreadCount"];
     */
    unreadCount: number;
    /**
     * @generated from protobuf field: string UpdatedAt = 10 [json_name = "UpdatedAt"];
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string IsMuted = 11 [json_name = "IsMuted"];
     */
    isMuted: string;
    /**
     * @generated from protobuf field: optional string IsPinned = 12 [json_name = "IsPinned"];
     */
    isPinned?: string;
    /**
     * @generated from protobuf field: repeated yarsha.groupchat.v1.SeenDetail SeenDetails = 13 [json_name = "SeenDetails"];
     */
    seenDetails: SeenDetail[];
    /**
     * @generated from protobuf field: bool IsIndividualBotChat = 14 [json_name = "IsIndividualBotChat"];
     */
    isIndividualBotChat: boolean;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GroupChatDetailResponseBody
 */
export interface GroupChatDetailResponseBody {
    /**
     * @generated from protobuf field: repeated yarsha.groupchat.v1.GroupChatDetail GroupChats = 1 [json_name = "GroupChats"];
     */
    groupChats: GroupChatDetail[];
    /**
     * @generated from protobuf field: string TotalPages = 2 [json_name = "TotalPages"];
     */
    totalPages: string;
    /**
     * @generated from protobuf field: string CurrentPage = 3 [json_name = "CurrentPage"];
     */
    currentPage: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GroupChatsResponse
 */
export interface GroupChatsResponse {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.GroupChatDetailResponseBody Response = 2 [json_name = "Response"];
     */
    response?: GroupChatDetailResponseBody;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GetGroupChatDetailsRequest
 */
export interface GetGroupChatDetailsRequest {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: string ChatId = 2 [json_name = "ChatId"];
     */
    chatId: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.ParticipantDetail
 */
export interface ParticipantDetail {
    /**
     * @generated from protobuf field: string Id = 1 [json_name = "Id"];
     */
    id: string;
    /**
     * @generated from protobuf field: string Username = 2 [json_name = "Username"];
     */
    username: string;
    /**
     * @generated from protobuf field: string FullName = 3 [json_name = "FullName"];
     */
    fullName: string;
    /**
     * @generated from protobuf field: string ProfilePicture = 4 [json_name = "ProfilePicture"];
     */
    profilePicture: string;
    /**
     * @generated from protobuf field: string Address = 5 [json_name = "Address"];
     */
    address: string;
    /**
     * @generated from protobuf field: string UserBio = 6 [json_name = "UserBio"];
     */
    userBio: string;
    /**
     * @generated from protobuf field: string Role = 7 [json_name = "Role"];
     */
    role: string;
    /**
     * @generated from protobuf field: string BackgroundColor = 8 [json_name = "BackgroundColor"];
     */
    backgroundColor: string;
    /**
     * @generated from protobuf field: string LastActive = 9 [json_name = "LastActive"];
     */
    lastActive: string;
    /**
     * @generated from protobuf field: string Status = 10 [json_name = "Status"];
     */
    status: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.ChatDetail
 */
export interface ChatDetail {
    /**
     * @generated from protobuf field: string ChatId = 1 [json_name = "ChatId"];
     */
    chatId: string;
    /**
     * @generated from protobuf field: string GroupName = 2 [json_name = "GroupName"];
     */
    groupName: string;
    /**
     * @generated from protobuf field: string GroupIcon = 3 [json_name = "GroupIcon"];
     */
    groupIcon: string;
    /**
     * @generated from protobuf field: string BackgroundColor = 4 [json_name = "BackgroundColor"];
     */
    backgroundColor: string;
    /**
     * @generated from protobuf field: repeated string ParticipantsId = 5 [json_name = "ParticipantsId"];
     */
    participantsId: string[];
    /**
     * @generated from protobuf field: repeated yarsha.groupchat.v1.ParticipantDetail ParticipantDetails = 6 [json_name = "ParticipantDetails"];
     */
    participantDetails: ParticipantDetail[];
    /**
     * @generated from protobuf field: string Type = 7 [json_name = "Type"];
     */
    type: string;
    /**
     * @generated from protobuf field: string GroupDescription = 8 [json_name = "GroupDescription"];
     */
    groupDescription: string;
    /**
     * @generated from protobuf field: bool IsMuted = 9 [json_name = "IsMuted"];
     */
    isMuted: boolean;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GetGroupChatDetailsResponse
 */
export interface GetGroupChatDetailsResponse {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ChatDetail Chat = 2 [json_name = "Chat"];
     */
    chat?: ChatDetail;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GetUserChatIdsResponse
 */
export interface GetUserChatIdsResponse {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: repeated string ChatIds = 2 [json_name = "ChatIds"];
     */
    chatIds: string[];
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.PeerId
 */
export interface PeerId {
    /**
     * @generated from protobuf field: string PeerId = 1 [json_name = "PeerId"];
     */
    peerId: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.CheckIndividualChatRequestWrapper
 */
export interface CheckIndividualChatRequestWrapper {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.PeerId Body = 2 [json_name = "Body"];
     */
    body?: PeerId;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.CheckIndividualChatResponseWrapper
 */
export interface CheckIndividualChatResponseWrapper {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.GroupChatResponseBody Response = 2 [json_name = "Response"];
     */
    response?: GroupChatResponseBody;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GetFriendsChatIdsRequest
 */
export interface GetFriendsChatIdsRequest {
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GetFriendsChatIdsResponse
 */
export interface GetFriendsChatIdsResponse {
    /**
     * @generated from protobuf field: repeated string ChatIds = 1 [json_name = "ChatIds"];
     */
    chatIds: string[];
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.AddParticipantsRequestBody
 */
export interface AddParticipantsRequestBody {
    /**
     * @generated from protobuf field: string GroupId = 1 [json_name = "GroupId"];
     */
    groupId: string;
    /**
     * @generated from protobuf field: repeated string ParticipantsId = 2 [json_name = "ParticipantsId"];
     */
    participantsId: string[];
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.AddParticipantsRequestWrapper
 */
export interface AddParticipantsRequestWrapper {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.AddParticipantsRequestBody Body = 2 [json_name = "Body"];
     */
    body?: AddParticipantsRequestBody;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.AddParticipantDetails
 */
export interface AddParticipantDetails {
    /**
     * @generated from protobuf field: string Id = 1 [json_name = "Id"];
     */
    id: string;
    /**
     * @generated from protobuf field: string FullName = 2 [json_name = "FullName"];
     */
    fullName: string;
    /**
     * @generated from protobuf field: string Username = 3 [json_name = "Username"];
     */
    username: string;
    /**
     * @generated from protobuf field: string Role = 4 [json_name = "Role"];
     */
    role: string;
    /**
     * @generated from protobuf field: string ProfilePicture = 5 [json_name = "ProfilePicture"];
     */
    profilePicture: string;
    /**
     * @generated from protobuf field: string BackgroundColor = 6 [json_name = "BackgroundColor"];
     */
    backgroundColor: string;
    /**
     * @generated from protobuf field: string LastActive = 7 [json_name = "LastActive"];
     */
    lastActive: string;
    /**
     * @generated from protobuf field: string Status = 8 [json_name = "Status"];
     */
    status: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.AddParticipantsResponseBody
 */
export interface AddParticipantsResponseBody {
    /**
     * @generated from protobuf field: string GroupId = 1 [json_name = "GroupId"];
     */
    groupId: string;
    /**
     * @generated from protobuf field: repeated string AddedParticipants = 2 [json_name = "AddedParticipants"];
     */
    addedParticipants: string[];
    /**
     * @generated from protobuf field: repeated yarsha.groupchat.v1.AddParticipantDetails ParticipantDetails = 3 [json_name = "ParticipantDetails"];
     */
    participantDetails: AddParticipantDetails[];
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.AddParticipantsResponseWrapper
 */
export interface AddParticipantsResponseWrapper {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.AddParticipantsResponseBody Response = 2 [json_name = "Response"];
     */
    response?: AddParticipantsResponseBody;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GroupChatsStreamRequest
 */
export interface GroupChatsStreamRequest {
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.TriggerGroupChatUpdateRequest
 */
export interface TriggerGroupChatUpdateRequest {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: string ChatId = 2 [json_name = "ChatId"];
     */
    chatId: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.TriggerGroupChatUpdateResponse
 */
export interface TriggerGroupChatUpdateResponse {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.UpdateGroupChatData
 */
export interface UpdateGroupChatData {
    /**
     * @generated from protobuf field: optional string Name = 1 [json_name = "Name"];
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string Description = 2 [json_name = "Description"];
     */
    description?: string;
    /**
     * @generated from protobuf field: optional string GroupIcon = 3 [json_name = "GroupIcon"];
     */
    groupIcon?: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.UpdateGroupChatRequestBody
 */
export interface UpdateGroupChatRequestBody {
    /**
     * @generated from protobuf field: string ChatId = 1 [json_name = "ChatId"];
     */
    chatId: string;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.UpdateGroupChatData Data = 2 [json_name = "Data"];
     */
    data?: UpdateGroupChatData;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.UpdateGroupChatRequest
 */
export interface UpdateGroupChatRequest {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.UpdateGroupChatRequestBody Body = 2 [json_name = "Body"];
     */
    body?: UpdateGroupChatRequestBody;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.UpdateGroupChatResponseBody
 */
export interface UpdateGroupChatResponseBody {
    /**
     * @generated from protobuf field: string ChatId = 1 [json_name = "ChatId"];
     */
    chatId: string;
    /**
     * @generated from protobuf field: string GroupName = 2 [json_name = "GroupName"];
     */
    groupName: string;
    /**
     * @generated from protobuf field: string GroupIcon = 3 [json_name = "GroupIcon"];
     */
    groupIcon: string;
    /**
     * @generated from protobuf field: string Type = 4 [json_name = "Type"];
     */
    type: string;
    /**
     * @generated from protobuf field: string Description = 5 [json_name = "Description"];
     */
    description: string;
    /**
     * @generated from protobuf field: string BackgroundColor = 6 [json_name = "BackgroundColor"];
     */
    backgroundColor: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.UpdateGroupChatResponse
 */
export interface UpdateGroupChatResponse {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.UpdateGroupChatResponseBody Response = 2 [json_name = "Response"];
     */
    response?: UpdateGroupChatResponseBody;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.UserChats
 */
export interface UserChats {
    /**
     * @generated from protobuf field: string ChatId = 1 [json_name = "ChatId"];
     */
    chatId: string;
    /**
     * @generated from protobuf field: string GroupName = 2 [json_name = "GroupName"];
     */
    groupName: string;
    /**
     * @generated from protobuf field: string GroupIcon = 3 [json_name = "GroupIcon"];
     */
    groupIcon: string;
    /**
     * @generated from protobuf field: string Type = 4 [json_name = "Type"];
     */
    type: string;
    /**
     * @generated from protobuf field: string Description = 5 [json_name = "Description"];
     */
    description: string;
    /**
     * @generated from protobuf field: string BackgroundColor = 6 [json_name = "BackgroundColor"];
     */
    backgroundColor: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GetUserChatsResponseBody
 */
export interface GetUserChatsResponseBody {
    /**
     * @generated from protobuf field: repeated yarsha.groupchat.v1.UserChats Chats = 1 [json_name = "Chats"];
     */
    chats: UserChats[];
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GetUserChatsResponse
 */
export interface GetUserChatsResponse {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.GetUserChatsResponseBody Response = 2 [json_name = "Response"];
     */
    response?: GetUserChatsResponseBody;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.FriendDetail
 */
export interface FriendDetail {
    /**
     * @generated from protobuf field: string FriendId = 1 [json_name = "FriendId"];
     */
    friendId: string;
    /**
     * @generated from protobuf field: string FullName = 2 [json_name = "FullName"];
     */
    fullName: string;
    /**
     * @generated from protobuf field: string Username = 3 [json_name = "Username"];
     */
    username: string;
    /**
     * @generated from protobuf field: string ProfilePicture = 4 [json_name = "ProfilePicture"];
     */
    profilePicture: string;
    /**
     * @generated from protobuf field: string BackgroundColor = 5 [json_name = "BackgroundColor"];
     */
    backgroundColor: string;
    /**
     * @generated from protobuf field: string LastActive = 6 [json_name = "LastActive"];
     */
    lastActive: string;
    /**
     * @generated from protobuf field: string Status = 7 [json_name = "Status"];
     */
    status: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GetFriendListResponseBody
 */
export interface GetFriendListResponseBody {
    /**
     * @generated from protobuf field: repeated yarsha.groupchat.v1.FriendDetail Friends = 1 [json_name = "Friends"];
     */
    friends: FriendDetail[];
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.GetFriendListResponse
 */
export interface GetFriendListResponse {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.GetFriendListResponseBody Response = 2 [json_name = "Response"];
     */
    response?: GetFriendListResponseBody;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.ToggleMuteGroupChatRequest
 */
export interface ToggleMuteGroupChatRequest {
    /**
     * @generated from protobuf field: string ChatId = 1 [json_name = "ChatId"];
     */
    chatId: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.ToggleMuteGroupChatRequestWrapper
 */
export interface ToggleMuteGroupChatRequestWrapper {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ToggleMuteGroupChatRequest Body = 2 [json_name = "Body"];
     */
    body?: ToggleMuteGroupChatRequest;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.ToggleMuteGroupChatResponse
 */
export interface ToggleMuteGroupChatResponse {
    /**
     * @generated from protobuf field: string ChatId = 1 [json_name = "ChatId"];
     */
    chatId: string;
    /**
     * @generated from protobuf field: bool MuteStatus = 2 [json_name = "MuteStatus"];
     */
    muteStatus: boolean;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.ToggleMuteGroupChatResponseWrapper
 */
export interface ToggleMuteGroupChatResponseWrapper {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ToggleMuteGroupChatResponse Response = 2 [json_name = "Response"];
     */
    response?: ToggleMuteGroupChatResponse;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.TogglePinGroupChatRequest
 */
export interface TogglePinGroupChatRequest {
    /**
     * @generated from protobuf field: string ChatId = 1 [json_name = "ChatId"];
     */
    chatId: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.TogglePinGroupChatRequestWrapper
 */
export interface TogglePinGroupChatRequestWrapper {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.TogglePinGroupChatRequest Body = 2 [json_name = "Body"];
     */
    body?: TogglePinGroupChatRequest;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.TogglePinGroupChatResponse
 */
export interface TogglePinGroupChatResponse {
    /**
     * @generated from protobuf field: string ChatId = 1 [json_name = "ChatId"];
     */
    chatId: string;
    /**
     * @generated from protobuf field: string PinStatus = 2 [json_name = "PinStatus"];
     */
    pinStatus: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.TogglePinGroupChatResponseWrapper
 */
export interface TogglePinGroupChatResponseWrapper {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.TogglePinGroupChatResponse Response = 2 [json_name = "Response"];
     */
    response?: TogglePinGroupChatResponse;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.DeleteGroupChatRequest
 */
export interface DeleteGroupChatRequest {
    /**
     * @generated from protobuf field: string ChatId = 1 [json_name = "ChatId"];
     */
    chatId: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.DeleteGroupChatRequestWrapper
 */
export interface DeleteGroupChatRequestWrapper {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.DeleteGroupChatRequest Body = 2 [json_name = "Body"];
     */
    body?: DeleteGroupChatRequest;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.DeleteGroupChatResponse
 */
export interface DeleteGroupChatResponse {
    /**
     * @generated from protobuf field: string ChatId = 1 [json_name = "ChatId"];
     */
    chatId: string;
    /**
     * @generated from protobuf field: bool IsDeleted = 2 [json_name = "IsDeleted"];
     */
    isDeleted: boolean;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.DeleteGroupChatResponseWrapper
 */
export interface DeleteGroupChatResponseWrapper {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.DeleteGroupChatResponse Response = 2 [json_name = "Response"];
     */
    response?: DeleteGroupChatResponse;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.MarkAsSeenRequest
 */
export interface MarkAsSeenRequest {
    /**
     * @generated from protobuf field: string ChatId = 1 [json_name = "ChatId"];
     */
    chatId: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.MarkAsSeenRequestWrapper
 */
export interface MarkAsSeenRequestWrapper {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.MarkAsSeenRequest Body = 2 [json_name = "Body"];
     */
    body?: MarkAsSeenRequest;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.MarkAsSeenResponse
 */
export interface MarkAsSeenResponse {
    /**
     * @generated from protobuf field: string ChatId = 1 [json_name = "ChatId"];
     */
    chatId: string;
    /**
     * @generated from protobuf field: bool Success = 2 [json_name = "Success"];
     */
    success: boolean;
}
/**
 * @generated from protobuf message yarsha.groupchat.v1.MarkAsSeenResponseWrapper
 */
export interface MarkAsSeenResponseWrapper {
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.v1.MarkAsSeenResponse Response = 2 [json_name = "Response"];
     */
    response?: MarkAsSeenResponse;
}
// @generated message type with reflection information, may provide speed optimized methods
class RequestHeader$Type extends MessageType<RequestHeader> {
    constructor() {
        super("yarsha.groupchat.v1.RequestHeader", [
            { no: 1, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Channel", kind: "scalar", jsonName: "Channel", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "DeviceType", kind: "scalar", jsonName: "DeviceType", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "DeviceId", kind: "scalar", jsonName: "DeviceId", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ClientIp", kind: "scalar", jsonName: "ClientIp", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "Action", kind: "scalar", jsonName: "Action", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "AppVersion", kind: "scalar", jsonName: "AppVersion", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "LanguageCode", kind: "scalar", jsonName: "LanguageCode", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "DeviceModel", kind: "scalar", jsonName: "DeviceModel", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RequestHeader>): RequestHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = "";
        message.timestamp = "";
        message.channel = "";
        message.deviceType = "";
        message.deviceId = "";
        message.clientIp = "";
        message.action = "";
        message.appVersion = "";
        message.languageCode = "";
        message.deviceModel = "";
        if (value !== undefined)
            reflectionMergePartial<RequestHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestHeader): RequestHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string RequestId = 1 [json_name = "RequestId"];*/ 1:
                    message.requestId = reader.string();
                    break;
                case /* string Timestamp = 2 [json_name = "Timestamp"];*/ 2:
                    message.timestamp = reader.string();
                    break;
                case /* string Channel = 3 [json_name = "Channel"];*/ 3:
                    message.channel = reader.string();
                    break;
                case /* string DeviceType = 4 [json_name = "DeviceType"];*/ 4:
                    message.deviceType = reader.string();
                    break;
                case /* string DeviceId = 5 [json_name = "DeviceId"];*/ 5:
                    message.deviceId = reader.string();
                    break;
                case /* string ClientIp = 6 [json_name = "ClientIp"];*/ 6:
                    message.clientIp = reader.string();
                    break;
                case /* string Action = 7 [json_name = "Action"];*/ 7:
                    message.action = reader.string();
                    break;
                case /* string AppVersion = 8 [json_name = "AppVersion"];*/ 8:
                    message.appVersion = reader.string();
                    break;
                case /* string LanguageCode = 9 [json_name = "LanguageCode"];*/ 9:
                    message.languageCode = reader.string();
                    break;
                case /* string DeviceModel = 10 [json_name = "DeviceModel"];*/ 10:
                    message.deviceModel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string RequestId = 1 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.requestId);
        /* string Timestamp = 2 [json_name = "Timestamp"]; */
        if (message.timestamp !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.timestamp);
        /* string Channel = 3 [json_name = "Channel"]; */
        if (message.channel !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.channel);
        /* string DeviceType = 4 [json_name = "DeviceType"]; */
        if (message.deviceType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.deviceType);
        /* string DeviceId = 5 [json_name = "DeviceId"]; */
        if (message.deviceId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deviceId);
        /* string ClientIp = 6 [json_name = "ClientIp"]; */
        if (message.clientIp !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.clientIp);
        /* string Action = 7 [json_name = "Action"]; */
        if (message.action !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.action);
        /* string AppVersion = 8 [json_name = "AppVersion"]; */
        if (message.appVersion !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.appVersion);
        /* string LanguageCode = 9 [json_name = "LanguageCode"]; */
        if (message.languageCode !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.languageCode);
        /* string DeviceModel = 10 [json_name = "DeviceModel"]; */
        if (message.deviceModel !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.deviceModel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.RequestHeader
 */
export const RequestHeader = new RequestHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseHeader$Type extends MessageType<ResponseHeader> {
    constructor() {
        super("yarsha.groupchat.v1.ResponseHeader", [
            { no: 1, name: "Status", kind: "scalar", jsonName: "Status", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "StatusCode", kind: "scalar", jsonName: "StatusCode", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ResponseTitle", kind: "scalar", jsonName: "ResponseTitle", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ResponseDescription", kind: "scalar", jsonName: "ResponseDescription", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseHeader>): ResponseHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        message.statusCode = "";
        message.timestamp = "";
        message.requestId = "";
        message.responseTitle = "";
        message.responseDescription = "";
        if (value !== undefined)
            reflectionMergePartial<ResponseHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseHeader): ResponseHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 Status = 1 [json_name = "Status"];*/ 1:
                    message.status = reader.int32();
                    break;
                case /* string StatusCode = 2 [json_name = "StatusCode"];*/ 2:
                    message.statusCode = reader.string();
                    break;
                case /* string Timestamp = 3 [json_name = "Timestamp"];*/ 3:
                    message.timestamp = reader.string();
                    break;
                case /* string RequestId = 4 [json_name = "RequestId"];*/ 4:
                    message.requestId = reader.string();
                    break;
                case /* string ResponseTitle = 5 [json_name = "ResponseTitle"];*/ 5:
                    message.responseTitle = reader.string();
                    break;
                case /* string ResponseDescription = 6 [json_name = "ResponseDescription"];*/ 6:
                    message.responseDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 Status = 1 [json_name = "Status"]; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* string StatusCode = 2 [json_name = "StatusCode"]; */
        if (message.statusCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.statusCode);
        /* string Timestamp = 3 [json_name = "Timestamp"]; */
        if (message.timestamp !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.timestamp);
        /* string RequestId = 4 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.requestId);
        /* string ResponseTitle = 5 [json_name = "ResponseTitle"]; */
        if (message.responseTitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.responseTitle);
        /* string ResponseDescription = 6 [json_name = "ResponseDescription"]; */
        if (message.responseDescription !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.responseDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.ResponseHeader
 */
export const ResponseHeader = new ResponseHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupChatRequestBody$Type extends MessageType<GroupChatRequestBody> {
    constructor() {
        super("yarsha.groupchat.v1.GroupChatRequestBody", [
            { no: 1, name: "GroupName", kind: "scalar", jsonName: "GroupName", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ParticipantsId", kind: "scalar", jsonName: "ParticipantsId", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "GroupIcon", kind: "scalar", jsonName: "GroupIcon", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupChatRequestBody>): GroupChatRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupName = "";
        message.participantsId = [];
        if (value !== undefined)
            reflectionMergePartial<GroupChatRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupChatRequestBody): GroupChatRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string GroupName = 1 [json_name = "GroupName"];*/ 1:
                    message.groupName = reader.string();
                    break;
                case /* repeated string ParticipantsId = 2 [json_name = "ParticipantsId"];*/ 2:
                    message.participantsId.push(reader.string());
                    break;
                case /* optional string GroupIcon = 3 [json_name = "GroupIcon"];*/ 3:
                    message.groupIcon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupChatRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string GroupName = 1 [json_name = "GroupName"]; */
        if (message.groupName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupName);
        /* repeated string ParticipantsId = 2 [json_name = "ParticipantsId"]; */
        for (let i = 0; i < message.participantsId.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.participantsId[i]);
        /* optional string GroupIcon = 3 [json_name = "GroupIcon"]; */
        if (message.groupIcon !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.groupIcon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GroupChatRequestBody
 */
export const GroupChatRequestBody = new GroupChatRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupChatResponseBody$Type extends MessageType<GroupChatResponseBody> {
    constructor() {
        super("yarsha.groupchat.v1.GroupChatResponseBody", [
            { no: 1, name: "GroupId", kind: "scalar", jsonName: "GroupId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "GroupName", kind: "scalar", jsonName: "GroupName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Type", kind: "scalar", jsonName: "Type", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ParticipantsId", kind: "scalar", jsonName: "ParticipantsId", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "GroupIcon", kind: "scalar", jsonName: "GroupIcon", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "BackgroundColor", kind: "scalar", jsonName: "BackgroundColor", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "LastActive", kind: "scalar", jsonName: "LastActive", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "Status", kind: "scalar", jsonName: "Status", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupChatResponseBody>): GroupChatResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = "";
        message.groupName = "";
        message.type = "";
        message.participantsId = [];
        if (value !== undefined)
            reflectionMergePartial<GroupChatResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupChatResponseBody): GroupChatResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string GroupId = 1 [json_name = "GroupId"];*/ 1:
                    message.groupId = reader.string();
                    break;
                case /* string GroupName = 2 [json_name = "GroupName"];*/ 2:
                    message.groupName = reader.string();
                    break;
                case /* string Type = 3 [json_name = "Type"];*/ 3:
                    message.type = reader.string();
                    break;
                case /* repeated string ParticipantsId = 4 [json_name = "ParticipantsId"];*/ 4:
                    message.participantsId.push(reader.string());
                    break;
                case /* optional string GroupIcon = 5 [json_name = "GroupIcon"];*/ 5:
                    message.groupIcon = reader.string();
                    break;
                case /* optional string BackgroundColor = 6 [json_name = "BackgroundColor"];*/ 6:
                    message.backgroundColor = reader.string();
                    break;
                case /* optional string LastActive = 7 [json_name = "LastActive"];*/ 7:
                    message.lastActive = reader.string();
                    break;
                case /* optional string Status = 8 [json_name = "Status"];*/ 8:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupChatResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string GroupId = 1 [json_name = "GroupId"]; */
        if (message.groupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupId);
        /* string GroupName = 2 [json_name = "GroupName"]; */
        if (message.groupName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupName);
        /* string Type = 3 [json_name = "Type"]; */
        if (message.type !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.type);
        /* repeated string ParticipantsId = 4 [json_name = "ParticipantsId"]; */
        for (let i = 0; i < message.participantsId.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.participantsId[i]);
        /* optional string GroupIcon = 5 [json_name = "GroupIcon"]; */
        if (message.groupIcon !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.groupIcon);
        /* optional string BackgroundColor = 6 [json_name = "BackgroundColor"]; */
        if (message.backgroundColor !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.backgroundColor);
        /* optional string LastActive = 7 [json_name = "LastActive"]; */
        if (message.lastActive !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.lastActive);
        /* optional string Status = 8 [json_name = "Status"]; */
        if (message.status !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GroupChatResponseBody
 */
export const GroupChatResponseBody = new GroupChatResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupChatRequestWrapper$Type extends MessageType<GroupChatRequestWrapper> {
    constructor() {
        super("yarsha.groupchat.v1.GroupChatRequestWrapper", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => GroupChatRequestBody }
        ]);
    }
    create(value?: PartialMessage<GroupChatRequestWrapper>): GroupChatRequestWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GroupChatRequestWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupChatRequestWrapper): GroupChatRequestWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.groupchat.v1.GroupChatRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = GroupChatRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupChatRequestWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.GroupChatRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            GroupChatRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GroupChatRequestWrapper
 */
export const GroupChatRequestWrapper = new GroupChatRequestWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupChatResponseWrapper$Type extends MessageType<GroupChatResponseWrapper> {
    constructor() {
        super("yarsha.groupchat.v1.GroupChatResponseWrapper", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => GroupChatResponseBody }
        ]);
    }
    create(value?: PartialMessage<GroupChatResponseWrapper>): GroupChatResponseWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GroupChatResponseWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupChatResponseWrapper): GroupChatResponseWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.groupchat.v1.GroupChatResponseBody Response = 2 [json_name = "Response"];*/ 2:
                    message.response = GroupChatResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupChatResponseWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.GroupChatResponseBody Response = 2 [json_name = "Response"]; */
        if (message.response)
            GroupChatResponseBody.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GroupChatResponseWrapper
 */
export const GroupChatResponseWrapper = new GroupChatResponseWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupChatsRequestBody$Type extends MessageType<GroupChatsRequestBody> {
    constructor() {
        super("yarsha.groupchat.v1.GroupChatsRequestBody", [
            { no: 1, name: "Limit", kind: "scalar", jsonName: "Limit", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Page", kind: "scalar", jsonName: "Page", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupChatsRequestBody>): GroupChatsRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.limit = "";
        message.page = "";
        if (value !== undefined)
            reflectionMergePartial<GroupChatsRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupChatsRequestBody): GroupChatsRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Limit = 1 [json_name = "Limit"];*/ 1:
                    message.limit = reader.string();
                    break;
                case /* string Page = 2 [json_name = "Page"];*/ 2:
                    message.page = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupChatsRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Limit = 1 [json_name = "Limit"]; */
        if (message.limit !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.limit);
        /* string Page = 2 [json_name = "Page"]; */
        if (message.page !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.page);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GroupChatsRequestBody
 */
export const GroupChatsRequestBody = new GroupChatsRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupChatsRequest$Type extends MessageType<GroupChatsRequest> {
    constructor() {
        super("yarsha.groupchat.v1.GroupChatsRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => GroupChatsRequestBody }
        ]);
    }
    create(value?: PartialMessage<GroupChatsRequest>): GroupChatsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GroupChatsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupChatsRequest): GroupChatsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.groupchat.v1.GroupChatsRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = GroupChatsRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupChatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.GroupChatsRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            GroupChatsRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GroupChatsRequest
 */
export const GroupChatsRequest = new GroupChatsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Multimedia$Type extends MessageType<Multimedia> {
    constructor() {
        super("yarsha.groupchat.v1.Multimedia", [
            { no: 1, name: "FilePath", kind: "scalar", jsonName: "FilePath", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "SignedUrl", kind: "scalar", jsonName: "SignedUrl", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ExpirationTime", kind: "scalar", jsonName: "ExpirationTime", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "MimeType", kind: "scalar", jsonName: "MimeType", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Multimedia>): Multimedia {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filePath = "";
        message.signedUrl = "";
        message.expirationTime = 0n;
        message.mimeType = "";
        if (value !== undefined)
            reflectionMergePartial<Multimedia>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Multimedia): Multimedia {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string FilePath = 1 [json_name = "FilePath"];*/ 1:
                    message.filePath = reader.string();
                    break;
                case /* string SignedUrl = 2 [json_name = "SignedUrl"];*/ 2:
                    message.signedUrl = reader.string();
                    break;
                case /* int64 ExpirationTime = 3 [json_name = "ExpirationTime"];*/ 3:
                    message.expirationTime = reader.int64().toBigInt();
                    break;
                case /* string MimeType = 4 [json_name = "MimeType"];*/ 4:
                    message.mimeType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Multimedia, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string FilePath = 1 [json_name = "FilePath"]; */
        if (message.filePath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filePath);
        /* string SignedUrl = 2 [json_name = "SignedUrl"]; */
        if (message.signedUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.signedUrl);
        /* int64 ExpirationTime = 3 [json_name = "ExpirationTime"]; */
        if (message.expirationTime !== 0n)
            writer.tag(3, WireType.Varint).int64(message.expirationTime);
        /* string MimeType = 4 [json_name = "MimeType"]; */
        if (message.mimeType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.mimeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.Multimedia
 */
export const Multimedia = new Multimedia$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Transaction$Type extends MessageType<Transaction> {
    constructor() {
        super("yarsha.groupchat.v1.Transaction", [
            { no: 1, name: "FromWallet", kind: "scalar", jsonName: "FromWallet", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ToWallet", kind: "scalar", jsonName: "ToWallet", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "SenderId", kind: "scalar", jsonName: "SenderId", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Amount", kind: "scalar", jsonName: "Amount", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "Signature", kind: "scalar", jsonName: "Signature", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Transaction>): Transaction {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fromWallet = "";
        message.toWallet = "";
        message.senderId = "";
        message.amount = "";
        message.timestamp = 0n;
        message.signature = "";
        if (value !== undefined)
            reflectionMergePartial<Transaction>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Transaction): Transaction {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string FromWallet = 1 [json_name = "FromWallet"];*/ 1:
                    message.fromWallet = reader.string();
                    break;
                case /* string ToWallet = 2 [json_name = "ToWallet"];*/ 2:
                    message.toWallet = reader.string();
                    break;
                case /* string SenderId = 3 [json_name = "SenderId"];*/ 3:
                    message.senderId = reader.string();
                    break;
                case /* string Amount = 4 [json_name = "Amount"];*/ 4:
                    message.amount = reader.string();
                    break;
                case /* int64 Timestamp = 5 [json_name = "Timestamp"];*/ 5:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* string Signature = 6 [json_name = "Signature"];*/ 6:
                    message.signature = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Transaction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string FromWallet = 1 [json_name = "FromWallet"]; */
        if (message.fromWallet !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fromWallet);
        /* string ToWallet = 2 [json_name = "ToWallet"]; */
        if (message.toWallet !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.toWallet);
        /* string SenderId = 3 [json_name = "SenderId"]; */
        if (message.senderId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.senderId);
        /* string Amount = 4 [json_name = "Amount"]; */
        if (message.amount !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.amount);
        /* int64 Timestamp = 5 [json_name = "Timestamp"]; */
        if (message.timestamp !== 0n)
            writer.tag(5, WireType.Varint).int64(message.timestamp);
        /* string Signature = 6 [json_name = "Signature"]; */
        if (message.signature !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.signature);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.Transaction
 */
export const Transaction = new Transaction$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Reply$Type extends MessageType<Reply> {
    constructor() {
        super("yarsha.groupchat.v1.Reply", [
            { no: 1, name: "ReplyToId", kind: "scalar", jsonName: "ReplyToId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ReplyToContent", kind: "scalar", jsonName: "ReplyToContent", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ReplyToSenderName", kind: "scalar", jsonName: "ReplyToSenderName", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Reply>): Reply {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.replyToId = "";
        message.replyToContent = "";
        message.replyToSenderName = "";
        if (value !== undefined)
            reflectionMergePartial<Reply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Reply): Reply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ReplyToId = 1 [json_name = "ReplyToId"];*/ 1:
                    message.replyToId = reader.string();
                    break;
                case /* string ReplyToContent = 2 [json_name = "ReplyToContent"];*/ 2:
                    message.replyToContent = reader.string();
                    break;
                case /* string ReplyToSenderName = 3 [json_name = "ReplyToSenderName"];*/ 3:
                    message.replyToSenderName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Reply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ReplyToId = 1 [json_name = "ReplyToId"]; */
        if (message.replyToId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.replyToId);
        /* string ReplyToContent = 2 [json_name = "ReplyToContent"]; */
        if (message.replyToContent !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.replyToContent);
        /* string ReplyToSenderName = 3 [json_name = "ReplyToSenderName"]; */
        if (message.replyToSenderName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.replyToSenderName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.Reply
 */
export const Reply = new Reply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LastMessage$Type extends MessageType<LastMessage> {
    constructor() {
        super("yarsha.groupchat.v1.LastMessage", [
            { no: 1, name: "MessageId", kind: "scalar", jsonName: "MessageId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "SenderId", kind: "scalar", jsonName: "SenderId", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "SenderName", kind: "scalar", jsonName: "SenderName", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Text", kind: "scalar", jsonName: "Text", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "MessageType", kind: "scalar", jsonName: "MessageType", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "Multimedia", kind: "message", jsonName: "Multimedia", repeat: 1 /*RepeatType.PACKED*/, T: () => Multimedia },
            { no: 8, name: "Transaction", kind: "message", jsonName: "Transaction", T: () => Transaction },
            { no: 9, name: "ReplyTo", kind: "message", jsonName: "ReplyTo", T: () => Reply }
        ]);
    }
    create(value?: PartialMessage<LastMessage>): LastMessage {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messageId = "";
        message.senderId = "";
        message.senderName = "";
        message.text = "";
        message.messageType = "";
        message.timestamp = "";
        message.multimedia = [];
        if (value !== undefined)
            reflectionMergePartial<LastMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LastMessage): LastMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string MessageId = 1 [json_name = "MessageId"];*/ 1:
                    message.messageId = reader.string();
                    break;
                case /* string SenderId = 2 [json_name = "SenderId"];*/ 2:
                    message.senderId = reader.string();
                    break;
                case /* string SenderName = 3 [json_name = "SenderName"];*/ 3:
                    message.senderName = reader.string();
                    break;
                case /* string Text = 4 [json_name = "Text"];*/ 4:
                    message.text = reader.string();
                    break;
                case /* string MessageType = 5 [json_name = "MessageType"];*/ 5:
                    message.messageType = reader.string();
                    break;
                case /* string Timestamp = 6 [json_name = "Timestamp"];*/ 6:
                    message.timestamp = reader.string();
                    break;
                case /* repeated yarsha.groupchat.v1.Multimedia Multimedia = 7 [json_name = "Multimedia"];*/ 7:
                    message.multimedia.push(Multimedia.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional yarsha.groupchat.v1.Transaction Transaction = 8 [json_name = "Transaction"];*/ 8:
                    message.transaction = Transaction.internalBinaryRead(reader, reader.uint32(), options, message.transaction);
                    break;
                case /* optional yarsha.groupchat.v1.Reply ReplyTo = 9 [json_name = "ReplyTo"];*/ 9:
                    message.replyTo = Reply.internalBinaryRead(reader, reader.uint32(), options, message.replyTo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LastMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string MessageId = 1 [json_name = "MessageId"]; */
        if (message.messageId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.messageId);
        /* string SenderId = 2 [json_name = "SenderId"]; */
        if (message.senderId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.senderId);
        /* string SenderName = 3 [json_name = "SenderName"]; */
        if (message.senderName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.senderName);
        /* string Text = 4 [json_name = "Text"]; */
        if (message.text !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.text);
        /* string MessageType = 5 [json_name = "MessageType"]; */
        if (message.messageType !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.messageType);
        /* string Timestamp = 6 [json_name = "Timestamp"]; */
        if (message.timestamp !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.timestamp);
        /* repeated yarsha.groupchat.v1.Multimedia Multimedia = 7 [json_name = "Multimedia"]; */
        for (let i = 0; i < message.multimedia.length; i++)
            Multimedia.internalBinaryWrite(message.multimedia[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional yarsha.groupchat.v1.Transaction Transaction = 8 [json_name = "Transaction"]; */
        if (message.transaction)
            Transaction.internalBinaryWrite(message.transaction, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional yarsha.groupchat.v1.Reply ReplyTo = 9 [json_name = "ReplyTo"]; */
        if (message.replyTo)
            Reply.internalBinaryWrite(message.replyTo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.LastMessage
 */
export const LastMessage = new LastMessage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeenDetail$Type extends MessageType<SeenDetail> {
    constructor() {
        super("yarsha.groupchat.v1.SeenDetail", [
            { no: 1, name: "ParticipantId", kind: "scalar", jsonName: "ParticipantId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "SeenCount", kind: "scalar", jsonName: "SeenCount", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SeenDetail>): SeenDetail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.participantId = "";
        message.seenCount = "";
        message.timestamp = "";
        if (value !== undefined)
            reflectionMergePartial<SeenDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SeenDetail): SeenDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ParticipantId = 1 [json_name = "ParticipantId"];*/ 1:
                    message.participantId = reader.string();
                    break;
                case /* string SeenCount = 2 [json_name = "SeenCount"];*/ 2:
                    message.seenCount = reader.string();
                    break;
                case /* string Timestamp = 3 [json_name = "Timestamp"];*/ 3:
                    message.timestamp = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SeenDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ParticipantId = 1 [json_name = "ParticipantId"]; */
        if (message.participantId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.participantId);
        /* string SeenCount = 2 [json_name = "SeenCount"]; */
        if (message.seenCount !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.seenCount);
        /* string Timestamp = 3 [json_name = "Timestamp"]; */
        if (message.timestamp !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.SeenDetail
 */
export const SeenDetail = new SeenDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupChatDetail$Type extends MessageType<GroupChatDetail> {
    constructor() {
        super("yarsha.groupchat.v1.GroupChatDetail", [
            { no: 1, name: "GroupId", kind: "scalar", jsonName: "GroupId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "GroupName", kind: "scalar", jsonName: "GroupName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "GroupIcon", kind: "scalar", jsonName: "GroupIcon", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Type", kind: "scalar", jsonName: "Type", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "MessageCount", kind: "scalar", jsonName: "MessageCount", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "BackgroundColor", kind: "scalar", jsonName: "BackgroundColor", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "ParticipantsId", kind: "scalar", jsonName: "ParticipantsId", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "LastMessage", kind: "message", jsonName: "LastMessage", T: () => LastMessage },
            { no: 9, name: "UnreadCount", kind: "scalar", jsonName: "UnreadCount", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "UpdatedAt", kind: "scalar", jsonName: "UpdatedAt", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "IsMuted", kind: "scalar", jsonName: "IsMuted", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "IsPinned", kind: "scalar", jsonName: "IsPinned", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "SeenDetails", kind: "message", jsonName: "SeenDetails", repeat: 1 /*RepeatType.PACKED*/, T: () => SeenDetail },
            { no: 14, name: "IsIndividualBotChat", kind: "scalar", jsonName: "IsIndividualBotChat", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<GroupChatDetail>): GroupChatDetail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = "";
        message.groupName = "";
        message.groupIcon = "";
        message.type = "";
        message.messageCount = "";
        message.backgroundColor = "";
        message.participantsId = [];
        message.unreadCount = 0;
        message.updatedAt = "";
        message.isMuted = "";
        message.seenDetails = [];
        message.isIndividualBotChat = false;
        if (value !== undefined)
            reflectionMergePartial<GroupChatDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupChatDetail): GroupChatDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string GroupId = 1 [json_name = "GroupId"];*/ 1:
                    message.groupId = reader.string();
                    break;
                case /* string GroupName = 2 [json_name = "GroupName"];*/ 2:
                    message.groupName = reader.string();
                    break;
                case /* string GroupIcon = 3 [json_name = "GroupIcon"];*/ 3:
                    message.groupIcon = reader.string();
                    break;
                case /* string Type = 4 [json_name = "Type"];*/ 4:
                    message.type = reader.string();
                    break;
                case /* string MessageCount = 5 [json_name = "MessageCount"];*/ 5:
                    message.messageCount = reader.string();
                    break;
                case /* string BackgroundColor = 6 [json_name = "BackgroundColor"];*/ 6:
                    message.backgroundColor = reader.string();
                    break;
                case /* repeated string ParticipantsId = 7 [json_name = "ParticipantsId"];*/ 7:
                    message.participantsId.push(reader.string());
                    break;
                case /* yarsha.groupchat.v1.LastMessage LastMessage = 8 [json_name = "LastMessage"];*/ 8:
                    message.lastMessage = LastMessage.internalBinaryRead(reader, reader.uint32(), options, message.lastMessage);
                    break;
                case /* int32 UnreadCount = 9 [json_name = "UnreadCount"];*/ 9:
                    message.unreadCount = reader.int32();
                    break;
                case /* string UpdatedAt = 10 [json_name = "UpdatedAt"];*/ 10:
                    message.updatedAt = reader.string();
                    break;
                case /* string IsMuted = 11 [json_name = "IsMuted"];*/ 11:
                    message.isMuted = reader.string();
                    break;
                case /* optional string IsPinned = 12 [json_name = "IsPinned"];*/ 12:
                    message.isPinned = reader.string();
                    break;
                case /* repeated yarsha.groupchat.v1.SeenDetail SeenDetails = 13 [json_name = "SeenDetails"];*/ 13:
                    message.seenDetails.push(SeenDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool IsIndividualBotChat = 14 [json_name = "IsIndividualBotChat"];*/ 14:
                    message.isIndividualBotChat = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupChatDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string GroupId = 1 [json_name = "GroupId"]; */
        if (message.groupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupId);
        /* string GroupName = 2 [json_name = "GroupName"]; */
        if (message.groupName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupName);
        /* string GroupIcon = 3 [json_name = "GroupIcon"]; */
        if (message.groupIcon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.groupIcon);
        /* string Type = 4 [json_name = "Type"]; */
        if (message.type !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.type);
        /* string MessageCount = 5 [json_name = "MessageCount"]; */
        if (message.messageCount !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.messageCount);
        /* string BackgroundColor = 6 [json_name = "BackgroundColor"]; */
        if (message.backgroundColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.backgroundColor);
        /* repeated string ParticipantsId = 7 [json_name = "ParticipantsId"]; */
        for (let i = 0; i < message.participantsId.length; i++)
            writer.tag(7, WireType.LengthDelimited).string(message.participantsId[i]);
        /* yarsha.groupchat.v1.LastMessage LastMessage = 8 [json_name = "LastMessage"]; */
        if (message.lastMessage)
            LastMessage.internalBinaryWrite(message.lastMessage, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* int32 UnreadCount = 9 [json_name = "UnreadCount"]; */
        if (message.unreadCount !== 0)
            writer.tag(9, WireType.Varint).int32(message.unreadCount);
        /* string UpdatedAt = 10 [json_name = "UpdatedAt"]; */
        if (message.updatedAt !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.updatedAt);
        /* string IsMuted = 11 [json_name = "IsMuted"]; */
        if (message.isMuted !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.isMuted);
        /* optional string IsPinned = 12 [json_name = "IsPinned"]; */
        if (message.isPinned !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.isPinned);
        /* repeated yarsha.groupchat.v1.SeenDetail SeenDetails = 13 [json_name = "SeenDetails"]; */
        for (let i = 0; i < message.seenDetails.length; i++)
            SeenDetail.internalBinaryWrite(message.seenDetails[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* bool IsIndividualBotChat = 14 [json_name = "IsIndividualBotChat"]; */
        if (message.isIndividualBotChat !== false)
            writer.tag(14, WireType.Varint).bool(message.isIndividualBotChat);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GroupChatDetail
 */
export const GroupChatDetail = new GroupChatDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupChatDetailResponseBody$Type extends MessageType<GroupChatDetailResponseBody> {
    constructor() {
        super("yarsha.groupchat.v1.GroupChatDetailResponseBody", [
            { no: 1, name: "GroupChats", kind: "message", jsonName: "GroupChats", repeat: 1 /*RepeatType.PACKED*/, T: () => GroupChatDetail },
            { no: 2, name: "TotalPages", kind: "scalar", jsonName: "TotalPages", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "CurrentPage", kind: "scalar", jsonName: "CurrentPage", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GroupChatDetailResponseBody>): GroupChatDetailResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupChats = [];
        message.totalPages = "";
        message.currentPage = "";
        if (value !== undefined)
            reflectionMergePartial<GroupChatDetailResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupChatDetailResponseBody): GroupChatDetailResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated yarsha.groupchat.v1.GroupChatDetail GroupChats = 1 [json_name = "GroupChats"];*/ 1:
                    message.groupChats.push(GroupChatDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string TotalPages = 2 [json_name = "TotalPages"];*/ 2:
                    message.totalPages = reader.string();
                    break;
                case /* string CurrentPage = 3 [json_name = "CurrentPage"];*/ 3:
                    message.currentPage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupChatDetailResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated yarsha.groupchat.v1.GroupChatDetail GroupChats = 1 [json_name = "GroupChats"]; */
        for (let i = 0; i < message.groupChats.length; i++)
            GroupChatDetail.internalBinaryWrite(message.groupChats[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string TotalPages = 2 [json_name = "TotalPages"]; */
        if (message.totalPages !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.totalPages);
        /* string CurrentPage = 3 [json_name = "CurrentPage"]; */
        if (message.currentPage !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.currentPage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GroupChatDetailResponseBody
 */
export const GroupChatDetailResponseBody = new GroupChatDetailResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupChatsResponse$Type extends MessageType<GroupChatsResponse> {
    constructor() {
        super("yarsha.groupchat.v1.GroupChatsResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => GroupChatDetailResponseBody }
        ]);
    }
    create(value?: PartialMessage<GroupChatsResponse>): GroupChatsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GroupChatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupChatsResponse): GroupChatsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.groupchat.v1.GroupChatDetailResponseBody Response = 2 [json_name = "Response"];*/ 2:
                    message.response = GroupChatDetailResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GroupChatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.GroupChatDetailResponseBody Response = 2 [json_name = "Response"]; */
        if (message.response)
            GroupChatDetailResponseBody.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GroupChatsResponse
 */
export const GroupChatsResponse = new GroupChatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupChatDetailsRequest$Type extends MessageType<GetGroupChatDetailsRequest> {
    constructor() {
        super("yarsha.groupchat.v1.GetGroupChatDetailsRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetGroupChatDetailsRequest>): GetGroupChatDetailsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        if (value !== undefined)
            reflectionMergePartial<GetGroupChatDetailsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupChatDetailsRequest): GetGroupChatDetailsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* string ChatId = 2 [json_name = "ChatId"];*/ 2:
                    message.chatId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupChatDetailsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string ChatId = 2 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GetGroupChatDetailsRequest
 */
export const GetGroupChatDetailsRequest = new GetGroupChatDetailsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParticipantDetail$Type extends MessageType<ParticipantDetail> {
    constructor() {
        super("yarsha.groupchat.v1.ParticipantDetail", [
            { no: 1, name: "Id", kind: "scalar", jsonName: "Id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Username", kind: "scalar", jsonName: "Username", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "FullName", kind: "scalar", jsonName: "FullName", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ProfilePicture", kind: "scalar", jsonName: "ProfilePicture", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "Address", kind: "scalar", jsonName: "Address", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "UserBio", kind: "scalar", jsonName: "UserBio", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "Role", kind: "scalar", jsonName: "Role", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "BackgroundColor", kind: "scalar", jsonName: "BackgroundColor", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "LastActive", kind: "scalar", jsonName: "LastActive", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "Status", kind: "scalar", jsonName: "Status", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ParticipantDetail>): ParticipantDetail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.username = "";
        message.fullName = "";
        message.profilePicture = "";
        message.address = "";
        message.userBio = "";
        message.role = "";
        message.backgroundColor = "";
        message.lastActive = "";
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<ParticipantDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParticipantDetail): ParticipantDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Id = 1 [json_name = "Id"];*/ 1:
                    message.id = reader.string();
                    break;
                case /* string Username = 2 [json_name = "Username"];*/ 2:
                    message.username = reader.string();
                    break;
                case /* string FullName = 3 [json_name = "FullName"];*/ 3:
                    message.fullName = reader.string();
                    break;
                case /* string ProfilePicture = 4 [json_name = "ProfilePicture"];*/ 4:
                    message.profilePicture = reader.string();
                    break;
                case /* string Address = 5 [json_name = "Address"];*/ 5:
                    message.address = reader.string();
                    break;
                case /* string UserBio = 6 [json_name = "UserBio"];*/ 6:
                    message.userBio = reader.string();
                    break;
                case /* string Role = 7 [json_name = "Role"];*/ 7:
                    message.role = reader.string();
                    break;
                case /* string BackgroundColor = 8 [json_name = "BackgroundColor"];*/ 8:
                    message.backgroundColor = reader.string();
                    break;
                case /* string LastActive = 9 [json_name = "LastActive"];*/ 9:
                    message.lastActive = reader.string();
                    break;
                case /* string Status = 10 [json_name = "Status"];*/ 10:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParticipantDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Id = 1 [json_name = "Id"]; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string Username = 2 [json_name = "Username"]; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        /* string FullName = 3 [json_name = "FullName"]; */
        if (message.fullName !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.fullName);
        /* string ProfilePicture = 4 [json_name = "ProfilePicture"]; */
        if (message.profilePicture !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.profilePicture);
        /* string Address = 5 [json_name = "Address"]; */
        if (message.address !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.address);
        /* string UserBio = 6 [json_name = "UserBio"]; */
        if (message.userBio !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.userBio);
        /* string Role = 7 [json_name = "Role"]; */
        if (message.role !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.role);
        /* string BackgroundColor = 8 [json_name = "BackgroundColor"]; */
        if (message.backgroundColor !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.backgroundColor);
        /* string LastActive = 9 [json_name = "LastActive"]; */
        if (message.lastActive !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.lastActive);
        /* string Status = 10 [json_name = "Status"]; */
        if (message.status !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.ParticipantDetail
 */
export const ParticipantDetail = new ParticipantDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChatDetail$Type extends MessageType<ChatDetail> {
    constructor() {
        super("yarsha.groupchat.v1.ChatDetail", [
            { no: 1, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "GroupName", kind: "scalar", jsonName: "GroupName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "GroupIcon", kind: "scalar", jsonName: "GroupIcon", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "BackgroundColor", kind: "scalar", jsonName: "BackgroundColor", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ParticipantsId", kind: "scalar", jsonName: "ParticipantsId", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ParticipantDetails", kind: "message", jsonName: "ParticipantDetails", repeat: 1 /*RepeatType.PACKED*/, T: () => ParticipantDetail },
            { no: 7, name: "Type", kind: "scalar", jsonName: "Type", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "GroupDescription", kind: "scalar", jsonName: "GroupDescription", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "IsMuted", kind: "scalar", jsonName: "IsMuted", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ChatDetail>): ChatDetail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        message.groupName = "";
        message.groupIcon = "";
        message.backgroundColor = "";
        message.participantsId = [];
        message.participantDetails = [];
        message.type = "";
        message.groupDescription = "";
        message.isMuted = false;
        if (value !== undefined)
            reflectionMergePartial<ChatDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChatDetail): ChatDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ChatId = 1 [json_name = "ChatId"];*/ 1:
                    message.chatId = reader.string();
                    break;
                case /* string GroupName = 2 [json_name = "GroupName"];*/ 2:
                    message.groupName = reader.string();
                    break;
                case /* string GroupIcon = 3 [json_name = "GroupIcon"];*/ 3:
                    message.groupIcon = reader.string();
                    break;
                case /* string BackgroundColor = 4 [json_name = "BackgroundColor"];*/ 4:
                    message.backgroundColor = reader.string();
                    break;
                case /* repeated string ParticipantsId = 5 [json_name = "ParticipantsId"];*/ 5:
                    message.participantsId.push(reader.string());
                    break;
                case /* repeated yarsha.groupchat.v1.ParticipantDetail ParticipantDetails = 6 [json_name = "ParticipantDetails"];*/ 6:
                    message.participantDetails.push(ParticipantDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string Type = 7 [json_name = "Type"];*/ 7:
                    message.type = reader.string();
                    break;
                case /* string GroupDescription = 8 [json_name = "GroupDescription"];*/ 8:
                    message.groupDescription = reader.string();
                    break;
                case /* bool IsMuted = 9 [json_name = "IsMuted"];*/ 9:
                    message.isMuted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChatDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ChatId = 1 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* string GroupName = 2 [json_name = "GroupName"]; */
        if (message.groupName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupName);
        /* string GroupIcon = 3 [json_name = "GroupIcon"]; */
        if (message.groupIcon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.groupIcon);
        /* string BackgroundColor = 4 [json_name = "BackgroundColor"]; */
        if (message.backgroundColor !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.backgroundColor);
        /* repeated string ParticipantsId = 5 [json_name = "ParticipantsId"]; */
        for (let i = 0; i < message.participantsId.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.participantsId[i]);
        /* repeated yarsha.groupchat.v1.ParticipantDetail ParticipantDetails = 6 [json_name = "ParticipantDetails"]; */
        for (let i = 0; i < message.participantDetails.length; i++)
            ParticipantDetail.internalBinaryWrite(message.participantDetails[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* string Type = 7 [json_name = "Type"]; */
        if (message.type !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.type);
        /* string GroupDescription = 8 [json_name = "GroupDescription"]; */
        if (message.groupDescription !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.groupDescription);
        /* bool IsMuted = 9 [json_name = "IsMuted"]; */
        if (message.isMuted !== false)
            writer.tag(9, WireType.Varint).bool(message.isMuted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.ChatDetail
 */
export const ChatDetail = new ChatDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGroupChatDetailsResponse$Type extends MessageType<GetGroupChatDetailsResponse> {
    constructor() {
        super("yarsha.groupchat.v1.GetGroupChatDetailsResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Chat", kind: "message", jsonName: "Chat", T: () => ChatDetail }
        ]);
    }
    create(value?: PartialMessage<GetGroupChatDetailsResponse>): GetGroupChatDetailsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetGroupChatDetailsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGroupChatDetailsResponse): GetGroupChatDetailsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.groupchat.v1.ChatDetail Chat = 2 [json_name = "Chat"];*/ 2:
                    message.chat = ChatDetail.internalBinaryRead(reader, reader.uint32(), options, message.chat);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGroupChatDetailsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.ChatDetail Chat = 2 [json_name = "Chat"]; */
        if (message.chat)
            ChatDetail.internalBinaryWrite(message.chat, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GetGroupChatDetailsResponse
 */
export const GetGroupChatDetailsResponse = new GetGroupChatDetailsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserChatIdsResponse$Type extends MessageType<GetUserChatIdsResponse> {
    constructor() {
        super("yarsha.groupchat.v1.GetUserChatIdsResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "ChatIds", kind: "scalar", jsonName: "ChatIds", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserChatIdsResponse>): GetUserChatIdsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatIds = [];
        if (value !== undefined)
            reflectionMergePartial<GetUserChatIdsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserChatIdsResponse): GetUserChatIdsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* repeated string ChatIds = 2 [json_name = "ChatIds"];*/ 2:
                    message.chatIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserChatIdsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string ChatIds = 2 [json_name = "ChatIds"]; */
        for (let i = 0; i < message.chatIds.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.chatIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GetUserChatIdsResponse
 */
export const GetUserChatIdsResponse = new GetUserChatIdsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PeerId$Type extends MessageType<PeerId> {
    constructor() {
        super("yarsha.groupchat.v1.PeerId", [
            { no: 1, name: "PeerId", kind: "scalar", jsonName: "PeerId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PeerId>): PeerId {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.peerId = "";
        if (value !== undefined)
            reflectionMergePartial<PeerId>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PeerId): PeerId {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string PeerId = 1 [json_name = "PeerId"];*/ 1:
                    message.peerId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PeerId, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string PeerId = 1 [json_name = "PeerId"]; */
        if (message.peerId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.peerId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.PeerId
 */
export const PeerId = new PeerId$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckIndividualChatRequestWrapper$Type extends MessageType<CheckIndividualChatRequestWrapper> {
    constructor() {
        super("yarsha.groupchat.v1.CheckIndividualChatRequestWrapper", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => PeerId }
        ]);
    }
    create(value?: PartialMessage<CheckIndividualChatRequestWrapper>): CheckIndividualChatRequestWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CheckIndividualChatRequestWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckIndividualChatRequestWrapper): CheckIndividualChatRequestWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.groupchat.v1.PeerId Body = 2 [json_name = "Body"];*/ 2:
                    message.body = PeerId.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckIndividualChatRequestWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.PeerId Body = 2 [json_name = "Body"]; */
        if (message.body)
            PeerId.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.CheckIndividualChatRequestWrapper
 */
export const CheckIndividualChatRequestWrapper = new CheckIndividualChatRequestWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckIndividualChatResponseWrapper$Type extends MessageType<CheckIndividualChatResponseWrapper> {
    constructor() {
        super("yarsha.groupchat.v1.CheckIndividualChatResponseWrapper", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => GroupChatResponseBody }
        ]);
    }
    create(value?: PartialMessage<CheckIndividualChatResponseWrapper>): CheckIndividualChatResponseWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CheckIndividualChatResponseWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckIndividualChatResponseWrapper): CheckIndividualChatResponseWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.groupchat.v1.GroupChatResponseBody Response = 2 [json_name = "Response"];*/ 2:
                    message.response = GroupChatResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckIndividualChatResponseWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.GroupChatResponseBody Response = 2 [json_name = "Response"]; */
        if (message.response)
            GroupChatResponseBody.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.CheckIndividualChatResponseWrapper
 */
export const CheckIndividualChatResponseWrapper = new CheckIndividualChatResponseWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFriendsChatIdsRequest$Type extends MessageType<GetFriendsChatIdsRequest> {
    constructor() {
        super("yarsha.groupchat.v1.GetFriendsChatIdsRequest", []);
    }
    create(value?: PartialMessage<GetFriendsChatIdsRequest>): GetFriendsChatIdsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetFriendsChatIdsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFriendsChatIdsRequest): GetFriendsChatIdsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetFriendsChatIdsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GetFriendsChatIdsRequest
 */
export const GetFriendsChatIdsRequest = new GetFriendsChatIdsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFriendsChatIdsResponse$Type extends MessageType<GetFriendsChatIdsResponse> {
    constructor() {
        super("yarsha.groupchat.v1.GetFriendsChatIdsResponse", [
            { no: 1, name: "ChatIds", kind: "scalar", jsonName: "ChatIds", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetFriendsChatIdsResponse>): GetFriendsChatIdsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatIds = [];
        if (value !== undefined)
            reflectionMergePartial<GetFriendsChatIdsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFriendsChatIdsResponse): GetFriendsChatIdsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string ChatIds = 1 [json_name = "ChatIds"];*/ 1:
                    message.chatIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFriendsChatIdsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string ChatIds = 1 [json_name = "ChatIds"]; */
        for (let i = 0; i < message.chatIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.chatIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GetFriendsChatIdsResponse
 */
export const GetFriendsChatIdsResponse = new GetFriendsChatIdsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddParticipantsRequestBody$Type extends MessageType<AddParticipantsRequestBody> {
    constructor() {
        super("yarsha.groupchat.v1.AddParticipantsRequestBody", [
            { no: 1, name: "GroupId", kind: "scalar", jsonName: "GroupId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ParticipantsId", kind: "scalar", jsonName: "ParticipantsId", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddParticipantsRequestBody>): AddParticipantsRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = "";
        message.participantsId = [];
        if (value !== undefined)
            reflectionMergePartial<AddParticipantsRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddParticipantsRequestBody): AddParticipantsRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string GroupId = 1 [json_name = "GroupId"];*/ 1:
                    message.groupId = reader.string();
                    break;
                case /* repeated string ParticipantsId = 2 [json_name = "ParticipantsId"];*/ 2:
                    message.participantsId.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddParticipantsRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string GroupId = 1 [json_name = "GroupId"]; */
        if (message.groupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupId);
        /* repeated string ParticipantsId = 2 [json_name = "ParticipantsId"]; */
        for (let i = 0; i < message.participantsId.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.participantsId[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.AddParticipantsRequestBody
 */
export const AddParticipantsRequestBody = new AddParticipantsRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddParticipantsRequestWrapper$Type extends MessageType<AddParticipantsRequestWrapper> {
    constructor() {
        super("yarsha.groupchat.v1.AddParticipantsRequestWrapper", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => AddParticipantsRequestBody }
        ]);
    }
    create(value?: PartialMessage<AddParticipantsRequestWrapper>): AddParticipantsRequestWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AddParticipantsRequestWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddParticipantsRequestWrapper): AddParticipantsRequestWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.groupchat.v1.AddParticipantsRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = AddParticipantsRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddParticipantsRequestWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.AddParticipantsRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            AddParticipantsRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.AddParticipantsRequestWrapper
 */
export const AddParticipantsRequestWrapper = new AddParticipantsRequestWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddParticipantDetails$Type extends MessageType<AddParticipantDetails> {
    constructor() {
        super("yarsha.groupchat.v1.AddParticipantDetails", [
            { no: 1, name: "Id", kind: "scalar", jsonName: "Id", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "FullName", kind: "scalar", jsonName: "FullName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Username", kind: "scalar", jsonName: "Username", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Role", kind: "scalar", jsonName: "Role", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ProfilePicture", kind: "scalar", jsonName: "ProfilePicture", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "BackgroundColor", kind: "scalar", jsonName: "BackgroundColor", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "LastActive", kind: "scalar", jsonName: "LastActive", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "Status", kind: "scalar", jsonName: "Status", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddParticipantDetails>): AddParticipantDetails {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.fullName = "";
        message.username = "";
        message.role = "";
        message.profilePicture = "";
        message.backgroundColor = "";
        message.lastActive = "";
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<AddParticipantDetails>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddParticipantDetails): AddParticipantDetails {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Id = 1 [json_name = "Id"];*/ 1:
                    message.id = reader.string();
                    break;
                case /* string FullName = 2 [json_name = "FullName"];*/ 2:
                    message.fullName = reader.string();
                    break;
                case /* string Username = 3 [json_name = "Username"];*/ 3:
                    message.username = reader.string();
                    break;
                case /* string Role = 4 [json_name = "Role"];*/ 4:
                    message.role = reader.string();
                    break;
                case /* string ProfilePicture = 5 [json_name = "ProfilePicture"];*/ 5:
                    message.profilePicture = reader.string();
                    break;
                case /* string BackgroundColor = 6 [json_name = "BackgroundColor"];*/ 6:
                    message.backgroundColor = reader.string();
                    break;
                case /* string LastActive = 7 [json_name = "LastActive"];*/ 7:
                    message.lastActive = reader.string();
                    break;
                case /* string Status = 8 [json_name = "Status"];*/ 8:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddParticipantDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Id = 1 [json_name = "Id"]; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string FullName = 2 [json_name = "FullName"]; */
        if (message.fullName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fullName);
        /* string Username = 3 [json_name = "Username"]; */
        if (message.username !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.username);
        /* string Role = 4 [json_name = "Role"]; */
        if (message.role !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.role);
        /* string ProfilePicture = 5 [json_name = "ProfilePicture"]; */
        if (message.profilePicture !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.profilePicture);
        /* string BackgroundColor = 6 [json_name = "BackgroundColor"]; */
        if (message.backgroundColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.backgroundColor);
        /* string LastActive = 7 [json_name = "LastActive"]; */
        if (message.lastActive !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.lastActive);
        /* string Status = 8 [json_name = "Status"]; */
        if (message.status !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.AddParticipantDetails
 */
export const AddParticipantDetails = new AddParticipantDetails$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddParticipantsResponseBody$Type extends MessageType<AddParticipantsResponseBody> {
    constructor() {
        super("yarsha.groupchat.v1.AddParticipantsResponseBody", [
            { no: 1, name: "GroupId", kind: "scalar", jsonName: "GroupId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "AddedParticipants", kind: "scalar", jsonName: "AddedParticipants", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ParticipantDetails", kind: "message", jsonName: "ParticipantDetails", repeat: 1 /*RepeatType.PACKED*/, T: () => AddParticipantDetails }
        ]);
    }
    create(value?: PartialMessage<AddParticipantsResponseBody>): AddParticipantsResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.groupId = "";
        message.addedParticipants = [];
        message.participantDetails = [];
        if (value !== undefined)
            reflectionMergePartial<AddParticipantsResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddParticipantsResponseBody): AddParticipantsResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string GroupId = 1 [json_name = "GroupId"];*/ 1:
                    message.groupId = reader.string();
                    break;
                case /* repeated string AddedParticipants = 2 [json_name = "AddedParticipants"];*/ 2:
                    message.addedParticipants.push(reader.string());
                    break;
                case /* repeated yarsha.groupchat.v1.AddParticipantDetails ParticipantDetails = 3 [json_name = "ParticipantDetails"];*/ 3:
                    message.participantDetails.push(AddParticipantDetails.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddParticipantsResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string GroupId = 1 [json_name = "GroupId"]; */
        if (message.groupId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.groupId);
        /* repeated string AddedParticipants = 2 [json_name = "AddedParticipants"]; */
        for (let i = 0; i < message.addedParticipants.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.addedParticipants[i]);
        /* repeated yarsha.groupchat.v1.AddParticipantDetails ParticipantDetails = 3 [json_name = "ParticipantDetails"]; */
        for (let i = 0; i < message.participantDetails.length; i++)
            AddParticipantDetails.internalBinaryWrite(message.participantDetails[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.AddParticipantsResponseBody
 */
export const AddParticipantsResponseBody = new AddParticipantsResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddParticipantsResponseWrapper$Type extends MessageType<AddParticipantsResponseWrapper> {
    constructor() {
        super("yarsha.groupchat.v1.AddParticipantsResponseWrapper", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => AddParticipantsResponseBody }
        ]);
    }
    create(value?: PartialMessage<AddParticipantsResponseWrapper>): AddParticipantsResponseWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AddParticipantsResponseWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddParticipantsResponseWrapper): AddParticipantsResponseWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.groupchat.v1.AddParticipantsResponseBody Response = 2 [json_name = "Response"];*/ 2:
                    message.response = AddParticipantsResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddParticipantsResponseWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.AddParticipantsResponseBody Response = 2 [json_name = "Response"]; */
        if (message.response)
            AddParticipantsResponseBody.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.AddParticipantsResponseWrapper
 */
export const AddParticipantsResponseWrapper = new AddParticipantsResponseWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GroupChatsStreamRequest$Type extends MessageType<GroupChatsStreamRequest> {
    constructor() {
        super("yarsha.groupchat.v1.GroupChatsStreamRequest", []);
    }
    create(value?: PartialMessage<GroupChatsStreamRequest>): GroupChatsStreamRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GroupChatsStreamRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GroupChatsStreamRequest): GroupChatsStreamRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GroupChatsStreamRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GroupChatsStreamRequest
 */
export const GroupChatsStreamRequest = new GroupChatsStreamRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerGroupChatUpdateRequest$Type extends MessageType<TriggerGroupChatUpdateRequest> {
    constructor() {
        super("yarsha.groupchat.v1.TriggerGroupChatUpdateRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TriggerGroupChatUpdateRequest>): TriggerGroupChatUpdateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        if (value !== undefined)
            reflectionMergePartial<TriggerGroupChatUpdateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TriggerGroupChatUpdateRequest): TriggerGroupChatUpdateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* string ChatId = 2 [json_name = "ChatId"];*/ 2:
                    message.chatId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TriggerGroupChatUpdateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string ChatId = 2 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.TriggerGroupChatUpdateRequest
 */
export const TriggerGroupChatUpdateRequest = new TriggerGroupChatUpdateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerGroupChatUpdateResponse$Type extends MessageType<TriggerGroupChatUpdateResponse> {
    constructor() {
        super("yarsha.groupchat.v1.TriggerGroupChatUpdateResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader }
        ]);
    }
    create(value?: PartialMessage<TriggerGroupChatUpdateResponse>): TriggerGroupChatUpdateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TriggerGroupChatUpdateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TriggerGroupChatUpdateResponse): TriggerGroupChatUpdateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TriggerGroupChatUpdateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.TriggerGroupChatUpdateResponse
 */
export const TriggerGroupChatUpdateResponse = new TriggerGroupChatUpdateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateGroupChatData$Type extends MessageType<UpdateGroupChatData> {
    constructor() {
        super("yarsha.groupchat.v1.UpdateGroupChatData", [
            { no: 1, name: "Name", kind: "scalar", jsonName: "Name", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Description", kind: "scalar", jsonName: "Description", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "GroupIcon", kind: "scalar", jsonName: "GroupIcon", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateGroupChatData>): UpdateGroupChatData {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateGroupChatData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateGroupChatData): UpdateGroupChatData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string Name = 1 [json_name = "Name"];*/ 1:
                    message.name = reader.string();
                    break;
                case /* optional string Description = 2 [json_name = "Description"];*/ 2:
                    message.description = reader.string();
                    break;
                case /* optional string GroupIcon = 3 [json_name = "GroupIcon"];*/ 3:
                    message.groupIcon = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateGroupChatData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string Name = 1 [json_name = "Name"]; */
        if (message.name !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* optional string Description = 2 [json_name = "Description"]; */
        if (message.description !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.description);
        /* optional string GroupIcon = 3 [json_name = "GroupIcon"]; */
        if (message.groupIcon !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.groupIcon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.UpdateGroupChatData
 */
export const UpdateGroupChatData = new UpdateGroupChatData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateGroupChatRequestBody$Type extends MessageType<UpdateGroupChatRequestBody> {
    constructor() {
        super("yarsha.groupchat.v1.UpdateGroupChatRequestBody", [
            { no: 1, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Data", kind: "message", jsonName: "Data", T: () => UpdateGroupChatData }
        ]);
    }
    create(value?: PartialMessage<UpdateGroupChatRequestBody>): UpdateGroupChatRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateGroupChatRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateGroupChatRequestBody): UpdateGroupChatRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ChatId = 1 [json_name = "ChatId"];*/ 1:
                    message.chatId = reader.string();
                    break;
                case /* yarsha.groupchat.v1.UpdateGroupChatData Data = 2 [json_name = "Data"];*/ 2:
                    message.data = UpdateGroupChatData.internalBinaryRead(reader, reader.uint32(), options, message.data);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateGroupChatRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ChatId = 1 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* yarsha.groupchat.v1.UpdateGroupChatData Data = 2 [json_name = "Data"]; */
        if (message.data)
            UpdateGroupChatData.internalBinaryWrite(message.data, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.UpdateGroupChatRequestBody
 */
export const UpdateGroupChatRequestBody = new UpdateGroupChatRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateGroupChatRequest$Type extends MessageType<UpdateGroupChatRequest> {
    constructor() {
        super("yarsha.groupchat.v1.UpdateGroupChatRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => UpdateGroupChatRequestBody }
        ]);
    }
    create(value?: PartialMessage<UpdateGroupChatRequest>): UpdateGroupChatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateGroupChatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateGroupChatRequest): UpdateGroupChatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.groupchat.v1.UpdateGroupChatRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = UpdateGroupChatRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateGroupChatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.UpdateGroupChatRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            UpdateGroupChatRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.UpdateGroupChatRequest
 */
export const UpdateGroupChatRequest = new UpdateGroupChatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateGroupChatResponseBody$Type extends MessageType<UpdateGroupChatResponseBody> {
    constructor() {
        super("yarsha.groupchat.v1.UpdateGroupChatResponseBody", [
            { no: 1, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "GroupName", kind: "scalar", jsonName: "GroupName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "GroupIcon", kind: "scalar", jsonName: "GroupIcon", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Type", kind: "scalar", jsonName: "Type", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "Description", kind: "scalar", jsonName: "Description", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "BackgroundColor", kind: "scalar", jsonName: "BackgroundColor", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateGroupChatResponseBody>): UpdateGroupChatResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        message.groupName = "";
        message.groupIcon = "";
        message.type = "";
        message.description = "";
        message.backgroundColor = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateGroupChatResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateGroupChatResponseBody): UpdateGroupChatResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ChatId = 1 [json_name = "ChatId"];*/ 1:
                    message.chatId = reader.string();
                    break;
                case /* string GroupName = 2 [json_name = "GroupName"];*/ 2:
                    message.groupName = reader.string();
                    break;
                case /* string GroupIcon = 3 [json_name = "GroupIcon"];*/ 3:
                    message.groupIcon = reader.string();
                    break;
                case /* string Type = 4 [json_name = "Type"];*/ 4:
                    message.type = reader.string();
                    break;
                case /* string Description = 5 [json_name = "Description"];*/ 5:
                    message.description = reader.string();
                    break;
                case /* string BackgroundColor = 6 [json_name = "BackgroundColor"];*/ 6:
                    message.backgroundColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateGroupChatResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ChatId = 1 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* string GroupName = 2 [json_name = "GroupName"]; */
        if (message.groupName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupName);
        /* string GroupIcon = 3 [json_name = "GroupIcon"]; */
        if (message.groupIcon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.groupIcon);
        /* string Type = 4 [json_name = "Type"]; */
        if (message.type !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.type);
        /* string Description = 5 [json_name = "Description"]; */
        if (message.description !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        /* string BackgroundColor = 6 [json_name = "BackgroundColor"]; */
        if (message.backgroundColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.backgroundColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.UpdateGroupChatResponseBody
 */
export const UpdateGroupChatResponseBody = new UpdateGroupChatResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateGroupChatResponse$Type extends MessageType<UpdateGroupChatResponse> {
    constructor() {
        super("yarsha.groupchat.v1.UpdateGroupChatResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => UpdateGroupChatResponseBody }
        ]);
    }
    create(value?: PartialMessage<UpdateGroupChatResponse>): UpdateGroupChatResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateGroupChatResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateGroupChatResponse): UpdateGroupChatResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.groupchat.v1.UpdateGroupChatResponseBody Response = 2 [json_name = "Response"];*/ 2:
                    message.response = UpdateGroupChatResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateGroupChatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.UpdateGroupChatResponseBody Response = 2 [json_name = "Response"]; */
        if (message.response)
            UpdateGroupChatResponseBody.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.UpdateGroupChatResponse
 */
export const UpdateGroupChatResponse = new UpdateGroupChatResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UserChats$Type extends MessageType<UserChats> {
    constructor() {
        super("yarsha.groupchat.v1.UserChats", [
            { no: 1, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "GroupName", kind: "scalar", jsonName: "GroupName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "GroupIcon", kind: "scalar", jsonName: "GroupIcon", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "Type", kind: "scalar", jsonName: "Type", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "Description", kind: "scalar", jsonName: "Description", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "BackgroundColor", kind: "scalar", jsonName: "BackgroundColor", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserChats>): UserChats {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        message.groupName = "";
        message.groupIcon = "";
        message.type = "";
        message.description = "";
        message.backgroundColor = "";
        if (value !== undefined)
            reflectionMergePartial<UserChats>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserChats): UserChats {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ChatId = 1 [json_name = "ChatId"];*/ 1:
                    message.chatId = reader.string();
                    break;
                case /* string GroupName = 2 [json_name = "GroupName"];*/ 2:
                    message.groupName = reader.string();
                    break;
                case /* string GroupIcon = 3 [json_name = "GroupIcon"];*/ 3:
                    message.groupIcon = reader.string();
                    break;
                case /* string Type = 4 [json_name = "Type"];*/ 4:
                    message.type = reader.string();
                    break;
                case /* string Description = 5 [json_name = "Description"];*/ 5:
                    message.description = reader.string();
                    break;
                case /* string BackgroundColor = 6 [json_name = "BackgroundColor"];*/ 6:
                    message.backgroundColor = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserChats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ChatId = 1 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* string GroupName = 2 [json_name = "GroupName"]; */
        if (message.groupName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.groupName);
        /* string GroupIcon = 3 [json_name = "GroupIcon"]; */
        if (message.groupIcon !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.groupIcon);
        /* string Type = 4 [json_name = "Type"]; */
        if (message.type !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.type);
        /* string Description = 5 [json_name = "Description"]; */
        if (message.description !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        /* string BackgroundColor = 6 [json_name = "BackgroundColor"]; */
        if (message.backgroundColor !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.backgroundColor);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.UserChats
 */
export const UserChats = new UserChats$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserChatsResponseBody$Type extends MessageType<GetUserChatsResponseBody> {
    constructor() {
        super("yarsha.groupchat.v1.GetUserChatsResponseBody", [
            { no: 1, name: "Chats", kind: "message", jsonName: "Chats", repeat: 1 /*RepeatType.PACKED*/, T: () => UserChats }
        ]);
    }
    create(value?: PartialMessage<GetUserChatsResponseBody>): GetUserChatsResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chats = [];
        if (value !== undefined)
            reflectionMergePartial<GetUserChatsResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserChatsResponseBody): GetUserChatsResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated yarsha.groupchat.v1.UserChats Chats = 1 [json_name = "Chats"];*/ 1:
                    message.chats.push(UserChats.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserChatsResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated yarsha.groupchat.v1.UserChats Chats = 1 [json_name = "Chats"]; */
        for (let i = 0; i < message.chats.length; i++)
            UserChats.internalBinaryWrite(message.chats[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GetUserChatsResponseBody
 */
export const GetUserChatsResponseBody = new GetUserChatsResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserChatsResponse$Type extends MessageType<GetUserChatsResponse> {
    constructor() {
        super("yarsha.groupchat.v1.GetUserChatsResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => GetUserChatsResponseBody }
        ]);
    }
    create(value?: PartialMessage<GetUserChatsResponse>): GetUserChatsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetUserChatsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserChatsResponse): GetUserChatsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.groupchat.v1.GetUserChatsResponseBody Response = 2 [json_name = "Response"];*/ 2:
                    message.response = GetUserChatsResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserChatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.GetUserChatsResponseBody Response = 2 [json_name = "Response"]; */
        if (message.response)
            GetUserChatsResponseBody.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GetUserChatsResponse
 */
export const GetUserChatsResponse = new GetUserChatsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FriendDetail$Type extends MessageType<FriendDetail> {
    constructor() {
        super("yarsha.groupchat.v1.FriendDetail", [
            { no: 1, name: "FriendId", kind: "scalar", jsonName: "FriendId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "FullName", kind: "scalar", jsonName: "FullName", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Username", kind: "scalar", jsonName: "Username", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "ProfilePicture", kind: "scalar", jsonName: "ProfilePicture", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "BackgroundColor", kind: "scalar", jsonName: "BackgroundColor", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "LastActive", kind: "scalar", jsonName: "LastActive", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "Status", kind: "scalar", jsonName: "Status", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FriendDetail>): FriendDetail {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.friendId = "";
        message.fullName = "";
        message.username = "";
        message.profilePicture = "";
        message.backgroundColor = "";
        message.lastActive = "";
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<FriendDetail>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FriendDetail): FriendDetail {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string FriendId = 1 [json_name = "FriendId"];*/ 1:
                    message.friendId = reader.string();
                    break;
                case /* string FullName = 2 [json_name = "FullName"];*/ 2:
                    message.fullName = reader.string();
                    break;
                case /* string Username = 3 [json_name = "Username"];*/ 3:
                    message.username = reader.string();
                    break;
                case /* string ProfilePicture = 4 [json_name = "ProfilePicture"];*/ 4:
                    message.profilePicture = reader.string();
                    break;
                case /* string BackgroundColor = 5 [json_name = "BackgroundColor"];*/ 5:
                    message.backgroundColor = reader.string();
                    break;
                case /* string LastActive = 6 [json_name = "LastActive"];*/ 6:
                    message.lastActive = reader.string();
                    break;
                case /* string Status = 7 [json_name = "Status"];*/ 7:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FriendDetail, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string FriendId = 1 [json_name = "FriendId"]; */
        if (message.friendId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.friendId);
        /* string FullName = 2 [json_name = "FullName"]; */
        if (message.fullName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fullName);
        /* string Username = 3 [json_name = "Username"]; */
        if (message.username !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.username);
        /* string ProfilePicture = 4 [json_name = "ProfilePicture"]; */
        if (message.profilePicture !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.profilePicture);
        /* string BackgroundColor = 5 [json_name = "BackgroundColor"]; */
        if (message.backgroundColor !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.backgroundColor);
        /* string LastActive = 6 [json_name = "LastActive"]; */
        if (message.lastActive !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.lastActive);
        /* string Status = 7 [json_name = "Status"]; */
        if (message.status !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.FriendDetail
 */
export const FriendDetail = new FriendDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFriendListResponseBody$Type extends MessageType<GetFriendListResponseBody> {
    constructor() {
        super("yarsha.groupchat.v1.GetFriendListResponseBody", [
            { no: 1, name: "Friends", kind: "message", jsonName: "Friends", repeat: 1 /*RepeatType.PACKED*/, T: () => FriendDetail }
        ]);
    }
    create(value?: PartialMessage<GetFriendListResponseBody>): GetFriendListResponseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.friends = [];
        if (value !== undefined)
            reflectionMergePartial<GetFriendListResponseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFriendListResponseBody): GetFriendListResponseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated yarsha.groupchat.v1.FriendDetail Friends = 1 [json_name = "Friends"];*/ 1:
                    message.friends.push(FriendDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFriendListResponseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated yarsha.groupchat.v1.FriendDetail Friends = 1 [json_name = "Friends"]; */
        for (let i = 0; i < message.friends.length; i++)
            FriendDetail.internalBinaryWrite(message.friends[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GetFriendListResponseBody
 */
export const GetFriendListResponseBody = new GetFriendListResponseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetFriendListResponse$Type extends MessageType<GetFriendListResponse> {
    constructor() {
        super("yarsha.groupchat.v1.GetFriendListResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => GetFriendListResponseBody }
        ]);
    }
    create(value?: PartialMessage<GetFriendListResponse>): GetFriendListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetFriendListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetFriendListResponse): GetFriendListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.groupchat.v1.GetFriendListResponseBody Response = 2 [json_name = "Response"];*/ 2:
                    message.response = GetFriendListResponseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetFriendListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.GetFriendListResponseBody Response = 2 [json_name = "Response"]; */
        if (message.response)
            GetFriendListResponseBody.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.GetFriendListResponse
 */
export const GetFriendListResponse = new GetFriendListResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToggleMuteGroupChatRequest$Type extends MessageType<ToggleMuteGroupChatRequest> {
    constructor() {
        super("yarsha.groupchat.v1.ToggleMuteGroupChatRequest", [
            { no: 1, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ToggleMuteGroupChatRequest>): ToggleMuteGroupChatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        if (value !== undefined)
            reflectionMergePartial<ToggleMuteGroupChatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToggleMuteGroupChatRequest): ToggleMuteGroupChatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ChatId = 1 [json_name = "ChatId"];*/ 1:
                    message.chatId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToggleMuteGroupChatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ChatId = 1 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.ToggleMuteGroupChatRequest
 */
export const ToggleMuteGroupChatRequest = new ToggleMuteGroupChatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToggleMuteGroupChatRequestWrapper$Type extends MessageType<ToggleMuteGroupChatRequestWrapper> {
    constructor() {
        super("yarsha.groupchat.v1.ToggleMuteGroupChatRequestWrapper", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => ToggleMuteGroupChatRequest }
        ]);
    }
    create(value?: PartialMessage<ToggleMuteGroupChatRequestWrapper>): ToggleMuteGroupChatRequestWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ToggleMuteGroupChatRequestWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToggleMuteGroupChatRequestWrapper): ToggleMuteGroupChatRequestWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.groupchat.v1.ToggleMuteGroupChatRequest Body = 2 [json_name = "Body"];*/ 2:
                    message.body = ToggleMuteGroupChatRequest.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToggleMuteGroupChatRequestWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.ToggleMuteGroupChatRequest Body = 2 [json_name = "Body"]; */
        if (message.body)
            ToggleMuteGroupChatRequest.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.ToggleMuteGroupChatRequestWrapper
 */
export const ToggleMuteGroupChatRequestWrapper = new ToggleMuteGroupChatRequestWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToggleMuteGroupChatResponse$Type extends MessageType<ToggleMuteGroupChatResponse> {
    constructor() {
        super("yarsha.groupchat.v1.ToggleMuteGroupChatResponse", [
            { no: 1, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "MuteStatus", kind: "scalar", jsonName: "MuteStatus", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ToggleMuteGroupChatResponse>): ToggleMuteGroupChatResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        message.muteStatus = false;
        if (value !== undefined)
            reflectionMergePartial<ToggleMuteGroupChatResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToggleMuteGroupChatResponse): ToggleMuteGroupChatResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ChatId = 1 [json_name = "ChatId"];*/ 1:
                    message.chatId = reader.string();
                    break;
                case /* bool MuteStatus = 2 [json_name = "MuteStatus"];*/ 2:
                    message.muteStatus = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToggleMuteGroupChatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ChatId = 1 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* bool MuteStatus = 2 [json_name = "MuteStatus"]; */
        if (message.muteStatus !== false)
            writer.tag(2, WireType.Varint).bool(message.muteStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.ToggleMuteGroupChatResponse
 */
export const ToggleMuteGroupChatResponse = new ToggleMuteGroupChatResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToggleMuteGroupChatResponseWrapper$Type extends MessageType<ToggleMuteGroupChatResponseWrapper> {
    constructor() {
        super("yarsha.groupchat.v1.ToggleMuteGroupChatResponseWrapper", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => ToggleMuteGroupChatResponse }
        ]);
    }
    create(value?: PartialMessage<ToggleMuteGroupChatResponseWrapper>): ToggleMuteGroupChatResponseWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ToggleMuteGroupChatResponseWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToggleMuteGroupChatResponseWrapper): ToggleMuteGroupChatResponseWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.groupchat.v1.ToggleMuteGroupChatResponse Response = 2 [json_name = "Response"];*/ 2:
                    message.response = ToggleMuteGroupChatResponse.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToggleMuteGroupChatResponseWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.ToggleMuteGroupChatResponse Response = 2 [json_name = "Response"]; */
        if (message.response)
            ToggleMuteGroupChatResponse.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.ToggleMuteGroupChatResponseWrapper
 */
export const ToggleMuteGroupChatResponseWrapper = new ToggleMuteGroupChatResponseWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TogglePinGroupChatRequest$Type extends MessageType<TogglePinGroupChatRequest> {
    constructor() {
        super("yarsha.groupchat.v1.TogglePinGroupChatRequest", [
            { no: 1, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TogglePinGroupChatRequest>): TogglePinGroupChatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        if (value !== undefined)
            reflectionMergePartial<TogglePinGroupChatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TogglePinGroupChatRequest): TogglePinGroupChatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ChatId = 1 [json_name = "ChatId"];*/ 1:
                    message.chatId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TogglePinGroupChatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ChatId = 1 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.TogglePinGroupChatRequest
 */
export const TogglePinGroupChatRequest = new TogglePinGroupChatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TogglePinGroupChatRequestWrapper$Type extends MessageType<TogglePinGroupChatRequestWrapper> {
    constructor() {
        super("yarsha.groupchat.v1.TogglePinGroupChatRequestWrapper", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => TogglePinGroupChatRequest }
        ]);
    }
    create(value?: PartialMessage<TogglePinGroupChatRequestWrapper>): TogglePinGroupChatRequestWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TogglePinGroupChatRequestWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TogglePinGroupChatRequestWrapper): TogglePinGroupChatRequestWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.groupchat.v1.TogglePinGroupChatRequest Body = 2 [json_name = "Body"];*/ 2:
                    message.body = TogglePinGroupChatRequest.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TogglePinGroupChatRequestWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.TogglePinGroupChatRequest Body = 2 [json_name = "Body"]; */
        if (message.body)
            TogglePinGroupChatRequest.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.TogglePinGroupChatRequestWrapper
 */
export const TogglePinGroupChatRequestWrapper = new TogglePinGroupChatRequestWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TogglePinGroupChatResponse$Type extends MessageType<TogglePinGroupChatResponse> {
    constructor() {
        super("yarsha.groupchat.v1.TogglePinGroupChatResponse", [
            { no: 1, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "PinStatus", kind: "scalar", jsonName: "PinStatus", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TogglePinGroupChatResponse>): TogglePinGroupChatResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        message.pinStatus = "";
        if (value !== undefined)
            reflectionMergePartial<TogglePinGroupChatResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TogglePinGroupChatResponse): TogglePinGroupChatResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ChatId = 1 [json_name = "ChatId"];*/ 1:
                    message.chatId = reader.string();
                    break;
                case /* string PinStatus = 2 [json_name = "PinStatus"];*/ 2:
                    message.pinStatus = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TogglePinGroupChatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ChatId = 1 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* string PinStatus = 2 [json_name = "PinStatus"]; */
        if (message.pinStatus !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.pinStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.TogglePinGroupChatResponse
 */
export const TogglePinGroupChatResponse = new TogglePinGroupChatResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TogglePinGroupChatResponseWrapper$Type extends MessageType<TogglePinGroupChatResponseWrapper> {
    constructor() {
        super("yarsha.groupchat.v1.TogglePinGroupChatResponseWrapper", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => TogglePinGroupChatResponse }
        ]);
    }
    create(value?: PartialMessage<TogglePinGroupChatResponseWrapper>): TogglePinGroupChatResponseWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<TogglePinGroupChatResponseWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TogglePinGroupChatResponseWrapper): TogglePinGroupChatResponseWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.groupchat.v1.TogglePinGroupChatResponse Response = 2 [json_name = "Response"];*/ 2:
                    message.response = TogglePinGroupChatResponse.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TogglePinGroupChatResponseWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.TogglePinGroupChatResponse Response = 2 [json_name = "Response"]; */
        if (message.response)
            TogglePinGroupChatResponse.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.TogglePinGroupChatResponseWrapper
 */
export const TogglePinGroupChatResponseWrapper = new TogglePinGroupChatResponseWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteGroupChatRequest$Type extends MessageType<DeleteGroupChatRequest> {
    constructor() {
        super("yarsha.groupchat.v1.DeleteGroupChatRequest", [
            { no: 1, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteGroupChatRequest>): DeleteGroupChatRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        if (value !== undefined)
            reflectionMergePartial<DeleteGroupChatRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteGroupChatRequest): DeleteGroupChatRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ChatId = 1 [json_name = "ChatId"];*/ 1:
                    message.chatId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteGroupChatRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ChatId = 1 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.DeleteGroupChatRequest
 */
export const DeleteGroupChatRequest = new DeleteGroupChatRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteGroupChatRequestWrapper$Type extends MessageType<DeleteGroupChatRequestWrapper> {
    constructor() {
        super("yarsha.groupchat.v1.DeleteGroupChatRequestWrapper", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => DeleteGroupChatRequest }
        ]);
    }
    create(value?: PartialMessage<DeleteGroupChatRequestWrapper>): DeleteGroupChatRequestWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteGroupChatRequestWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteGroupChatRequestWrapper): DeleteGroupChatRequestWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.groupchat.v1.DeleteGroupChatRequest Body = 2 [json_name = "Body"];*/ 2:
                    message.body = DeleteGroupChatRequest.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteGroupChatRequestWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.DeleteGroupChatRequest Body = 2 [json_name = "Body"]; */
        if (message.body)
            DeleteGroupChatRequest.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.DeleteGroupChatRequestWrapper
 */
export const DeleteGroupChatRequestWrapper = new DeleteGroupChatRequestWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteGroupChatResponse$Type extends MessageType<DeleteGroupChatResponse> {
    constructor() {
        super("yarsha.groupchat.v1.DeleteGroupChatResponse", [
            { no: 1, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "IsDeleted", kind: "scalar", jsonName: "IsDeleted", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteGroupChatResponse>): DeleteGroupChatResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        message.isDeleted = false;
        if (value !== undefined)
            reflectionMergePartial<DeleteGroupChatResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteGroupChatResponse): DeleteGroupChatResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ChatId = 1 [json_name = "ChatId"];*/ 1:
                    message.chatId = reader.string();
                    break;
                case /* bool IsDeleted = 2 [json_name = "IsDeleted"];*/ 2:
                    message.isDeleted = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteGroupChatResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ChatId = 1 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* bool IsDeleted = 2 [json_name = "IsDeleted"]; */
        if (message.isDeleted !== false)
            writer.tag(2, WireType.Varint).bool(message.isDeleted);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.DeleteGroupChatResponse
 */
export const DeleteGroupChatResponse = new DeleteGroupChatResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteGroupChatResponseWrapper$Type extends MessageType<DeleteGroupChatResponseWrapper> {
    constructor() {
        super("yarsha.groupchat.v1.DeleteGroupChatResponseWrapper", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => DeleteGroupChatResponse }
        ]);
    }
    create(value?: PartialMessage<DeleteGroupChatResponseWrapper>): DeleteGroupChatResponseWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DeleteGroupChatResponseWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteGroupChatResponseWrapper): DeleteGroupChatResponseWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.groupchat.v1.DeleteGroupChatResponse Response = 2 [json_name = "Response"];*/ 2:
                    message.response = DeleteGroupChatResponse.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteGroupChatResponseWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.DeleteGroupChatResponse Response = 2 [json_name = "Response"]; */
        if (message.response)
            DeleteGroupChatResponse.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.DeleteGroupChatResponseWrapper
 */
export const DeleteGroupChatResponseWrapper = new DeleteGroupChatResponseWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkAsSeenRequest$Type extends MessageType<MarkAsSeenRequest> {
    constructor() {
        super("yarsha.groupchat.v1.MarkAsSeenRequest", [
            { no: 1, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MarkAsSeenRequest>): MarkAsSeenRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        if (value !== undefined)
            reflectionMergePartial<MarkAsSeenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkAsSeenRequest): MarkAsSeenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ChatId = 1 [json_name = "ChatId"];*/ 1:
                    message.chatId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkAsSeenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ChatId = 1 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.MarkAsSeenRequest
 */
export const MarkAsSeenRequest = new MarkAsSeenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkAsSeenRequestWrapper$Type extends MessageType<MarkAsSeenRequestWrapper> {
    constructor() {
        super("yarsha.groupchat.v1.MarkAsSeenRequestWrapper", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => MarkAsSeenRequest }
        ]);
    }
    create(value?: PartialMessage<MarkAsSeenRequestWrapper>): MarkAsSeenRequestWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MarkAsSeenRequestWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkAsSeenRequestWrapper): MarkAsSeenRequestWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.groupchat.v1.MarkAsSeenRequest Body = 2 [json_name = "Body"];*/ 2:
                    message.body = MarkAsSeenRequest.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkAsSeenRequestWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.MarkAsSeenRequest Body = 2 [json_name = "Body"]; */
        if (message.body)
            MarkAsSeenRequest.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.MarkAsSeenRequestWrapper
 */
export const MarkAsSeenRequestWrapper = new MarkAsSeenRequestWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkAsSeenResponse$Type extends MessageType<MarkAsSeenResponse> {
    constructor() {
        super("yarsha.groupchat.v1.MarkAsSeenResponse", [
            { no: 1, name: "ChatId", kind: "scalar", jsonName: "ChatId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Success", kind: "scalar", jsonName: "Success", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MarkAsSeenResponse>): MarkAsSeenResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        message.success = false;
        if (value !== undefined)
            reflectionMergePartial<MarkAsSeenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkAsSeenResponse): MarkAsSeenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string ChatId = 1 [json_name = "ChatId"];*/ 1:
                    message.chatId = reader.string();
                    break;
                case /* bool Success = 2 [json_name = "Success"];*/ 2:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkAsSeenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string ChatId = 1 [json_name = "ChatId"]; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        /* bool Success = 2 [json_name = "Success"]; */
        if (message.success !== false)
            writer.tag(2, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.MarkAsSeenResponse
 */
export const MarkAsSeenResponse = new MarkAsSeenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MarkAsSeenResponseWrapper$Type extends MessageType<MarkAsSeenResponseWrapper> {
    constructor() {
        super("yarsha.groupchat.v1.MarkAsSeenResponseWrapper", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader },
            { no: 2, name: "Response", kind: "message", jsonName: "Response", T: () => MarkAsSeenResponse }
        ]);
    }
    create(value?: PartialMessage<MarkAsSeenResponseWrapper>): MarkAsSeenResponseWrapper {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<MarkAsSeenResponseWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarkAsSeenResponseWrapper): MarkAsSeenResponseWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                case /* yarsha.groupchat.v1.MarkAsSeenResponse Response = 2 [json_name = "Response"];*/ 2:
                    message.response = MarkAsSeenResponse.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MarkAsSeenResponseWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.v1.MarkAsSeenResponse Response = 2 [json_name = "Response"]; */
        if (message.response)
            MarkAsSeenResponse.internalBinaryWrite(message.response, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.v1.MarkAsSeenResponseWrapper
 */
export const MarkAsSeenResponseWrapper = new MarkAsSeenResponseWrapper$Type();
/**
 * @generated ServiceType for protobuf service yarsha.groupchat.v1.GroupChatService
 */
export const GroupChatService = new ServiceType("yarsha.groupchat.v1.GroupChatService", [
    { name: "CreateGroup", options: {}, I: GroupChatRequestWrapper, O: GroupChatResponseWrapper },
    { name: "GroupChats", options: {}, I: GroupChatsRequest, O: GroupChatsResponse },
    { name: "GetGroupChatDetails", options: {}, I: GetGroupChatDetailsRequest, O: GetGroupChatDetailsResponse },
    { name: "GetUserChatIds", options: {}, I: GroupChatsRequest, O: GetUserChatIdsResponse },
    { name: "CheckIndividualChat", options: {}, I: CheckIndividualChatRequestWrapper, O: CheckIndividualChatResponseWrapper },
    { name: "GetFriendsChatIds", options: {}, I: GetFriendsChatIdsRequest, O: GetFriendsChatIdsResponse },
    { name: "AddParticipants", options: {}, I: AddParticipantsRequestWrapper, O: AddParticipantsResponseWrapper },
    { name: "StreamGroupChats", serverStreaming: true, options: {}, I: GroupChatsStreamRequest, O: GroupChatsResponse },
    { name: "TriggerGroupChatUpdate", options: {}, I: TriggerGroupChatUpdateRequest, O: TriggerGroupChatUpdateResponse },
    { name: "UpdateGroupChat", options: {}, I: UpdateGroupChatRequest, O: UpdateGroupChatResponse },
    { name: "GetUserChats", options: {}, I: GroupChatsRequest, O: GetUserChatsResponse },
    { name: "GetFriendList", options: {}, I: GroupChatsRequest, O: GetFriendListResponse },
    { name: "ToggleMuteGroupChat", options: {}, I: ToggleMuteGroupChatRequestWrapper, O: ToggleMuteGroupChatResponseWrapper },
    { name: "TogglePinGroupChat", options: {}, I: TogglePinGroupChatRequestWrapper, O: TogglePinGroupChatResponseWrapper },
    { name: "DeleteGroupChat", options: {}, I: DeleteGroupChatRequestWrapper, O: DeleteGroupChatResponseWrapper },
    { name: "MarkAsSeen", options: {}, I: MarkAsSeenRequestWrapper, O: MarkAsSeenResponseWrapper }
]);
