// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "upload.proto" (package "yarsha.upload.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UploadService } from "./upload";
import type { GenerateUploadUrlResponse } from "./upload";
import type { GenerateUploadUrlRequest } from "./upload";
import type { DownloadFileResponse } from "./upload";
import type { DownloadFileRequest } from "./upload";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UploadFileChunkResponse } from "./upload";
import type { UploadFileChunkRequest } from "./upload";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service yarsha.upload.v1.UploadService
 */
export interface IUploadServiceClient {
    /**
     * @generated from protobuf rpc: UploadFileChunked(yarsha.upload.v1.UploadFileChunkRequest) returns (yarsha.upload.v1.UploadFileChunkResponse);
     */
    uploadFileChunked(input: UploadFileChunkRequest, options?: RpcOptions): UnaryCall<UploadFileChunkRequest, UploadFileChunkResponse>;
    /**
     * @generated from protobuf rpc: GetFileUrl(yarsha.upload.v1.DownloadFileRequest) returns (yarsha.upload.v1.DownloadFileResponse);
     */
    getFileUrl(input: DownloadFileRequest, options?: RpcOptions): UnaryCall<DownloadFileRequest, DownloadFileResponse>;
    /**
     * @generated from protobuf rpc: GenerateUploadUrl(yarsha.upload.v1.GenerateUploadUrlRequest) returns (yarsha.upload.v1.GenerateUploadUrlResponse);
     */
    generateUploadUrl(input: GenerateUploadUrlRequest, options?: RpcOptions): UnaryCall<GenerateUploadUrlRequest, GenerateUploadUrlResponse>;
}
/**
 * @generated from protobuf service yarsha.upload.v1.UploadService
 */
export class UploadServiceClient implements IUploadServiceClient, ServiceInfo {
    typeName = UploadService.typeName;
    methods = UploadService.methods;
    options = UploadService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: UploadFileChunked(yarsha.upload.v1.UploadFileChunkRequest) returns (yarsha.upload.v1.UploadFileChunkResponse);
     */
    uploadFileChunked(input: UploadFileChunkRequest, options?: RpcOptions): UnaryCall<UploadFileChunkRequest, UploadFileChunkResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<UploadFileChunkRequest, UploadFileChunkResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetFileUrl(yarsha.upload.v1.DownloadFileRequest) returns (yarsha.upload.v1.DownloadFileResponse);
     */
    getFileUrl(input: DownloadFileRequest, options?: RpcOptions): UnaryCall<DownloadFileRequest, DownloadFileResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<DownloadFileRequest, DownloadFileResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GenerateUploadUrl(yarsha.upload.v1.GenerateUploadUrlRequest) returns (yarsha.upload.v1.GenerateUploadUrlResponse);
     */
    generateUploadUrl(input: GenerateUploadUrlRequest, options?: RpcOptions): UnaryCall<GenerateUploadUrlRequest, GenerateUploadUrlResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenerateUploadUrlRequest, GenerateUploadUrlResponse>("unary", this._transport, method, opt, input);
    }
}
