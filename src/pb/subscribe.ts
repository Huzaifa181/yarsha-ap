// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "subscribe.proto" (package "yarsha.groupchat.subscribe.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message yarsha.groupchat.subscribe.v1.RequestHeader
 */
export interface RequestHeader {
    /**
     * @generated from protobuf field: string RequestId = 1 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string Timestamp = 2 [json_name = "Timestamp"];
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string Channel = 3 [json_name = "Channel"];
     */
    channel: string;
    /**
     * @generated from protobuf field: string DeviceType = 4 [json_name = "DeviceType"];
     */
    deviceType: string;
    /**
     * @generated from protobuf field: string DeviceId = 5 [json_name = "DeviceId"];
     */
    deviceId: string;
    /**
     * @generated from protobuf field: string ClientIp = 6 [json_name = "ClientIp"];
     */
    clientIp: string;
    /**
     * @generated from protobuf field: string Action = 7 [json_name = "Action"];
     */
    action: string;
    /**
     * @generated from protobuf field: string AppVersion = 8 [json_name = "AppVersion"];
     */
    appVersion: string;
    /**
     * @generated from protobuf field: string LanguageCode = 9 [json_name = "LanguageCode"];
     */
    languageCode: string;
    /**
     * @generated from protobuf field: string DeviceModel = 10 [json_name = "DeviceModel"];
     */
    deviceModel: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.subscribe.v1.ResponseHeader
 */
export interface ResponseHeader {
    /**
     * @generated from protobuf field: int32 Status = 1 [json_name = "Status"];
     */
    status: number;
    /**
     * @generated from protobuf field: string StatusCode = 2 [json_name = "StatusCode"];
     */
    statusCode: string;
    /**
     * @generated from protobuf field: string Timestamp = 3 [json_name = "Timestamp"];
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string RequestId = 4 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string ResponseTitle = 5 [json_name = "ResponseTitle"];
     */
    responseTitle: string;
    /**
     * @generated from protobuf field: string ResponseDescription = 6 [json_name = "ResponseDescription"];
     */
    responseDescription: string;
}
/**
 * @generated from protobuf message yarsha.groupchat.subscribe.v1.SubscribeRequest
 */
export interface SubscribeRequest {
    /**
     * @generated from protobuf field: yarsha.groupchat.subscribe.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: yarsha.groupchat.subscribe.v1.SubscribeRequestBody Body = 2 [json_name = "Body"];
     */
    body?: SubscribeRequestBody;
}
/**
 * @generated from protobuf message yarsha.groupchat.subscribe.v1.SubscribeResponse
 */
export interface SubscribeResponse {
    /**
     * @generated from protobuf field: yarsha.groupchat.subscribe.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
}
/**
 * @generated from protobuf message yarsha.groupchat.subscribe.v1.SubscribeRequestBody
 */
export interface SubscribeRequestBody {
    /**
     * @generated from protobuf field: string chatId = 1;
     */
    chatId: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class RequestHeader$Type extends MessageType<RequestHeader> {
    constructor() {
        super("yarsha.groupchat.subscribe.v1.RequestHeader", [
            { no: 1, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Channel", kind: "scalar", jsonName: "Channel", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "DeviceType", kind: "scalar", jsonName: "DeviceType", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "DeviceId", kind: "scalar", jsonName: "DeviceId", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ClientIp", kind: "scalar", jsonName: "ClientIp", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "Action", kind: "scalar", jsonName: "Action", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "AppVersion", kind: "scalar", jsonName: "AppVersion", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "LanguageCode", kind: "scalar", jsonName: "LanguageCode", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "DeviceModel", kind: "scalar", jsonName: "DeviceModel", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RequestHeader>): RequestHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = "";
        message.timestamp = "";
        message.channel = "";
        message.deviceType = "";
        message.deviceId = "";
        message.clientIp = "";
        message.action = "";
        message.appVersion = "";
        message.languageCode = "";
        message.deviceModel = "";
        if (value !== undefined)
            reflectionMergePartial<RequestHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestHeader): RequestHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string RequestId = 1 [json_name = "RequestId"];*/ 1:
                    message.requestId = reader.string();
                    break;
                case /* string Timestamp = 2 [json_name = "Timestamp"];*/ 2:
                    message.timestamp = reader.string();
                    break;
                case /* string Channel = 3 [json_name = "Channel"];*/ 3:
                    message.channel = reader.string();
                    break;
                case /* string DeviceType = 4 [json_name = "DeviceType"];*/ 4:
                    message.deviceType = reader.string();
                    break;
                case /* string DeviceId = 5 [json_name = "DeviceId"];*/ 5:
                    message.deviceId = reader.string();
                    break;
                case /* string ClientIp = 6 [json_name = "ClientIp"];*/ 6:
                    message.clientIp = reader.string();
                    break;
                case /* string Action = 7 [json_name = "Action"];*/ 7:
                    message.action = reader.string();
                    break;
                case /* string AppVersion = 8 [json_name = "AppVersion"];*/ 8:
                    message.appVersion = reader.string();
                    break;
                case /* string LanguageCode = 9 [json_name = "LanguageCode"];*/ 9:
                    message.languageCode = reader.string();
                    break;
                case /* string DeviceModel = 10 [json_name = "DeviceModel"];*/ 10:
                    message.deviceModel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string RequestId = 1 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.requestId);
        /* string Timestamp = 2 [json_name = "Timestamp"]; */
        if (message.timestamp !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.timestamp);
        /* string Channel = 3 [json_name = "Channel"]; */
        if (message.channel !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.channel);
        /* string DeviceType = 4 [json_name = "DeviceType"]; */
        if (message.deviceType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.deviceType);
        /* string DeviceId = 5 [json_name = "DeviceId"]; */
        if (message.deviceId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deviceId);
        /* string ClientIp = 6 [json_name = "ClientIp"]; */
        if (message.clientIp !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.clientIp);
        /* string Action = 7 [json_name = "Action"]; */
        if (message.action !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.action);
        /* string AppVersion = 8 [json_name = "AppVersion"]; */
        if (message.appVersion !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.appVersion);
        /* string LanguageCode = 9 [json_name = "LanguageCode"]; */
        if (message.languageCode !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.languageCode);
        /* string DeviceModel = 10 [json_name = "DeviceModel"]; */
        if (message.deviceModel !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.deviceModel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.subscribe.v1.RequestHeader
 */
export const RequestHeader = new RequestHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseHeader$Type extends MessageType<ResponseHeader> {
    constructor() {
        super("yarsha.groupchat.subscribe.v1.ResponseHeader", [
            { no: 1, name: "Status", kind: "scalar", jsonName: "Status", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "StatusCode", kind: "scalar", jsonName: "StatusCode", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ResponseTitle", kind: "scalar", jsonName: "ResponseTitle", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ResponseDescription", kind: "scalar", jsonName: "ResponseDescription", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseHeader>): ResponseHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = 0;
        message.statusCode = "";
        message.timestamp = "";
        message.requestId = "";
        message.responseTitle = "";
        message.responseDescription = "";
        if (value !== undefined)
            reflectionMergePartial<ResponseHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseHeader): ResponseHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 Status = 1 [json_name = "Status"];*/ 1:
                    message.status = reader.int32();
                    break;
                case /* string StatusCode = 2 [json_name = "StatusCode"];*/ 2:
                    message.statusCode = reader.string();
                    break;
                case /* string Timestamp = 3 [json_name = "Timestamp"];*/ 3:
                    message.timestamp = reader.string();
                    break;
                case /* string RequestId = 4 [json_name = "RequestId"];*/ 4:
                    message.requestId = reader.string();
                    break;
                case /* string ResponseTitle = 5 [json_name = "ResponseTitle"];*/ 5:
                    message.responseTitle = reader.string();
                    break;
                case /* string ResponseDescription = 6 [json_name = "ResponseDescription"];*/ 6:
                    message.responseDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 Status = 1 [json_name = "Status"]; */
        if (message.status !== 0)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* string StatusCode = 2 [json_name = "StatusCode"]; */
        if (message.statusCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.statusCode);
        /* string Timestamp = 3 [json_name = "Timestamp"]; */
        if (message.timestamp !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.timestamp);
        /* string RequestId = 4 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.requestId);
        /* string ResponseTitle = 5 [json_name = "ResponseTitle"]; */
        if (message.responseTitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.responseTitle);
        /* string ResponseDescription = 6 [json_name = "ResponseDescription"]; */
        if (message.responseDescription !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.responseDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.subscribe.v1.ResponseHeader
 */
export const ResponseHeader = new ResponseHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeRequest$Type extends MessageType<SubscribeRequest> {
    constructor() {
        super("yarsha.groupchat.subscribe.v1.SubscribeRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => SubscribeRequestBody }
        ]);
    }
    create(value?: PartialMessage<SubscribeRequest>): SubscribeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeRequest): SubscribeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.subscribe.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.groupchat.subscribe.v1.SubscribeRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = SubscribeRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.subscribe.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.groupchat.subscribe.v1.SubscribeRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            SubscribeRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.subscribe.v1.SubscribeRequest
 */
export const SubscribeRequest = new SubscribeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeResponse$Type extends MessageType<SubscribeResponse> {
    constructor() {
        super("yarsha.groupchat.subscribe.v1.SubscribeResponse", [
            { no: 1, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader }
        ]);
    }
    create(value?: PartialMessage<SubscribeResponse>): SubscribeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<SubscribeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeResponse): SubscribeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.groupchat.subscribe.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"];*/ 1:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.groupchat.subscribe.v1.ResponseHeader ResponseHeader = 1 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.subscribe.v1.SubscribeResponse
 */
export const SubscribeResponse = new SubscribeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SubscribeRequestBody$Type extends MessageType<SubscribeRequestBody> {
    constructor() {
        super("yarsha.groupchat.subscribe.v1.SubscribeRequestBody", [
            { no: 1, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SubscribeRequestBody>): SubscribeRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.chatId = "";
        if (value !== undefined)
            reflectionMergePartial<SubscribeRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubscribeRequestBody): SubscribeRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string chatId */ 1:
                    message.chatId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SubscribeRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string chatId = 1; */
        if (message.chatId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.groupchat.subscribe.v1.SubscribeRequestBody
 */
export const SubscribeRequestBody = new SubscribeRequestBody$Type();
/**
 * @generated ServiceType for protobuf service yarsha.groupchat.subscribe.v1.SubscribeService
 */
export const SubscribeService = new ServiceType("yarsha.groupchat.subscribe.v1.SubscribeService", [
    { name: "SubscribeToGroupChat", options: {}, I: SubscribeRequest, O: SubscribeResponse }
]);
