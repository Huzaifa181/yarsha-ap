// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "upload.proto" (package "yarsha.upload.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message yarsha.upload.v1.RequestHeader
 */
export interface RequestHeader {
    /**
     * @generated from protobuf field: string RequestId = 1 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string Timestamp = 2 [json_name = "Timestamp"];
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string Channel = 3 [json_name = "Channel"];
     */
    channel: string;
    /**
     * @generated from protobuf field: string DeviceType = 4 [json_name = "DeviceType"];
     */
    deviceType: string;
    /**
     * @generated from protobuf field: string DeviceId = 5 [json_name = "DeviceId"];
     */
    deviceId: string;
    /**
     * @generated from protobuf field: string ClientIp = 6 [json_name = "ClientIp"];
     */
    clientIp: string;
    /**
     * @generated from protobuf field: string Action = 7 [json_name = "Action"];
     */
    action: string;
    /**
     * @generated from protobuf field: string AppVersion = 8 [json_name = "AppVersion"];
     */
    appVersion: string;
    /**
     * @generated from protobuf field: string LanguageCode = 9 [json_name = "LanguageCode"];
     */
    languageCode: string;
    /**
     * @generated from protobuf field: string DeviceModel = 10 [json_name = "DeviceModel"];
     */
    deviceModel: string;
}
/**
 * @generated from protobuf message yarsha.upload.v1.ResponseHeader
 */
export interface ResponseHeader {
    /**
     * @generated from protobuf field: string Status = 1 [json_name = "Status"];
     */
    status: string;
    /**
     * @generated from protobuf field: string StatusCode = 2 [json_name = "StatusCode"];
     */
    statusCode: string;
    /**
     * @generated from protobuf field: string Timestamp = 3 [json_name = "Timestamp"];
     */
    timestamp: string;
    /**
     * @generated from protobuf field: string RequestId = 4 [json_name = "RequestId"];
     */
    requestId: string;
    /**
     * @generated from protobuf field: string ResponseTitle = 5 [json_name = "ResponseTitle"];
     */
    responseTitle: string;
    /**
     * @generated from protobuf field: string ResponseDescription = 6 [json_name = "ResponseDescription"];
     */
    responseDescription: string;
}
/**
 * @generated from protobuf message yarsha.upload.v1.UploadFileChunk
 */
export interface UploadFileChunk {
    /**
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: string fileName = 2;
     */
    fileName: string;
    /**
     * @generated from protobuf field: string contentType = 3;
     */
    contentType: string;
    /**
     * @generated from protobuf field: string chatId = 4;
     */
    chatId: string;
}
/**
 * @generated from protobuf message yarsha.upload.v1.responseBody
 */
export interface responseBody {
    /**
     * @generated from protobuf field: string filePath = 1;
     */
    filePath: string;
    /**
     * @generated from protobuf field: string uploadUrl = 2;
     */
    uploadUrl: string;
    /**
     * @generated from protobuf field: string readUrl = 3;
     */
    readUrl: string;
    /**
     * @generated from protobuf field: string expirationTime = 4;
     */
    expirationTime: string;
    /**
     * @generated from protobuf field: string mimeType = 5;
     */
    mimeType: string;
}
/**
 * @generated from protobuf message yarsha.upload.v1.SignedUrlResponse
 */
export interface SignedUrlResponse {
    /**
     * @generated from protobuf field: string filePath = 1;
     */
    filePath: string;
    /**
     * @generated from protobuf field: string signedUrl = 2;
     */
    signedUrl: string;
    /**
     * @generated from protobuf field: string expirationTime = 4;
     */
    expirationTime: string;
    /**
     * @generated from protobuf field: string mimeType = 5;
     */
    mimeType: string;
}
/**
 * @generated from protobuf message yarsha.upload.v1.UploadFileResponse
 */
export interface UploadFileResponse {
    /**
     * @generated from protobuf field: yarsha.upload.v1.responseBody Response = 1 [json_name = "Response"];
     */
    response?: responseBody;
    /**
     * @generated from protobuf field: yarsha.upload.v1.ResponseHeader ResponseHeader = 2 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
}
/**
 * @generated from protobuf message yarsha.upload.v1.DownloadFileRequestBody
 */
export interface DownloadFileRequestBody {
    /**
     * @generated from protobuf field: string filePath = 1;
     */
    filePath: string;
}
/**
 * @generated from protobuf message yarsha.upload.v1.DownloadFileRequest
 */
export interface DownloadFileRequest {
    /**
     * @generated from protobuf field: yarsha.upload.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: yarsha.upload.v1.DownloadFileRequestBody Body = 2 [json_name = "Body"];
     */
    body?: DownloadFileRequestBody;
}
/**
 * @generated from protobuf message yarsha.upload.v1.DownloadFileResponse
 */
export interface DownloadFileResponse {
    /**
     * @generated from protobuf field: yarsha.upload.v1.SignedUrlResponse Response = 1 [json_name = "Response"];
     */
    response?: SignedUrlResponse;
    /**
     * @generated from protobuf field: yarsha.upload.v1.ResponseHeader ResponseHeader = 2 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
}
/**
 * @generated from protobuf message yarsha.upload.v1.UploadFileChunkRequest
 */
export interface UploadFileChunkRequest {
    /**
     * @generated from protobuf field: string uploadId = 1;
     */
    uploadId: string;
    /**
     * @generated from protobuf field: string fileName = 2;
     */
    fileName: string;
    /**
     * @generated from protobuf field: string contentType = 3;
     */
    contentType: string;
    /**
     * @generated from protobuf field: string chatId = 4;
     */
    chatId: string;
    /**
     * @generated from protobuf field: bool isLastChunk = 5;
     */
    isLastChunk: boolean;
    /**
     * @generated from protobuf field: bytes data = 6;
     */
    data: Uint8Array;
}
/**
 * @generated from protobuf message yarsha.upload.v1.UploadFileChunkResponse
 */
export interface UploadFileChunkResponse {
    /**
     * @generated from protobuf field: yarsha.upload.v1.responseBody Response = 1 [json_name = "Response"];
     */
    response?: responseBody;
    /**
     * @generated from protobuf field: yarsha.upload.v1.ResponseHeader ResponseHeader = 2 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
}
/**
 * @generated from protobuf message yarsha.upload.v1.GenerateUploadUrlRequestBody
 */
export interface GenerateUploadUrlRequestBody {
    /**
     * @generated from protobuf field: string fileName = 1;
     */
    fileName: string;
    /**
     * @generated from protobuf field: string contentType = 2;
     */
    contentType: string;
    /**
     * @generated from protobuf field: string chatId = 3;
     */
    chatId: string;
}
/**
 * @generated from protobuf message yarsha.upload.v1.GenerateUploadUrlRequest
 */
export interface GenerateUploadUrlRequest {
    /**
     * @generated from protobuf field: yarsha.upload.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];
     */
    requestHeader?: RequestHeader;
    /**
     * @generated from protobuf field: yarsha.upload.v1.GenerateUploadUrlRequestBody Body = 2 [json_name = "Body"];
     */
    body?: GenerateUploadUrlRequestBody;
}
/**
 * @generated from protobuf message yarsha.upload.v1.GenerateUploadUrlResponse
 */
export interface GenerateUploadUrlResponse {
    /**
     * @generated from protobuf field: yarsha.upload.v1.responseBody Response = 1 [json_name = "Response"];
     */
    response?: responseBody;
    /**
     * @generated from protobuf field: yarsha.upload.v1.ResponseHeader ResponseHeader = 2 [json_name = "ResponseHeader"];
     */
    responseHeader?: ResponseHeader;
}
// @generated message type with reflection information, may provide speed optimized methods
class RequestHeader$Type extends MessageType<RequestHeader> {
    constructor() {
        super("yarsha.upload.v1.RequestHeader", [
            { no: 1, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Channel", kind: "scalar", jsonName: "Channel", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "DeviceType", kind: "scalar", jsonName: "DeviceType", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "DeviceId", kind: "scalar", jsonName: "DeviceId", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ClientIp", kind: "scalar", jsonName: "ClientIp", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "Action", kind: "scalar", jsonName: "Action", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "AppVersion", kind: "scalar", jsonName: "AppVersion", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "LanguageCode", kind: "scalar", jsonName: "LanguageCode", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "DeviceModel", kind: "scalar", jsonName: "DeviceModel", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RequestHeader>): RequestHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.requestId = "";
        message.timestamp = "";
        message.channel = "";
        message.deviceType = "";
        message.deviceId = "";
        message.clientIp = "";
        message.action = "";
        message.appVersion = "";
        message.languageCode = "";
        message.deviceModel = "";
        if (value !== undefined)
            reflectionMergePartial<RequestHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RequestHeader): RequestHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string RequestId = 1 [json_name = "RequestId"];*/ 1:
                    message.requestId = reader.string();
                    break;
                case /* string Timestamp = 2 [json_name = "Timestamp"];*/ 2:
                    message.timestamp = reader.string();
                    break;
                case /* string Channel = 3 [json_name = "Channel"];*/ 3:
                    message.channel = reader.string();
                    break;
                case /* string DeviceType = 4 [json_name = "DeviceType"];*/ 4:
                    message.deviceType = reader.string();
                    break;
                case /* string DeviceId = 5 [json_name = "DeviceId"];*/ 5:
                    message.deviceId = reader.string();
                    break;
                case /* string ClientIp = 6 [json_name = "ClientIp"];*/ 6:
                    message.clientIp = reader.string();
                    break;
                case /* string Action = 7 [json_name = "Action"];*/ 7:
                    message.action = reader.string();
                    break;
                case /* string AppVersion = 8 [json_name = "AppVersion"];*/ 8:
                    message.appVersion = reader.string();
                    break;
                case /* string LanguageCode = 9 [json_name = "LanguageCode"];*/ 9:
                    message.languageCode = reader.string();
                    break;
                case /* string DeviceModel = 10 [json_name = "DeviceModel"];*/ 10:
                    message.deviceModel = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RequestHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string RequestId = 1 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.requestId);
        /* string Timestamp = 2 [json_name = "Timestamp"]; */
        if (message.timestamp !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.timestamp);
        /* string Channel = 3 [json_name = "Channel"]; */
        if (message.channel !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.channel);
        /* string DeviceType = 4 [json_name = "DeviceType"]; */
        if (message.deviceType !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.deviceType);
        /* string DeviceId = 5 [json_name = "DeviceId"]; */
        if (message.deviceId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.deviceId);
        /* string ClientIp = 6 [json_name = "ClientIp"]; */
        if (message.clientIp !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.clientIp);
        /* string Action = 7 [json_name = "Action"]; */
        if (message.action !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.action);
        /* string AppVersion = 8 [json_name = "AppVersion"]; */
        if (message.appVersion !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.appVersion);
        /* string LanguageCode = 9 [json_name = "LanguageCode"]; */
        if (message.languageCode !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.languageCode);
        /* string DeviceModel = 10 [json_name = "DeviceModel"]; */
        if (message.deviceModel !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.deviceModel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.upload.v1.RequestHeader
 */
export const RequestHeader = new RequestHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResponseHeader$Type extends MessageType<ResponseHeader> {
    constructor() {
        super("yarsha.upload.v1.ResponseHeader", [
            { no: 1, name: "Status", kind: "scalar", jsonName: "Status", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "StatusCode", kind: "scalar", jsonName: "StatusCode", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Timestamp", kind: "scalar", jsonName: "Timestamp", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "RequestId", kind: "scalar", jsonName: "RequestId", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "ResponseTitle", kind: "scalar", jsonName: "ResponseTitle", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "ResponseDescription", kind: "scalar", jsonName: "ResponseDescription", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResponseHeader>): ResponseHeader {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        message.statusCode = "";
        message.timestamp = "";
        message.requestId = "";
        message.responseTitle = "";
        message.responseDescription = "";
        if (value !== undefined)
            reflectionMergePartial<ResponseHeader>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResponseHeader): ResponseHeader {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Status = 1 [json_name = "Status"];*/ 1:
                    message.status = reader.string();
                    break;
                case /* string StatusCode = 2 [json_name = "StatusCode"];*/ 2:
                    message.statusCode = reader.string();
                    break;
                case /* string Timestamp = 3 [json_name = "Timestamp"];*/ 3:
                    message.timestamp = reader.string();
                    break;
                case /* string RequestId = 4 [json_name = "RequestId"];*/ 4:
                    message.requestId = reader.string();
                    break;
                case /* string ResponseTitle = 5 [json_name = "ResponseTitle"];*/ 5:
                    message.responseTitle = reader.string();
                    break;
                case /* string ResponseDescription = 6 [json_name = "ResponseDescription"];*/ 6:
                    message.responseDescription = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResponseHeader, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Status = 1 [json_name = "Status"]; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        /* string StatusCode = 2 [json_name = "StatusCode"]; */
        if (message.statusCode !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.statusCode);
        /* string Timestamp = 3 [json_name = "Timestamp"]; */
        if (message.timestamp !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.timestamp);
        /* string RequestId = 4 [json_name = "RequestId"]; */
        if (message.requestId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.requestId);
        /* string ResponseTitle = 5 [json_name = "ResponseTitle"]; */
        if (message.responseTitle !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.responseTitle);
        /* string ResponseDescription = 6 [json_name = "ResponseDescription"]; */
        if (message.responseDescription !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.responseDescription);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.upload.v1.ResponseHeader
 */
export const ResponseHeader = new ResponseHeader$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadFileChunk$Type extends MessageType<UploadFileChunk> {
    constructor() {
        super("yarsha.upload.v1.UploadFileChunk", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "fileName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contentType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UploadFileChunk>): UploadFileChunk {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.data = new Uint8Array(0);
        message.fileName = "";
        message.contentType = "";
        message.chatId = "";
        if (value !== undefined)
            reflectionMergePartial<UploadFileChunk>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadFileChunk): UploadFileChunk {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                case /* string fileName */ 2:
                    message.fileName = reader.string();
                    break;
                case /* string contentType */ 3:
                    message.contentType = reader.string();
                    break;
                case /* string chatId */ 4:
                    message.chatId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadFileChunk, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        /* string fileName = 2; */
        if (message.fileName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fileName);
        /* string contentType = 3; */
        if (message.contentType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contentType);
        /* string chatId = 4; */
        if (message.chatId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.upload.v1.UploadFileChunk
 */
export const UploadFileChunk = new UploadFileChunk$Type();
// @generated message type with reflection information, may provide speed optimized methods
class responseBody$Type extends MessageType<responseBody> {
    constructor() {
        super("yarsha.upload.v1.responseBody", [
            { no: 1, name: "filePath", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uploadUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "readUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "expirationTime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "mimeType", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<responseBody>): responseBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filePath = "";
        message.uploadUrl = "";
        message.readUrl = "";
        message.expirationTime = "";
        message.mimeType = "";
        if (value !== undefined)
            reflectionMergePartial<responseBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: responseBody): responseBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filePath */ 1:
                    message.filePath = reader.string();
                    break;
                case /* string uploadUrl */ 2:
                    message.uploadUrl = reader.string();
                    break;
                case /* string readUrl */ 3:
                    message.readUrl = reader.string();
                    break;
                case /* string expirationTime */ 4:
                    message.expirationTime = reader.string();
                    break;
                case /* string mimeType */ 5:
                    message.mimeType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: responseBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filePath = 1; */
        if (message.filePath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filePath);
        /* string uploadUrl = 2; */
        if (message.uploadUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uploadUrl);
        /* string readUrl = 3; */
        if (message.readUrl !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.readUrl);
        /* string expirationTime = 4; */
        if (message.expirationTime !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.expirationTime);
        /* string mimeType = 5; */
        if (message.mimeType !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.mimeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.upload.v1.responseBody
 */
export const responseBody = new responseBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SignedUrlResponse$Type extends MessageType<SignedUrlResponse> {
    constructor() {
        super("yarsha.upload.v1.SignedUrlResponse", [
            { no: 1, name: "filePath", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "signedUrl", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "expirationTime", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "mimeType", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SignedUrlResponse>): SignedUrlResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filePath = "";
        message.signedUrl = "";
        message.expirationTime = "";
        message.mimeType = "";
        if (value !== undefined)
            reflectionMergePartial<SignedUrlResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SignedUrlResponse): SignedUrlResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filePath */ 1:
                    message.filePath = reader.string();
                    break;
                case /* string signedUrl */ 2:
                    message.signedUrl = reader.string();
                    break;
                case /* string expirationTime */ 4:
                    message.expirationTime = reader.string();
                    break;
                case /* string mimeType */ 5:
                    message.mimeType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SignedUrlResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filePath = 1; */
        if (message.filePath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filePath);
        /* string signedUrl = 2; */
        if (message.signedUrl !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.signedUrl);
        /* string expirationTime = 4; */
        if (message.expirationTime !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.expirationTime);
        /* string mimeType = 5; */
        if (message.mimeType !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.mimeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.upload.v1.SignedUrlResponse
 */
export const SignedUrlResponse = new SignedUrlResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadFileResponse$Type extends MessageType<UploadFileResponse> {
    constructor() {
        super("yarsha.upload.v1.UploadFileResponse", [
            { no: 1, name: "Response", kind: "message", jsonName: "Response", T: () => responseBody },
            { no: 2, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader }
        ]);
    }
    create(value?: PartialMessage<UploadFileResponse>): UploadFileResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UploadFileResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadFileResponse): UploadFileResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.upload.v1.responseBody Response = 1 [json_name = "Response"];*/ 1:
                    message.response = responseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                case /* yarsha.upload.v1.ResponseHeader ResponseHeader = 2 [json_name = "ResponseHeader"];*/ 2:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadFileResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.upload.v1.responseBody Response = 1 [json_name = "Response"]; */
        if (message.response)
            responseBody.internalBinaryWrite(message.response, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.upload.v1.ResponseHeader ResponseHeader = 2 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.upload.v1.UploadFileResponse
 */
export const UploadFileResponse = new UploadFileResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownloadFileRequestBody$Type extends MessageType<DownloadFileRequestBody> {
    constructor() {
        super("yarsha.upload.v1.DownloadFileRequestBody", [
            { no: 1, name: "filePath", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DownloadFileRequestBody>): DownloadFileRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filePath = "";
        if (value !== undefined)
            reflectionMergePartial<DownloadFileRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadFileRequestBody): DownloadFileRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filePath */ 1:
                    message.filePath = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownloadFileRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filePath = 1; */
        if (message.filePath !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filePath);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.upload.v1.DownloadFileRequestBody
 */
export const DownloadFileRequestBody = new DownloadFileRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownloadFileRequest$Type extends MessageType<DownloadFileRequest> {
    constructor() {
        super("yarsha.upload.v1.DownloadFileRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => DownloadFileRequestBody }
        ]);
    }
    create(value?: PartialMessage<DownloadFileRequest>): DownloadFileRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DownloadFileRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadFileRequest): DownloadFileRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.upload.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.upload.v1.DownloadFileRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = DownloadFileRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownloadFileRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.upload.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.upload.v1.DownloadFileRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            DownloadFileRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.upload.v1.DownloadFileRequest
 */
export const DownloadFileRequest = new DownloadFileRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownloadFileResponse$Type extends MessageType<DownloadFileResponse> {
    constructor() {
        super("yarsha.upload.v1.DownloadFileResponse", [
            { no: 1, name: "Response", kind: "message", jsonName: "Response", T: () => SignedUrlResponse },
            { no: 2, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader }
        ]);
    }
    create(value?: PartialMessage<DownloadFileResponse>): DownloadFileResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<DownloadFileResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadFileResponse): DownloadFileResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.upload.v1.SignedUrlResponse Response = 1 [json_name = "Response"];*/ 1:
                    message.response = SignedUrlResponse.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                case /* yarsha.upload.v1.ResponseHeader ResponseHeader = 2 [json_name = "ResponseHeader"];*/ 2:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownloadFileResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.upload.v1.SignedUrlResponse Response = 1 [json_name = "Response"]; */
        if (message.response)
            SignedUrlResponse.internalBinaryWrite(message.response, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.upload.v1.ResponseHeader ResponseHeader = 2 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.upload.v1.DownloadFileResponse
 */
export const DownloadFileResponse = new DownloadFileResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadFileChunkRequest$Type extends MessageType<UploadFileChunkRequest> {
    constructor() {
        super("yarsha.upload.v1.UploadFileChunkRequest", [
            { no: 1, name: "uploadId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "fileName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "contentType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "isLastChunk", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<UploadFileChunkRequest>): UploadFileChunkRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.uploadId = "";
        message.fileName = "";
        message.contentType = "";
        message.chatId = "";
        message.isLastChunk = false;
        message.data = new Uint8Array(0);
        if (value !== undefined)
            reflectionMergePartial<UploadFileChunkRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadFileChunkRequest): UploadFileChunkRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string uploadId */ 1:
                    message.uploadId = reader.string();
                    break;
                case /* string fileName */ 2:
                    message.fileName = reader.string();
                    break;
                case /* string contentType */ 3:
                    message.contentType = reader.string();
                    break;
                case /* string chatId */ 4:
                    message.chatId = reader.string();
                    break;
                case /* bool isLastChunk */ 5:
                    message.isLastChunk = reader.bool();
                    break;
                case /* bytes data */ 6:
                    message.data = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadFileChunkRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string uploadId = 1; */
        if (message.uploadId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.uploadId);
        /* string fileName = 2; */
        if (message.fileName !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.fileName);
        /* string contentType = 3; */
        if (message.contentType !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.contentType);
        /* string chatId = 4; */
        if (message.chatId !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.chatId);
        /* bool isLastChunk = 5; */
        if (message.isLastChunk !== false)
            writer.tag(5, WireType.Varint).bool(message.isLastChunk);
        /* bytes data = 6; */
        if (message.data.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.upload.v1.UploadFileChunkRequest
 */
export const UploadFileChunkRequest = new UploadFileChunkRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UploadFileChunkResponse$Type extends MessageType<UploadFileChunkResponse> {
    constructor() {
        super("yarsha.upload.v1.UploadFileChunkResponse", [
            { no: 1, name: "Response", kind: "message", jsonName: "Response", T: () => responseBody },
            { no: 2, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader }
        ]);
    }
    create(value?: PartialMessage<UploadFileChunkResponse>): UploadFileChunkResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UploadFileChunkResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UploadFileChunkResponse): UploadFileChunkResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.upload.v1.responseBody Response = 1 [json_name = "Response"];*/ 1:
                    message.response = responseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                case /* yarsha.upload.v1.ResponseHeader ResponseHeader = 2 [json_name = "ResponseHeader"];*/ 2:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UploadFileChunkResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.upload.v1.responseBody Response = 1 [json_name = "Response"]; */
        if (message.response)
            responseBody.internalBinaryWrite(message.response, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.upload.v1.ResponseHeader ResponseHeader = 2 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.upload.v1.UploadFileChunkResponse
 */
export const UploadFileChunkResponse = new UploadFileChunkResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateUploadUrlRequestBody$Type extends MessageType<GenerateUploadUrlRequestBody> {
    constructor() {
        super("yarsha.upload.v1.GenerateUploadUrlRequestBody", [
            { no: 1, name: "fileName", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "contentType", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "chatId", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GenerateUploadUrlRequestBody>): GenerateUploadUrlRequestBody {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.fileName = "";
        message.contentType = "";
        message.chatId = "";
        if (value !== undefined)
            reflectionMergePartial<GenerateUploadUrlRequestBody>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenerateUploadUrlRequestBody): GenerateUploadUrlRequestBody {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string fileName */ 1:
                    message.fileName = reader.string();
                    break;
                case /* string contentType */ 2:
                    message.contentType = reader.string();
                    break;
                case /* string chatId */ 3:
                    message.chatId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenerateUploadUrlRequestBody, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string fileName = 1; */
        if (message.fileName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.fileName);
        /* string contentType = 2; */
        if (message.contentType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contentType);
        /* string chatId = 3; */
        if (message.chatId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.chatId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.upload.v1.GenerateUploadUrlRequestBody
 */
export const GenerateUploadUrlRequestBody = new GenerateUploadUrlRequestBody$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateUploadUrlRequest$Type extends MessageType<GenerateUploadUrlRequest> {
    constructor() {
        super("yarsha.upload.v1.GenerateUploadUrlRequest", [
            { no: 1, name: "RequestHeader", kind: "message", jsonName: "RequestHeader", T: () => RequestHeader },
            { no: 2, name: "Body", kind: "message", jsonName: "Body", T: () => GenerateUploadUrlRequestBody }
        ]);
    }
    create(value?: PartialMessage<GenerateUploadUrlRequest>): GenerateUploadUrlRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GenerateUploadUrlRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenerateUploadUrlRequest): GenerateUploadUrlRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.upload.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"];*/ 1:
                    message.requestHeader = RequestHeader.internalBinaryRead(reader, reader.uint32(), options, message.requestHeader);
                    break;
                case /* yarsha.upload.v1.GenerateUploadUrlRequestBody Body = 2 [json_name = "Body"];*/ 2:
                    message.body = GenerateUploadUrlRequestBody.internalBinaryRead(reader, reader.uint32(), options, message.body);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenerateUploadUrlRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.upload.v1.RequestHeader RequestHeader = 1 [json_name = "RequestHeader"]; */
        if (message.requestHeader)
            RequestHeader.internalBinaryWrite(message.requestHeader, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.upload.v1.GenerateUploadUrlRequestBody Body = 2 [json_name = "Body"]; */
        if (message.body)
            GenerateUploadUrlRequestBody.internalBinaryWrite(message.body, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.upload.v1.GenerateUploadUrlRequest
 */
export const GenerateUploadUrlRequest = new GenerateUploadUrlRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateUploadUrlResponse$Type extends MessageType<GenerateUploadUrlResponse> {
    constructor() {
        super("yarsha.upload.v1.GenerateUploadUrlResponse", [
            { no: 1, name: "Response", kind: "message", jsonName: "Response", T: () => responseBody },
            { no: 2, name: "ResponseHeader", kind: "message", jsonName: "ResponseHeader", T: () => ResponseHeader }
        ]);
    }
    create(value?: PartialMessage<GenerateUploadUrlResponse>): GenerateUploadUrlResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GenerateUploadUrlResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenerateUploadUrlResponse): GenerateUploadUrlResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* yarsha.upload.v1.responseBody Response = 1 [json_name = "Response"];*/ 1:
                    message.response = responseBody.internalBinaryRead(reader, reader.uint32(), options, message.response);
                    break;
                case /* yarsha.upload.v1.ResponseHeader ResponseHeader = 2 [json_name = "ResponseHeader"];*/ 2:
                    message.responseHeader = ResponseHeader.internalBinaryRead(reader, reader.uint32(), options, message.responseHeader);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenerateUploadUrlResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* yarsha.upload.v1.responseBody Response = 1 [json_name = "Response"]; */
        if (message.response)
            responseBody.internalBinaryWrite(message.response, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* yarsha.upload.v1.ResponseHeader ResponseHeader = 2 [json_name = "ResponseHeader"]; */
        if (message.responseHeader)
            ResponseHeader.internalBinaryWrite(message.responseHeader, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message yarsha.upload.v1.GenerateUploadUrlResponse
 */
export const GenerateUploadUrlResponse = new GenerateUploadUrlResponse$Type();
/**
 * @generated ServiceType for protobuf service yarsha.upload.v1.UploadService
 */
export const UploadService = new ServiceType("yarsha.upload.v1.UploadService", [
    { name: "UploadFileChunked", options: {}, I: UploadFileChunkRequest, O: UploadFileChunkResponse },
    { name: "GetFileUrl", options: {}, I: DownloadFileRequest, O: DownloadFileResponse },
    { name: "GenerateUploadUrl", options: {}, I: GenerateUploadUrlRequest, O: GenerateUploadUrlResponse }
]);
