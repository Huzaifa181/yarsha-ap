// @generated by protobuf-ts 2.9.4
// @generated from protobuf file "stream.proto" (package "socketmanager", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SocketService } from "./stream.message";
import type { PinnedMessageEventResponse } from "./stream.message";
import type { PinnedMessageEventRequest } from "./stream.message";
import type { ReactionResponse } from "./stream.message";
import type { ReactionRequest } from "./stream.message";
import type { ChatEvent } from "./stream.message";
import type { SubscribeChatRequest } from "./stream.message";
import type { ParticipantJoinedResponse } from "./stream.message";
import type { ParticipantJoinedRequest } from "./stream.message";
import type { GroupChatCreatedResponse } from "./stream.message";
import type { GroupChatCreatedRequest } from "./stream.message";
import type { SendMessageResponse } from "./stream.message";
import type { SendMessageRequest } from "./stream.message";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StreamEvent } from "./stream.message";
import type { SubscribeRequest } from "./stream.message";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service socketmanager.SocketService
 */
export interface ISocketServiceClient {
    /**
     * @generated from protobuf rpc: Connect(socketmanager.SubscribeRequest) returns (stream socketmanager.StreamEvent);
     */
    connect(input: SubscribeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRequest, StreamEvent>;
    /**
     * @generated from protobuf rpc: BroadcastMessage(socketmanager.SendMessageRequest) returns (socketmanager.SendMessageResponse);
     */
    broadcastMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, SendMessageResponse>;
    /**
     * @generated from protobuf rpc: GroupChatCreated(socketmanager.GroupChatCreatedRequest) returns (socketmanager.GroupChatCreatedResponse);
     */
    groupChatCreated(input: GroupChatCreatedRequest, options?: RpcOptions): UnaryCall<GroupChatCreatedRequest, GroupChatCreatedResponse>;
    /**
     * @generated from protobuf rpc: ParticipantJoined(socketmanager.ParticipantJoinedRequest) returns (socketmanager.ParticipantJoinedResponse);
     */
    participantJoined(input: ParticipantJoinedRequest, options?: RpcOptions): UnaryCall<ParticipantJoinedRequest, ParticipantJoinedResponse>;
    /**
     * @generated from protobuf rpc: SubscribeChat(socketmanager.SubscribeChatRequest) returns (stream socketmanager.ChatEvent);
     */
    subscribeChat(input: SubscribeChatRequest, options?: RpcOptions): ServerStreamingCall<SubscribeChatRequest, ChatEvent>;
    /**
     * @generated from protobuf rpc: ReactedToGroup(socketmanager.ReactionRequest) returns (socketmanager.ReactionResponse);
     */
    reactedToGroup(input: ReactionRequest, options?: RpcOptions): UnaryCall<ReactionRequest, ReactionResponse>;
    /**
     * @generated from protobuf rpc: PinnedMessageEvent(socketmanager.PinnedMessageEventRequest) returns (socketmanager.PinnedMessageEventResponse);
     */
    pinnedMessageEvent(input: PinnedMessageEventRequest, options?: RpcOptions): UnaryCall<PinnedMessageEventRequest, PinnedMessageEventResponse>;
    /**
     * @generated from protobuf rpc: UnpinnedMessageEvent(socketmanager.PinnedMessageEventRequest) returns (socketmanager.PinnedMessageEventResponse);
     */
    unpinnedMessageEvent(input: PinnedMessageEventRequest, options?: RpcOptions): UnaryCall<PinnedMessageEventRequest, PinnedMessageEventResponse>;
}
/**
 * @generated from protobuf service socketmanager.SocketService
 */
export class SocketServiceClient implements ISocketServiceClient, ServiceInfo {
    typeName = SocketService.typeName;
    methods = SocketService.methods;
    options = SocketService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Connect(socketmanager.SubscribeRequest) returns (stream socketmanager.StreamEvent);
     */
    connect(input: SubscribeRequest, options?: RpcOptions): ServerStreamingCall<SubscribeRequest, StreamEvent> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeRequest, StreamEvent>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: BroadcastMessage(socketmanager.SendMessageRequest) returns (socketmanager.SendMessageResponse);
     */
    broadcastMessage(input: SendMessageRequest, options?: RpcOptions): UnaryCall<SendMessageRequest, SendMessageResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendMessageRequest, SendMessageResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GroupChatCreated(socketmanager.GroupChatCreatedRequest) returns (socketmanager.GroupChatCreatedResponse);
     */
    groupChatCreated(input: GroupChatCreatedRequest, options?: RpcOptions): UnaryCall<GroupChatCreatedRequest, GroupChatCreatedResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<GroupChatCreatedRequest, GroupChatCreatedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ParticipantJoined(socketmanager.ParticipantJoinedRequest) returns (socketmanager.ParticipantJoinedResponse);
     */
    participantJoined(input: ParticipantJoinedRequest, options?: RpcOptions): UnaryCall<ParticipantJoinedRequest, ParticipantJoinedResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ParticipantJoinedRequest, ParticipantJoinedResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SubscribeChat(socketmanager.SubscribeChatRequest) returns (stream socketmanager.ChatEvent);
     */
    subscribeChat(input: SubscribeChatRequest, options?: RpcOptions): ServerStreamingCall<SubscribeChatRequest, ChatEvent> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<SubscribeChatRequest, ChatEvent>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ReactedToGroup(socketmanager.ReactionRequest) returns (socketmanager.ReactionResponse);
     */
    reactedToGroup(input: ReactionRequest, options?: RpcOptions): UnaryCall<ReactionRequest, ReactionResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ReactionRequest, ReactionResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PinnedMessageEvent(socketmanager.PinnedMessageEventRequest) returns (socketmanager.PinnedMessageEventResponse);
     */
    pinnedMessageEvent(input: PinnedMessageEventRequest, options?: RpcOptions): UnaryCall<PinnedMessageEventRequest, PinnedMessageEventResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<PinnedMessageEventRequest, PinnedMessageEventResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UnpinnedMessageEvent(socketmanager.PinnedMessageEventRequest) returns (socketmanager.PinnedMessageEventResponse);
     */
    unpinnedMessageEvent(input: PinnedMessageEventRequest, options?: RpcOptions): UnaryCall<PinnedMessageEventRequest, PinnedMessageEventResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<PinnedMessageEventRequest, PinnedMessageEventResponse>("unary", this._transport, method, opt, input);
    }
}
